{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"ChainXim \u7528\u6237\u6307\u5357 User Guide","text":""},{"location":"#\u7b80\u4ecb-Introduction","title":"\u7b80\u4ecb Introduction","text":"<p>ChainXim\u662f\u4e00\u6b3e\u7531XinLab\u5f00\u53d1\u7684\u533a\u5757\u94fe\u4eff\u771f\u5668\uff0c\u7528\u4e8e\u5bf9\u4e0d\u540c\u53c2\u6570\u8bbe\u7f6e\u4e0b\u7684\u533a\u5757\u94fe\u7cfb\u7edf\u8fdb\u884c\u4eff\u771f\u9a8c\u8bc1\u3002\u6211\u4eec\u5e0c\u671bChainXim\u80fd\u591f\u517c\u5bb9\u4e0d\u540c\u7684\u5171\u8bc6\u534f\u8bae\u3001\u7f51\u7edc\u6a21\u578b\uff0c\u5e76\u53ef\u4ee5\u8bbe\u8ba1\u4e0d\u540c\u7684\u653b\u51fb\u8005\uff0c\u4ece\u591a\u4e2a\u7ef4\u5ea6\u5168\u65b9\u4f4d\u8bc4\u4f30\u533a\u5757\u94fe\u7684\u5b89\u5168\u3001\u541e\u5410\u7b49\u6027\u80fd\u6307\u6807\u3002</p> <p>ChainXim is a blockchain simulator developed by XinLab to simulate and verify blockchain systems under different parameter settings. We hope that ChainXim can be compatible with different consensus protocols, network models, and can design different attackers to comprehensively evaluate the blockchain's security, throughput, and other performance metrics.</p>"},{"location":"#Quick-Start","title":"Quick Start","text":""},{"location":"#\u4e0b\u8f7d-Download","title":"\u4e0b\u8f7d Download","text":"<p>\u4ee3\u7801\u4ed3\u5e93\u5730\u5740\uff1ahttps://github.com/XinLab-SEU/ChainXim</p> <p>\u53ef\u4ee5\u4e0b\u8f7dChainXim\u7684\u538b\u7f29\u5305\u540e\u89e3\u538b\uff0c\u6216\u8005\u514b\u9686\u4f4d\u4e8eGitee\u4e0a\u7684\u8f6f\u4ef6\u4ed3\u5e93</p> <p>\u53ef\u5728ChainXim\u7684\u4ee3\u7801\u4ed3\u5e93\u4e0b\u8f7dmaster\u5206\u652f\u7684\u538b\u7f29\u5305\uff1amaster.zip</p> <p>git\u514b\u9686\u547d\u4ee4\uff1a<code>git clone https://github.com/XinLab-SEU/ChainXim.git</code></p>"},{"location":"#\u6587\u4ef6\u7ed3\u6784-File-Structure","title":"\u6587\u4ef6\u7ed3\u6784 File Structure","text":"<p>\u538b\u7f29\u5305\u89e3\u538b\u540e\u6216\u8f6f\u4ef6\u4ed3\u5e93\u514b\u9686\u540e\u7684\u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\uff1a <pre><code>chain-xim\n    \u251c\u2500\u2500 Attack.py\n    \u251c\u2500\u2500 Environment.py\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 data\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 block.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 chain.py\n    \u2502   \u2514\u2500\u2500 message.py\n    \u251c\u2500\u2500 consensus\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 consensus_abc.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 pow.py\n    \u251c\u2500\u2500 errors.py\n    \u251c\u2500\u2500 external.py\n    \u251c\u2500\u2500 functions.py\n    \u251c\u2500\u2500 global_var.py\n    \u251c\u2500\u2500 main.py\n    \u251c\u2500\u2500 miner\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 _consts.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 miner.py.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 network_interface\n    \u2502       \u251c\u2500\u2500 nic_abc.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 nic_with_tp.py\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 nic_without_tp.py\n    \u251c\u2500\u2500 network\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 adhoc.py\n    \u2502   \u251c\u2500\u2500 deterprop.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 network_abc.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 stochprop.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 synchronous.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 topology.py\n    \u2502   \u251c\u2500\u2500 topolpgy.csv\n    \u2502   \u251c\u2500\u2500 topolpgy_coo.csv\n    \u2502   \u2514\u2500\u2500 topology_eclipse_sample.csv\n    \u2514\u2500\u2500 system_config.ini\n</code></pre></p> \u6587\u4ef6\u6216\u76ee\u5f55 \u529f\u80fd\u63cf\u8ff0 main.py \u4eff\u771f\u5668\u4e3b\u7a0b\u5e8f system_config.ini \u914d\u7f6e\u6587\u4ef6 README.md \u7528\u6237\u6587\u6863 Environment.py \u73af\u5883\u7c7b\u4e0e\u76f8\u5173\u51fd\u6570 miner/ \u5b58\u653e\u77ff\u5de5\u7c7b\u4e0e\u7f51\u7edc\u63a5\u53e3 data/ \u5b58\u653eMesage\u3001BlockHead\u3001Block\u3001Chain\u7c7b\u4e0e\u76f8\u5173\u51fd\u6570 consensus/ \u5b58\u653e\u62bd\u8c61\u5171\u8bc6\u7c7b\u3001PoW\u7c7b\u4e0e\u76f8\u5173\u51fd\u6570\u7684\u76ee\u5f55 network/ \u5b58\u653e\u591a\u79cd\u7f51\u7edc\u7c7b\u7684\u76ee\u5f55 Attack.py \u653b\u51fb\u8005\u7c7b\u4e0e\u76f8\u5173\u51fd\u6570 functions.py \u5305\u542b\u8ba1\u7b97\u54c8\u5e0c\uff08SHA256\uff09\u5728\u5185\u7684\u4e00\u4e9b\u51fd\u6570 external.py \u4e00\u4e9b\u7528\u4e8e\u7edf\u8ba1\u533a\u5757\u94fe\u6307\u6807\u7684\u5916\u90e8\u51fd\u6570 errors.py \u9519\u8bef\u7c7b\uff0c\u7528\u4e8e\u5728\u4eff\u771f\u5668\u4e2d\u629b\u51fa\u9519\u8bef global_var.py \u5b58\u653e\u5168\u5c40\u53d8\u91cf"},{"location":"#\u914d\u7f6e\u73af\u5883-Configuration","title":"\u914d\u7f6e\u73af\u5883 Configuration","text":"<ol> <li>\u5b89\u88c5Anaconda\u3002Anaconda\u4e0b\u8f7d\u94fe\u63a5</li> <li>\u4ece\u5f00\u59cb\u83dc\u5355\u6253\u5f00Anaconda Prompt\u3002</li> <li>\u751f\u6210\u4e00\u4e2aconda\u73af\u5883\u5e76\u6fc0\u6d3b\uff0cPython\u7248\u672c\u9009\u62e93.10\u3002 <pre><code>conda create -n chainxim python=3.10 python-graphviz\nactivate chainxim\n</code></pre></li> <li>\u5728ChainXim\u7684\u6839\u76ee\u5f55\u4e0b\u901a\u8fc7pip\u5b89\u88c5\u6240\u9700\u8981\u7684\u5305\u3002 <pre><code>cd &lt;project_directory&gt;\npip install -r requirements.txt\n</code></pre></li> </ol>"},{"location":"#\u7b80\u5355\u8fd0\u884c-Simple-Startup","title":"\u7b80\u5355\u8fd0\u884c Simple Startup","text":"<ol> <li>\u4ece\u5f00\u59cb\u83dc\u5355\u6253\u5f00Anaconda Prompt\uff0c\u8fd0\u884c\u524d\u9700\u8981\u6fc0\u6d3bconda\u73af\u5883\u3002 <pre><code>activate chainxim\n</code></pre></li> <li>\u5728ChainXim\u7684\u6839\u76ee\u5f55\u4e0b\u8fd0\u884c\u4e3b\u7a0b\u5e8f\u3002 <pre><code>cd &lt;project_directory&gt;\npython main.py\n</code></pre></li> </ol>"},{"location":"#\u6d4b\u8bd5\u7528\u4f8b-Test-Examples","title":"\u6d4b\u8bd5\u7528\u4f8b Test Examples","text":"<p>\u5c06\u4ee5\u4e0b\u53c2\u6570\u4f20\u9012\u7ed9\u4e3b\u7a0b\u5e8f\uff0c\u5c06\u4f1a\u4f7fChainXim\u968f\u673a\u751f\u6210\u4e00\u4e2a\u5305\u542b10\u4e2a\u8282\u70b9\u7684\u77ff\u5de5\u7f51\u7edc\uff0c\u5176\u4e2d2\u4e2a\u8282\u70b9\u4e3a\u653b\u51fb\u8005\uff0c\u91c7\u7528\u7684\u7f51\u7edc\u6a21\u578b\u4e3aTopologyNetwork\uff0c\u4eff\u771f\u603b\u5171\u6301\u7eed3000\u8f6e\u6b21\u3002 <pre><code>python main.py --total_round 3000 --miner_num 10 -t 2 --network_type network.TopologyNetwork --no_compact_outputfile --save_routing_graph --show_label\n</code></pre> \u4eff\u771f\u5f00\u59cb\u540e\u4f1a\u8f93\u51fa\u4eff\u771f\u53c2\u6570\uff0c\u5e76\u5728\u4eff\u771f\u8fdb\u884c\u65f6\u663e\u793a\u8fdb\u5ea6\u6761\u3002 <pre><code>Network Attributes\n    miner_num: 10\n    Generate Approach: rand\n    Generate Edge Probability: 0.8\n    Diameter: 2\n    Average Shortest Path Length: 1.356\n    Degree Histogram: [0, 0, 0, 0, 3, 1, 3, 2, 0, 1]\n    Average Degree: 5.8\n    Average Cluster Coefficient: 0.689\n    Degree Assortativity: -0.251\n\n\nParameters:\nMiner Number: 10\nAdversary Miners: [8, 6]\nConsensus Protocol: PoW\nNetwork Type: TopologyNetwork\nNetwork Param:  {'show_label': True, 'save_routing_graph': True, 'ave_degree': 8.0, 'bandwidth_honest': 0.5, 'bandwidth_adv': 5.0, 'TTL': 500, 'gen_net_approach': 'rand', 'block_prop_times_statistic': [0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}\nConsensus Param: {'target': '000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF', 'q_ave': 5, 'q_distr': 'equal'}\nAttack Execute Type: execute_sample1\n</code></pre> \u4eff\u771f\u7ed3\u675f\u540e\u5c06\u8f93\u51fa\u4eff\u771f\u7ed3\u679c\uff1a</p> <p></p> <p>\u6b64\u5916\uff0c\u4eff\u771f\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5404\u7c7b\u6570\u636e\u5c06\u4fdd\u5b58\u5728Results\u6587\u4ef6\u5939\uff0c\u5305\u62ec\u6bcf\u4e2a\u77ff\u5de5\u7684\u533a\u5757\u94fe\u8bb0\u5f55\u3001\u533a\u5757\u94fe\u53ef\u89c6\u5316\u77e2\u91cf\u56fe\u3001\u533a\u5757\u94fe\u653b\u51fb\u8005\u65e5\u5fd7\u3001\u8def\u7531\u5386\u53f2\u3001\u7f51\u7edc\u62d3\u6251\u56fe\u3001\u533a\u5757\u4f20\u64ad\u793a\u610f\u56fe\u7b49\u3002\u6ce8\u610f\u5982\u679c\u7f3a\u5931\u547d\u4ee4\u884c\u53c2\u6570<code>--no_compact_outputfile --save_routing_graph</code>\uff0c\u90e8\u5206\u6587\u4ef6\u53ef\u80fd\u7f3a\u5931\u3002</p> <p>\u533a\u5757\u94fe\u53ef\u89c6\u5316\u77e2\u91cf\u56fe\uff08blockchain_visualization/Blockchain Structure.gv.svg\uff09 </p> <p> </p> <p>\u56fe\u4e2d\u7ea2\u8272\u533a\u5757\u7531\u653b\u51fb\u8005\u4ea7\u751f\uff0c\u84dd\u8272\u533a\u5757\u7531\u8bda\u5b9e\u77ff\u5de5\u4ea7\u751f\u3002</p> <p>\u533a\u5757\u94fe\u53ef\u89c6\u5316\u56fe\uff08blockchain visualisation.svg\uff09</p> <p></p> <p>\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u4ee3\u8868\u4e00\u4e2a\u533a\u5757\uff0c\u84dd\u70b9\u4ee3\u8868\u8bda\u5b9e\u77ff\u5de5\u4ea7\u751f\u7684\u533a\u5757\uff0c\u7ea2\u70b9\u4ee3\u8868\u653b\u51fb\u8005\u4ea7\u751f\u7684\u533a\u5757\u3002\u6bcf\u4e2a\u70b9\u7684\u6a2a\u5750\u6807\u8868\u793a\u533a\u5757\u4ea7\u751f\u7684\u8f6e\u6b21\uff0c\u7eb5\u5750\u6807\u8868\u793a\u533a\u5757\u6240\u5728\u9ad8\u5ea6\u3002\u6ce8\u610f\uff0c\u5982\u679c\u8fd0\u884c\u8f6e\u6570\u8fc7\u591a\uff0c\u4ea7\u751f\u7684\u533a\u5757\u6570\u8fc7\u591a\uff0c\u4f1a\u5bfc\u81f4\u751f\u6210\u7684\u56fe\u7247\u6324\u6210\u4e00\u56e2\uff0c\u96be\u4ee5\u5206\u8fa8</p> <p>\u533a\u5757\u4ea7\u751f\u65f6\u95f4\u5206\u5e03\u76f4\u65b9\u56fe\uff08block interval distribution.svg\uff09</p> <p></p> <p>\u7f51\u7edc\u62d3\u6251\u56fe\uff08Network Results/network topology.svg\uff09</p> <p></p> <p>\u56fe\u4e2d\u76f8\u90bb\u8282\u70b9\u4e4b\u95f4\u6807\u8bb0\u4e86\u4f20\u8f93\u5e26\u5bbd\uff0c\u5355\u4f4d\u4e3aMB/round\u3002</p> <p>\u533a\u5757\u4f20\u64ad\u793a\u610f\u56fe\uff08\u4ee5\u533a\u5757B2\u4e3a\u4f8b\uff1aNetwork Results/routing_graphB2.svg\uff09</p> <p></p> <p>\u4e0a\u56fe\u5c55\u793a\u4e86\u533a\u5757B2\u4ece\u8282\u70b96\u4f20\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\u7684\u5168\u8fc7\u7a0b\uff0c\u56fe\u4e2d\u6bcf\u4e2a\u5b9e\u5fc3\u7bad\u5934\u90fd\u5e26\u6709\u542b\u4e24\u5bf9\u6b63\u6570\u7684\u6807\u8bb0\uff0c\u7b2c\u4e00\u5bf9\u6807\u8bc6\u67d0\u4e00\u4f20\u64ad\u8fc7\u7a0b\u6e90\u77ff\u5de5\u4e0e\u76ee\u6807\u77ff\u5de5\u7684ID\uff0c\u7b2c\u4e8c\u5bf9\u6807\u8bc6\u67d0\u4e00\u4f20\u64ad\u8fc7\u7a0b\u7684\u8d77\u59cb\u8f6e\u6b21\u4e0e\u7ed3\u675f\u8f6e\u6b21\u3002</p>"},{"location":"#\u4eff\u771f\u5668\u8f93\u5165\u53c2\u6570-Input","title":"\u4eff\u771f\u5668\u8f93\u5165\u53c2\u6570 Input","text":"<p>\u4eff\u771f\u5668\u7684\u8f93\u5165\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u6307\u5b9a\uff1a\u547d\u4ee4\u884c\u4ee5\u53ca\u914d\u7f6e\u6587\u4ef6\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4fee\u6539ChainXim\u9644\u5e26\u7684\u914d\u7f6e\u6587\u4ef6system_config.ini\u4ee5\u6539\u53d8\u4eff\u771f\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u6307\u5b9a\u4e2a\u522b\u4eff\u771f\u53c2\u6570\u3002\u547d\u4ee4\u884c\u652f\u6301\u7684\u53c2\u6570\u5c11\u4e8e\u914d\u7f6e\u6587\u4ef6\uff0c\u4f46\u662f\u4e00\u65e6\u88ab\u6307\u5b9a\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7<code>python main.py --help</code>\u547d\u4ee4\u67e5\u770b\u547d\u4ee4\u884c\u5e2e\u52a9\u4fe1\u606f\u3002</p>"},{"location":"#EnvironmentSettings","title":"EnvironmentSettings","text":"<p>\u914d\u7f6e\u4eff\u771f\u73af\u5883</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e total_round <code>--total_round 50</code> int \u4eff\u771f\u603b\u8f6e\u6b21\u6570 process_bar_type <code>--process_bar_type round</code> str \u8fdb\u5ea6\u6761\u663e\u793a\u98ce\u683c\uff08round\u6216height\uff09 miner_num <code>--miner_num 80</code> int \u7f51\u7edc\u4e2d\u7684\u77ff\u5de5\u603b\u6570 blocksize <code>--blocksize 8</code> float \u533a\u5757\u5927\u5c0f\uff0c\u5355\u4f4dMB consensus_type <code>--consensus_type consensus.PoW</code> str \u5171\u8bc6\u7c7b\u578b\uff0c\u76ee\u524d\u4ec5<code>consensus.PoW</code>\u53ef\u9009 network_type <code>--network_type network.SynchronousNetwork</code> str \u7f51\u7edc\u7c7b\u578b\uff0c<code>network.SynchronousNetwork</code>\u3001<code>network.PropVecNetwork</code>\u3001<code>network.BoundedDelayNetwork</code>\u3001<code>network.TopologyNetwork</code>\u56db\u9009\u4e00 show_fig <code>--show_fig</code> bool \u662f\u5426\u663e\u793a\u4eff\u771f\u8fc7\u7a0b\u4e2d\u7684\u56fe\u50cf compact_outputfile <code>--no_compact_outputfile</code> bool \u662f\u5426\u7b80\u5316log\u548cresult\u8f93\u51fa\u4ee5\u8282\u7701\u78c1\u76d8\u7a7a\u95f4\u901a\u8fc7<code>--no_compact_outputfile</code>\u8bbe\u7f6e\u4e3aFalse"},{"location":"#ConsensusSettings","title":"ConsensusSettings","text":"<p>\u914d\u7f6e\u5171\u8bc6\u534f\u8bae\u53c2\u6570</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e q_ave <code>--q_ave 5</code> int \u5355\u4e2a\u77ff\u5de5\u7684\u5e73\u5747\u54c8\u5e0c\u7387\uff0c\u5373\u6bcf\u8f6e\u80fd\u8ba1\u7b97\u54c8\u5e0c\u7684\u6b21\u6570 q_distr <code>--q_distr equal</code> str \u54c8\u5e0c\u7387\u7684\u5206\u5e03\u6a21\u5f0fequal\uff1a\u6240\u6709\u77ff\u5de5\u54c8\u5e0c\u7387\u76f8\u540c\uff1brand\uff1a\u54c8\u5e0c\u7387\u6ee1\u8db3\u9ad8\u65af\u5206\u5e03 target \u65e0 str 16\u8fdb\u5236\u683c\u5f0f\u7684PoW\u76ee\u6807\u503c \u65e0 <code>--difficulty 12</code> int \u7528\u4e8c\u8fdb\u5236PoW\u76ee\u6807\u503c\u524d\u7f00\u96f6\u7684\u957f\u5ea6\u8868\u793a\u7684PoW\u96be\u5ea6\uff0c\u5728\u4e3b\u7a0b\u5e8f\u8f6c\u6362\u4e3aPoW\u76ee\u6807\u503c"},{"location":"#AttackModeSettings","title":"AttackModeSettings","text":"<p>\u914d\u7f6e\u653b\u51fb\u6a21\u5f0f\u53c2\u6570</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e t <code>-t 0</code> int \u653b\u51fb\u8005\u603b\u6570 adversary_ids \u65e0 tuple[int] \u653b\u51fb\u8005id e.g.(1,3,5) attack_execute_type <code>--attack_execute_type execute_sample1</code> str \u653b\u51fb\u7c7b\u578bexecute_sample0\uff1a\u7b97\u529b\u653b\u51fb\uff1bexecute_sample1\uff1a\u81ea\u79c1\u6316\u77ff"},{"location":"#DeterPropNetworkSettings","title":"DeterPropNetworkSettings","text":"<p>\u914d\u7f6eDeterPropNetwork\u53c2\u6570</p> system_config \u7c7b\u578b \u8bf4\u660e prop_vector list[float] \u4f20\u64ad\u5411\u91cf\uff08\u4ee5\u5217\u8868\u5f62\u5f0f\uff09e.g.[0.1, 0.2, 0.4, 0.6, 1.0]\u5176\u4e2d\u7684\u5143\u7d20\u4ee3\u8868\u4e86\u5f53(1,2,3...)\u8f6e\u8fc7\u540e\u63a5\u6536\u5230\u6d88\u606f\u7684\u77ff\u5de5\u6bd4\u4f8b\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5fc5\u987b\u4e3a1.0"},{"location":"#StochPropNetworkSettings","title":"StochPropNetworkSettings","text":"<p>\u914d\u7f6eStochPropNetwork\u53c2\u6570</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e rcvprob_start <code>--rcvprob_start 0.001</code> float \u6d88\u606f\u7684\u521d\u59cb\u63a5\u6536\u6982\u7387 rcvprob_inc <code>--rcvprob_inc 0.001</code> float \u6bcf\u8f6e\u589e\u52a0\u7684\u6d88\u606f\u63a5\u6536\u6982\u7387 block_prop_times_statistic \u65e0 list[float] \u9700\u7edf\u8ba1\u7684\u533a\u5757\u4f20\u64ad\u65f6\u95f4\u5bf9\u5e94\u7684\u63a5\u6536\u77ff\u5de5\u6bd4\u4f8b"},{"location":"#TopologyNetworkSettings","title":"TopologyNetworkSettings","text":"<p>\u914d\u7f6eTopologyNetwork\u53c2\u6570</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e init_mode <code>--init_mode rand</code> str \u7f51\u7edc\u521d\u59cb\u5316\u65b9\u6cd5, 'adj'\u90bb\u63a5\u77e9\u9635, 'coo'\u7a00\u758f\u7684\u90bb\u63a5\u77e9\u9635, 'rand'\u968f\u673a\u751f\u6210\u3002'adj'\u548c'coo'\u7684\u7f51\u7edc\u62d3\u6251\u901a\u8fc7csv\u6587\u4ef6\u7ed9\u5b9a\u3002'rand'\u9700\u8981\u6307\u5b9a\u5e26\u5bbd\u3001\u5ea6\u7b49\u53c2\u6570 bandwidth_honest <code>--bandwidth_honest 0.5</code> float \u8bda\u5b9e\u77ff\u5de5\u4e4b\u95f4\u4ee5\u53ca\u8bda\u5b9e\u77ff\u5de5\u548c\u653b\u51fb\u8005\u4e4b\u95f4\u7684\u7f51\u7edc\u5e26\u5bbd\uff0c\u5355\u4f4dMB/round bandwidth_adv <code>--bandwidth_adv 5</code> float \u653b\u51fb\u8005\u4e4b\u95f4\u7684\u5e26\u5bbd\uff0c\u5355\u4f4dMB/round rand_mode <code>--rand_mode homogeneous</code> str \u968f\u673a\u7f51\u7edc\u62d3\u6251\u7684\u751f\u6210\u6a21\u5f0f'homogeneous'\uff1a\u6839\u636eave_degree\u751f\u6210\u7f51\u7edc\u5e76\u5c3d\u53ef\u80fd\u4fdd\u6301\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u76f8\u540c'binomial'\uff1a\u91c7\u7528Erd\u0151s-R\u00e9nyi\u7b97\u6cd5\uff0c\u4ee5<code>ave_degree/(miner_num-1)</code>\u6982\u7387\u5728\u8282\u70b9\u4e4b\u95f4\u968f\u673a\u5efa\u7acb\u94fe\u63a5 ave_degree <code>--ave_degree 8</code> float \u7f51\u7edc\u751f\u6210\u65b9\u5f0f\u4e3a'rand'\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u5e73\u5747\u5ea6 stat_prop_times \u65e0 list[float] \u9700\u7edf\u8ba1\u7684\u533a\u5757\u4f20\u64ad\u65f6\u95f4\u5bf9\u5e94\u7684\u63a5\u6536\u77ff\u5de5\u6bd4\u4f8b outage_prob <code>--outage_prob 0.1</code> float \u6bcf\u6761\u94fe\u8def\u6bcf\u8f6e\u7684\u4e2d\u65ad\u6982\u7387\uff0c\u94fe\u8def\u4e2d\u65ad\u540e\u6d88\u606f\u5c06\u5728\u4e0b\u4e00\u8f6e\u91cd\u53d1 dynamic <code>--dynamic</code> bool \u662f\u5426\u4f7f\u7f51\u7edc\u52a8\u6001\u53d8\u5316\uff0c\u5982\u679c\u52a8\u6001\u53d8\u5316\uff0c\u4f1a\u4ee5\u4e00\u5b9a\u6982\u7387\u6dfb\u52a0\u6216\u8005\u5220\u9664\u8282\u70b9\u4e4b\u95f4\u7684\u94fe\u63a5 avg_tp_change_interval \u65e0 float dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u7684\u5e73\u5747\u8f6e\u6b21 edge_remove_prob \u65e0 float dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u5df2\u5b58\u5728\u7684\u6bcf\u6761\u8fb9\u79fb\u9664\u7684\u6982\u7387 edge_add_prob \u65e0 float dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u672a\u5b58\u5728\u7684\u6761\u8fb9\u65b0\u5efa\u7acb\u8fde\u63a5\u7684\u6982\u7387 max_allowed_partitions \u65e0 int dynamic=true\u65f6,\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u6700\u5927\u53ef\u5b58\u5728\u7684\u5206\u533a\u6570\u91cf save_routing_graph <code>--save_routing_graph</code> bool \u662f\u5426\u4fdd\u5b58\u5404\u6d88\u606f\u7684\u8def\u7531\u4f20\u64ad\u56fe\uff0c\u5efa\u8bae\u7f51\u7edc\u89c4\u6a21\u8f83\u5927\u65f6\u5173\u95ed show_label <code>--show_label</code> bool \u662f\u5426\u663e\u793a\u62d3\u6251\u56fe\u6216\u8def\u7531\u4f20\u64ad\u56fe\u4e0a\u7684\u6807\u7b7e\uff0c\u5efa\u8bae\u7f51\u7edc\u89c4\u6a21\u8f83\u5927\u65f6\u5173\u95ed"},{"location":"#AdHocNetworkSettings","title":"AdHocNetworkSettings","text":"<p>\u914d\u7f6eAdHocNetwork\u53c2\u6570</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e init_mode <code>--init_mode rand</code> str \u7f51\u7edc\u521d\u59cb\u5316\u65b9\u6cd5, 'adj'\u90bb\u63a5\u77e9\u9635, 'coo'\u7a00\u758f\u7684\u90bb\u63a5\u77e9\u9635, 'rand'\u968f\u673a\u751f\u6210\u3002'adj'\u548c'coo'\u7684\u7f51\u7edc\u62d3\u6251\u901a\u8fc7csv\u6587\u4ef6\u7ed9\u5b9a\u3002'rand'\u9700\u8981\u6307\u5b9a\u5e26\u5bbd\u3001\u5ea6\u7b49\u53c2\u6570 ave_degree <code>--ave_degree 3</code> float \u7f51\u7edc\u751f\u6210\u65b9\u5f0f\u4e3a'rand'\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u5e73\u5747\u5ea6 segment_size <code>--ave_degree 8</code> float \u6d88\u606f\u5206\u6bb5\u5927\u5c0f \uff1b\u5c06\u5b8c\u6574\u6d88\u606f\u5206\u82e5\u5e72\u6bb5\uff0c\u6bcf\u6bb5\u6d88\u606f\u4f20\u64ad\u65f6\u95f4\u4e3a\u4e00\u8f6e region_width <code>--region_width 100</code> float \u6b63\u65b9\u5f62\u533a\u57df\u7684\u5bbd\u5ea6\uff0c\u8282\u70b9\u5728\u8be5\u533a\u57df\u4e2d\u8fdb\u884c\u9ad8\u65af\u968f\u673a\u6e38\u8d70 comm_range <code>--comm_range 30</code> float \u8282\u70b9\u901a\u4fe1\u8ddd\u79bb\uff0c\u5728\u901a\u4fe1\u8ddd\u79bb\u5185\u7684\u4e24\u8282\u70b9\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 move_variance <code>--move_variance 5</code> float \u8282\u70b9\u8fdb\u884c\u9ad8\u65af\u968f\u673a\u6e38\u8d70\u65f6\uff0c\u6307\u5b9axy\u5750\u6807\u79fb\u52a8\u8ddd\u79bb\u7684\u65b9\u5dee outage_prob <code>--outage_prob 0.1</code> float \u6bcf\u6761\u94fe\u8def\u6bcf\u8f6e\u7684\u4e2d\u65ad\u6982\u7387\uff0c\u94fe\u8def\u4e2d\u65ad\u540e\u6d88\u606f\u5c06\u5728\u4e0b\u4e00\u8f6e\u91cd\u53d1 stat_prop_times \u65e0 list[float] \u9700\u7edf\u8ba1\u7684\u533a\u5757\u4f20\u64ad\u65f6\u95f4\u5bf9\u5e94\u7684\u63a5\u6536\u77ff\u5de5\u6bd4\u4f8b"},{"location":"#\u4eff\u771f\u5668\u8f93\u51fa-Output","title":"\u4eff\u771f\u5668\u8f93\u51fa Output","text":"<p>\u4eff\u771f\u7ed3\u675f\u540e\u4f1a\u5728\u7ec8\u7aef\u6253\u5370\u4eff\u771f\u8fc7\u7a0b\u4e2d\u5168\u5c40\u94fe\u7684\u7edf\u8ba1\u6570\u636e\u3002\u4f8b\uff1a <pre><code>162 blocks are generated in 26682 rounds, in which 61 are stale blocks.\nAverage chain growth in honest miners' chain: 100.013\nNumber of Forks: 54\nFork rate: 0.53465347\nStale rate: 0.37654321\nAverage block time (main chain): 264.17821782 rounds/block\nBlock throughput (main chain): 0.00378532 blocks/round\nThroughput in MB (main chain): 0.12113035 MB/round\nAverage block time (total): 164.7037037 rounds/block\nBlock throughput (total): 0.00607151 blocks/round\nThroughput in MB (total): 0.19428828 MB/round\n\n\nChain_Quality Property: {'Honest Block': 102, 'Adversary Block': 0}\nRatio of blocks contributed by malicious players: 0.0\nUpper Bound t/(n-t): 0.0\nBlock propagation times: {0.1: 60.553, 0.2: 77.534, 0.4: 105.994, 0.5: 109.826, 0.6: 113.23, 0.7: 116.522, 0.8: 120.658, 0.9: 126.447, 1.0: 148.327}\n</code></pre></p> <p>\u7ec8\u7aef\u663e\u793a\u7684\u4eff\u771f\u7ed3\u679c\u542b\u4e49\u5982\u4e0b\uff1a</p> \u8f93\u51fa\u9879\u76ee \u89e3\u91ca Number of stale blocks \u5b64\u7acb\u533a\u5757\u6570\uff08\u4e0d\u5728\u4e3b\u94fe\u4e2d\u7684\u533a\u5757\u6570\uff09 Average chain growth in honest miners' chain \u8bda\u5b9e\u8282\u70b9\u5e73\u5747\u94fe\u957f\u589e\u957f Number of Forks \u5206\u53c9\u6570\u76ee\uff08\u53ea\u7b97\u4e3b\u94fe\uff09 Fork rate \u5206\u53c9\u7387=\u4e3b\u94fe\u4e0a\u6709\u5206\u53c9\u7684\u9ad8\u5ea6\u6570/\u4e3b\u94fe\u9ad8\u5ea6 Stale rate \u5b64\u5757\u7387=\u5b64\u5757\u6570/\u533a\u5757\u603b\u6570 Average block time (main chain) \u4e3b\u94fe\u5e73\u5747\u51fa\u5757\u65f6\u95f4=\u603b\u8f6e\u6570/\u4e3b\u94fe\u957f\u5ea6(\u8f6e/\u5757) Block throughput (main chain) \u4e3b\u94fe\u533a\u5757\u541e\u5410\u91cf=\u4e3b\u94fe\u957f\u5ea6/\u603b\u8f6e\u6570 Throughput in MB (main chain) \u4e3b\u94fe\u533a\u5757\u541e\u5410\u91cf*\u533a\u5757\u5927\u5c0f Average block time (total) \u603b\u5e73\u5747\u51fa\u5757\u65f6\u95f4=\u603b\u8f6e\u6570/\u751f\u6210\u7684\u533a\u5757\u603b\u6570 Block throughput (total) \u603b\u533a\u5757\u541e\u5410\u91cf=\u751f\u6210\u7684\u533a\u5757\u603b\u6570/\u603b\u8f6e\u6570 Throughput in MB (total) =\u603b\u533a\u5757\u541e\u5410\u91cf*\u533a\u5757\u5927\u5c0f common prefix pdf \u7edf\u8ba1\u5171\u540c\u524d\u7f00\u5f97\u5230\u7684pdf\uff08\u7edf\u8ba1\u6bcf\u8f6e\u7ed3\u675f\u65f6\uff0c\u6240\u6709\u8bda\u5b9e\u8282\u70b9\u7684\u94fe\u7684\u5171\u540c\u524d\u7f00\u4e0e\u6700\u957f\u94fe\u957f\u5ea6\u7684\u5dee\u503c\u5f97\u5230\u7684\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\uff09 Consistency rate \u4e00\u81f4\u6027\u6307\u6807=common_prefix_pdf[0] Chain_Quality Property \u8bda\u5b9e\u77ff\u5de5\u548c\u6076\u610f\u77ff\u5de5\u7684\u51fa\u5757\u603b\u6570 Ratio of blocks contributed by malicious players \u6076\u610f\u8282\u70b9\u51fa\u5757\u6bd4\u4f8b Upper Bound t/(n-t) \u6076\u610f\u8282\u70b9\u51fa\u5757\u5360\u6bd4\u7684\u4e0a\u754c(n\u4e3a\u77ff\u5de5\u603b\u6570\uff0ct\u4e3a\u6076\u610f\u77ff\u5de5\u6570\u76ee) Block propagation times \u533a\u5757\u4f20\u64ad\u65f6\u95f4\uff08\u5206\u5e03\uff09 <p>\u4eff\u771f\u8fc7\u7a0b\u4e2d\u7ed3\u679c\u3001\u65e5\u5fd7\u3001\u56fe\u50cf\u90fd\u4fdd\u5b58\u5728Results/\\&lt;date-time&gt;/\u76ee\u5f55\u4e0b\uff0cdate-time\u662f\u4eff\u771f\u5f00\u59cb\u7684\u65e5\u671f\u65f6\u95f4\u3002\u8be5\u76ee\u5f55\u7684\u5178\u578b\u6587\u4ef6\u7ed3\u6784\uff1a <pre><code>Results/20230819-232107/\n\u251c\u2500\u2500 Attack_log.txt\n\u251c\u2500\u2500 Attack_result.txt\n\u251c\u2500\u2500 Chain Data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 chain_data.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 chain_data0.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 chain_data1.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ......\n\u251c\u2500\u2500 Network Results\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ......\n\u251c\u2500\u2500 block interval distribution.svg\n\u251c\u2500\u2500 blockchain visualisation.svg\n\u251c\u2500\u2500 blockchain_visualization\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Blockchain Structure.gv\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Blockchain Structure.gv.svg\n\u251c\u2500\u2500 evaluation results.txt\n\u251c\u2500\u2500 events.log\n\u2514\u2500\u2500 parameters.txt\n</code></pre></p> <p>\u8f93\u51fa\u7684\u4eff\u771f\u7ed3\u679c\u6587\u4ef6\u542b\u4e49\u5982\u4e0b\uff1a</p> \u6587\u4ef6\u6216\u76ee\u5f55 \u529f\u80fd\u63cf\u8ff0 Attack_log.txt \u653b\u51fb\u65e5\u5fd7 Attack_result.txt \u653b\u51fb\u7ed3\u679c Chain Data/ \u5168\u5c40\u94fe\u548c\u5404\u77ff\u5de5\u672c\u5730\u94fe\u7684\u5b8c\u6574\u6570\u636e Network Results/ \u7f51\u7edc\u4f20\u8f93\u7ed3\u679c\uff0c\u5982\u4f20\u64ad\u8fc7\u7a0b\uff08\u5404\u77ff\u5de5\u4f55\u65f6\u6536\u5230\u67d0\u533a\u5757\uff09\u53ca\u7f51\u7edc\u62d3\u6251\u3001\u8def\u7531\u8fc7\u7a0b\u56fe\u7b49 block interval distribution.svg \u533a\u5757\u65f6\u95f4\u5206\u5e03 blockchain visualisation.svg \u533a\u5757\u94fe\u53ef\u89c6\u5316 blockchain_visualization/ \u501f\u52a9Graphviz\u7684\u533a\u5757\u94fe\u53ef\u89c6\u5316 evaluation results.txt \u8bc4\u4f30\u7ed3\u679c events.log \u4eff\u771f\u8fc7\u7a0b\u65e5\u5fd7\uff0c\u8bb0\u5f55\u91cd\u8981\u4e8b\u4ef6\u5982\u4ea7\u751f\u533a\u5757\u3001\u63a5\u5165\u7f51\u7edc\u7b49 parameters.txt \u4eff\u771f\u73af\u5883\u53c2\u6570"},{"location":"#\u4eff\u771f\u5b9e\u4f8b-Simulation-Examples","title":"\u4eff\u771f\u5b9e\u4f8b Simulation Examples","text":""},{"location":"#\u540c\u6b65\u7f51\u7edc\u4e2d\u77ff\u5de5\u6570\u91cf\u4e0e\u51fa\u5757\u65f6\u95f4\u7684\u5173\u7cfb","title":"\u540c\u6b65\u7f51\u7edc\u4e2d\u77ff\u5de5\u6570\u91cf\u4e0e\u51fa\u5757\u65f6\u95f4\u7684\u5173\u7cfb","text":"<p>\u540c\u6b65\u7f51\u7edc \u6a2a\u5750\u6807\u77ff\u5de5\u6570\u76ee \u7eb5\u5750\u6807\u51fa\u5757\u65f6\u95f4</p> <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u4eff\u771f\u6b21\u6570\uff1a200000\u8f6e*1\u6b21</p> </li> <li> <p>\u77ff\u5de5\u6570\uff1a10-80</p> </li> <li> <p>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</p> </li> <li> <p>\u96be\u5ea6\uff1a0000FF...</p> </li> <li> <p>q_ave = 10</p> </li> <li> <p>\u7f51\u7edc\u53c2\u6570\uff1aSynchronousNetwork</p> </li> </ul> <p></p>"},{"location":"#\u53cc\u82b1\u653b\u51fb\u6210\u529f\u7387","title":"\u53cc\u82b1\u653b\u51fb\u6210\u529f\u7387","text":"<p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u4eff\u771f\u6b21\u6570\uff1a1200000\u8f6e*1\u6b21</p> </li> <li> <p>\u77ff\u5de5\u6570\uff1a40</p> </li> <li> <p>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</p> </li> <li> <p>\u96be\u5ea6\uff1a000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>\u7f51\u7edc\u53c2\u6570\uff1a\u56db\u79cd\u7f51\u7edc\u53c2\u6570\u5747\u4e3a\u9ed8\u8ba4</p> </li> </ul> <p></p> <p>\u8fdb\u9636\u6027\u80fd\u5c55\u793a</p>"},{"location":"#\u4e0d\u540c\u7f51\u7edc\u6700\u5927\u65f6\u5ef6\u4e0b\u7684\u5206\u53c9\u7387\u5b64\u5757\u7387\u541e\u5410\u91cf\u4e0e\u4e00\u81f4\u6027","title":"\u4e0d\u540c\u7f51\u7edc\u6700\u5927\u65f6\u5ef6\u4e0b\u7684\u5206\u53c9\u7387\u3001\u5b64\u5757\u7387\u3001\u541e\u5410\u91cf\u4e0e\u4e00\u81f4\u6027","text":"<ul> <li> <p>\u8f6e\u6570\uff1a100000</p> </li> <li> <p>\u77ff\u5de5\u6570\uff1a100</p> </li> <li> <p>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</p> </li> <li> <p>q_ave:10</p> </li> <li> <p>\u96be\u5ea6\uff1a0002FF...</p> </li> <li> <p>\u7f51\u7edc\u7c7b\u578b\uff1aSynchronousNetwork\u548cBoundedDelayNetwork</p> </li> <li> <p>\u7f51\u7edc\u53c2\u6570\uff1arcvprob_start=rcvprob_inc=1/\u6700\u5927\u8f6e\u6570</p> </li> </ul> <p>\u5206\u53c9\u7387/\u5b64\u5757\u7387\u4e0e\u541e\u5410\u91cf\u968f\u6700\u5927\u4f20\u64ad\u65f6\u5ef6\u7684\u53d8\u5316\u793a\u610f\u56fe</p> <p></p> <p>\u4e00\u81f4\u6027\u6307\u6807\u968f\u6700\u5927\u4f20\u64ad\u65f6\u5ef6\u7684\u53d8\u5316\u793a\u610f\u56fe</p> <p></p> <p>\u56fe\u4e2d\uff0cCommon Prefix[0]\u3001[1]\u3001[2]\u5206\u522b\u4ee3\u8868\u5171\u540c\u524d\u7f00PDF\u7684\u524d\u4e09\u4e2a\u5206\u91cf,\u5176\u4e2d\u5e8f\u6570\u4ee3\u8868\u5171\u540c\u524d\u7f00\u4e0e\u4e3b\u94fe\u957f\u5ea6\u7684\u5dee\u503c\uff08\u8be6\u89c1\u201c\u4eff\u771f\u5668\u8f93\u51fa\u201d\u4e00\u8282\uff09\u3002</p>"},{"location":"#\u62d3\u6251\u7f51\u7edc\u4e0b\u533a\u5757\u94fe\u7684\u5171\u540c\u524d\u7f00\u6027\u8d28","title":"\u62d3\u6251\u7f51\u7edc\u4e0b\u533a\u5757\u94fe\u7684\u5171\u540c\u524d\u7f00\u6027\u8d28","text":"<ul> <li>\u8f6e\u6570\uff1a16189</li> <li>\u77ff\u5de5\u6570\uff1a10</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aTopologyNetwork</li> <li>\u7f51\u7edc\u53c2\u6570\uff1agen_net_approach=adj\uff1bgen_net_approach=adj\uff1bbandwidth_honest=0.5</li> </ul> <p>\u6bcf\u8f6e\u7ed3\u675f\u65f6\uff0c\u6240\u6709\u8282\u70b9\u7684\u672c\u5730\u94fe\u76f8\u5bf9\u5171\u540c\u524d\u7f00\u7684\u9ad8\u5ea6\u5dee\u4ee5\u53ca\u5176\u5bf9Common Prefix PDF\u7684\u5f71\u54cd\u5982\u4e0b\u56fe\u6240\u793a\u3002\u4e0b\u65b9\u65f6\u95f4\u8f74\u662f\u53d1\u751f\u94fe\u5c3e\u5207\u6362\u4e8b\u4ef6\u7684\u8f6e\u6b21\uff0c\u4e0ax\u8f74\u662f\u533a\u5757\u9ad8\u5ea6/common prefix\u540e\u7684\u533a\u5757\u957f\u5ea6\uff08suffix length\uff09\uff0cy\u8f74\u662f\u77ff\u5de5ID\u3002\u56fe\u4e2d\u7684\u70ed\u5ea6\u503c\u6307\u4ee3\u7684\u662f\u6bcf\u4e2a\u77ff\u5de5\u672c\u5730\u94fe\u94fe\u5c3e\u4e0e\u5171\u540c\u524d\u7f00\u7684\u8ddd\u79bb\u8fbe\u5230Suffix Length\u7684\u7d2f\u79ef\u6b21\u6570\u3002\u56fe\u4e2dBXX\u6307\u4ee3\u533a\u5757\u7f16\u53f7\uff0c\u4ee3\u8868\u77ff\u5de5\u5728\u5f53\u524d\u8f6e\u6b21\u672c\u5730\u94fe\u94fe\u5c3e\u7684\u72b6\u6001\uff0c\u4e0bx\u8f74\u6307\u4ee3\u8fd9\u4e9b\u533a\u5757\u6240\u5728\u7684\u9ad8\u5ea6\u3002\u70b9\u51fbPlay\u5f00\u59cb\u64ad\u653e\u52a8\u753b\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u533a\u5757\u5728\u5171\u540c\u524d\u7f00\u7684\u4e0b\u4e00\u9ad8\u5ea6\u4ea7\u751f\uff0c\u7136\u540e\u6269\u6563\u5230\u5176\u4ed6\u77ff\u5de5\uff0c\u6700\u540e\u5bfc\u81f4\u5171\u540c\u524d\u7f00\u9ad8\u5ea6+1\u3002</p>"},{"location":"#\u4e0d\u540c\u533a\u5757\u5927\u5c0f\u4e0b\u7684\u5206\u53c9\u7387\u5b64\u5757\u7387\u541e\u5410\u91cf\u4e0e\u4e00\u81f4\u6027","title":"\u4e0d\u540c\u533a\u5757\u5927\u5c0f\u4e0b\u7684\u5206\u53c9\u7387\u3001\u5b64\u5757\u7387\u3001\u541e\u5410\u91cf\u4e0e\u4e00\u81f4\u6027","text":"<ul> <li>\u8f6e\u6570\uff1a500000</li> <li>\u66f2\u7ebf\u4e0a\u5355\u70b9\u91cd\u590d\u6b21\u6570\uff1a5</li> <li>\u77ff\u5de5\u6570\uff1a20</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a0000FF...</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aTopologyNetwork</li> <li>\u7f51\u7edc\u53c2\u6570\uff1aTTL=500\uff1bgen_net_approach=rand\uff1bave_degree=8\uff1bbandwidth_honest=0.5; bandwidth_adv=5\uff1bblock_prop_times_statistic=[0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]</li> </ul> <p>\u5206\u53c9\u7387/\u5b64\u5757\u7387\u4e0e\u541e\u5410\u91cf\u968f\u533a\u5757\u5927\u5c0f\u7684\u53d8\u5316\u793a\u610f\u56fe </p> <p>\u4e00\u81f4\u6027\u6307\u6807\u968f\u533a\u5757\u5927\u5c0f\u7684\u53d8\u5316\u793a\u610f\u56fe </p> <p>\u56fe\u4e2d\uff0cCommon Prefix[0]\u3001[1]\u3001[2]\u5206\u522b\u4ee3\u8868\u5171\u540c\u524d\u7f00PDF\u7684\u524d\u4e09\u4e2a\u5206\u91cf\uff0c\u5176\u4e2d\u5e8f\u6570\u4ee3\u8868\u5171\u540c\u524d\u7f00\u4e0e\u4e3b\u94fe\u957f\u5ea6\u7684\u5dee\u503c\uff08\u8be6\u89c1\u201c\u4eff\u771f\u5668\u8f93\u51fa\u201d\u4e00\u8282\uff09\u3002</p>"},{"location":"#\u4f20\u64ad\u65f6\u5ef6\u968f\u533a\u5757\u5927\u5c0f\u7684\u53d8\u5316","title":"\u4f20\u64ad\u65f6\u5ef6\u968f\u533a\u5757\u5927\u5c0f\u7684\u53d8\u5316","text":"<ul> <li> <p>\u8f6e\u6570\uff1a100000</p> </li> <li> <p>\u77ff\u5de5\u6570\uff1a100</p> </li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>q_ave:10</li> <li>\u96be\u5ea6\uff1a00008F...</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aTopologyNetwork</li> <li>\u7f51\u7edc\u53c2\u6570\uff1aTTL=500\uff1bgen_net_approach=rand\uff1bave_degree=8\uff1bbandwidth_honest=0.5; bandwidth_adv=5\uff1bblock_prop_times_statistic=[0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]</li> </ul> <p>\u4f20\u64ad\u65f6\u5ef6\u4e0e90%\u6709\u6548\u541e\u5410\u91cf\u968f\u533a\u5757\u5927\u5c0f\u7684\u53d8\u5316\u793a\u610f\u56fe</p> <p></p> <p>\u6ce8\uff1aX%\u6709\u6548\u541e\u5410\u91cf=\u533a\u5757\u5927\u5c0f/(X%\u533a\u5757\u4f20\u64ad\u65f6\u5ef6)</p>"},{"location":"#\u4e0d\u540c\u653b\u51fb\u5411\u91cf\u4e0b\u7684\u653b\u51fb\u8005\u51fa\u5757\u5360\u6bd4\u793a\u610f\u56fe","title":"\u4e0d\u540c\u653b\u51fb\u5411\u91cf\u4e0b\u7684\u653b\u51fb\u8005\u51fa\u5757\u5360\u6bd4\u793a\u610f\u56fe","text":""},{"location":"#1-\u7b97\u529b\u653b\u51fbhonest-mining","title":"1. \u7b97\u529b\u653b\u51fb\uff08honest mining\uff09","text":""},{"location":"#\u56db\u79cd\u4e0d\u540c\u7f51\u7edc\u5bf9\u7b97\u529b\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","title":"\u56db\u79cd\u4e0d\u540c\u7f51\u7edc\u5bf9\u7b97\u529b\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","text":"<p>\u4e00\u6b21\u653b\u51fb\u6210\u529f\u7684\u5b9a\u4e49\uff1a\u653b\u51fb\u8005\u4ea7\u51fa\u533a\u5757\uff0c\u5e76\u88ab\u7f51\u7edc\u63a5\u53d7\u3002</p> <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u8f6e\u6570\uff1a100000</p> </li> <li> <p>\u66f2\u7ebf\u4e0a\u5355\u70b9\u91cd\u590d\u6b21\u6570\uff1a20</p> </li> <li> <p>\u77ff\u5de5\u6570\uff1a40</p> </li> <li> <p>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</p> </li> <li> <p>\u96be\u5ea6\uff1a000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>\u7f51\u7edc\u53c2\u6570\uff1a\u56db\u79cd\u7f51\u7edc\u53c2\u6570\u5747\u4e3a\u9ed8\u8ba4</p> </li> </ul>"},{"location":"#2-\u533a\u5757\u622a\u7559\u653b\u51fbselfish-mining","title":"2. \u533a\u5757\u622a\u7559\u653b\u51fb\uff08selfish mining\uff09","text":""},{"location":"#\u56db\u79cd\u4e0d\u540c\u7f51\u7edc\u5bf9\u533a\u5757\u622a\u7559\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","title":"\u56db\u79cd\u4e0d\u540c\u7f51\u7edc\u5bf9\u533a\u5757\u622a\u7559\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","text":"<p>\u7eb5\u5750\u6807\u4e3a\u94fe\u8d28\u91cf\u6307\u6807\uff0c\u5373\u6700\u7ec8\u653b\u51fb\u8005\u4ea7\u51fa\u533a\u5757\u5728\u4e3b\u94fe\u4e2d\u7684\u5360\u6bd4\u3002</p> <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li>\u4eff\u771f\u6b21\u6570\uff1a100000\u8f6e*20\u6b21</li> <li>\u77ff\u5de5\u6570\uff1a40</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>q_ave = 1</li> <li>\u7f51\u7edc\u53c2\u6570\uff1a\u56db\u79cd\u7f51\u7edc\u53c2\u6570\u5747\u4e3a\u9ed8\u8ba4</li> </ul>"},{"location":"#\u77ff\u5de5\u4e0d\u540c\u62e9\u94fe\u7b56\u7565\u5bf9\u533a\u5757\u622a\u7559\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","title":"\u77ff\u5de5\u4e0d\u540c\u62e9\u94fe\u7b56\u7565\u5bf9\u533a\u5757\u622a\u7559\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","text":"<p>\u56fe\u4e2d\u7684\u7406\u8bba\u533a\u57df\u7531\u4ee5\u4e0b\u516c\u5f0f\u5f97\u5230\uff1a</p> \\[ R=\\frac{\\alpha(1-\\alpha)^{2}(4\\alpha+\\gamma(1-2\\alpha))-\\alpha^{3}}{1-\\alpha(1+(2-\\alpha)\\alpha)} \\] <p>\\(\\alpha\\)\u4e3a\u653b\u51fb\u8005\u7b97\u529b\u5360\u5168\u7f51\u6bd4\u4f8b\uff0c\\(0\\leqslant\\alpha\\leqslant\\frac{1}{2}\\)\u3002 \\(\\gamma\\)\u4e3a\u5f53\u7f51\u7edc\u4e2d\u5b58\u5728\u8bda\u5b9e\u94fe\uff08\u6700\u65b0\u7684\u533a\u5757\u7531\u8bda\u5b9e\u8282\u70b9\u4ea7\u51fa\uff09\u4e0e\u653b\u51fb\u94fe\uff08\u4ece\u67d0\u4e00\u4e2a\u533a\u5757\u5f00\u59cb\u5230\u6700\u65b0\u7684\u533a\u5757\u5747\u4e3a\u653b\u51fb\u8005\u4ea7\u751f\uff09\u5206\u53c9\u65f6\uff0c\u9009\u62e9\u5728\u653b\u51fb\u94fe\u4e0a\u7ee7\u7eed\u6316\u77ff\u7684\u8bda\u5b9e\u77ff\u5de5\u5360\u5176\u81ea\u8eab\u7684\u6bd4\u4f8b\uff0c\\(0\\leqslant\\gamma\\leqslant1\\)\u3002 \u6ce8\uff1a\u77ff\u5de5\u62e9\u94fe\u7b56\u7565\u4e3a\u5185\u90e8\u6d4b\u8bd5\u529f\u80fd\uff0c\u6682\u672a\u5f00\u653e\u3002\u4f46\u672c\u4eff\u771f\u5668\u9075\u5faa\u7740\\(\\gamma=0\\)\u7684\u6316\u77ff\u7b56\u7565\uff0c\u5373\u6240\u6709\u8bda\u5b9e\u8282\u70b9\u9ed8\u8ba4\u5728\u8bda\u5b9e\u94fe\u5206\u652f\u4e0a\u7ee7\u7eed\u6316\u77ff\u3002\u56e0\u6b64\u4f7f\u7528\u8005\u53ef\u4ee5\u5229\u7528\u4ee5\u4e0b\u7406\u8bba\u66f2\u7ebf\u516c\u5f0f\u9a8c\u8bc1\u3002</p> \\[ R=\\frac{4\\alpha^{2}(1-\\alpha)^{2}-\\alpha^{3}}{1-\\alpha(1+(2-\\alpha)\\alpha)} \\] <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li>\u4eff\u771f\u6b21\u6570\uff1a100000\u8f6e*20\u6b21</li> <li>\u77ff\u5de5\u6570\uff1a40</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>q_ave = 1</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aSynchronousNetwork</li> </ul>"},{"location":"#3-\u53cc\u82b1\u653b\u51fbdouble-spending","title":"3. \u53cc\u82b1\u653b\u51fb\uff08double spending\uff09","text":""},{"location":"#\u4e0d\u540c\u7f51\u7edc\u5bf9\u53cc\u82b1\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","title":"\u4e0d\u540c\u7f51\u7edc\u5bf9\u53cc\u82b1\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","text":"<p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li>\u4eff\u771f\u6b21\u6570\uff1a1200000\u8f6e*1\u6b21</li> <li>\u77ff\u5de5\u6570\uff1a40</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>q_ave = 1</li> <li>\u7f51\u7edc\u53c2\u6570\uff1a\u56db\u79cd\u7f51\u7edc\u53c2\u6570\u5747\u4e3a\u9ed8\u8ba4</li> </ul>"},{"location":"#\u4e0d\u540c\u7b56\u7565\u5bf9\u53cc\u82b1\u653b\u51fb\u7684\u5f71\u54cd\u4e0e\u7406\u8bba\u5bf9\u6bd4\u793a\u610f\u56fe","title":"\u4e0d\u540c\u7b56\u7565\u5bf9\u53cc\u82b1\u653b\u51fb\u7684\u5f71\u54cd\u4e0e\u7406\u8bba\u5bf9\u6bd4\u793a\u610f\u56fe","text":"<p>\u56fe\u4e2d\u7684\u7406\u8bba\u66f2\u7ebf\u7531\u4ee5\u4e0b\u516c\u5f0f\u5f97\u5230\uff1a</p> \\[P(N,N_g,\\beta)=1-\\sum_{n=0}^{N}\\begin{pmatrix}n+N-1\\\\ n \\end{pmatrix}\\left(\\frac{1}{1+\\beta}\\right)^{N}\\left(\\frac{\\beta}{1+\\beta}\\right)^{n}\\left(\\frac{1-\\beta^{N-n+1}}{1-\\beta^{Ng+1}}\\right)\\] <p>\\(N\\)\u4e3a\u653b\u51fb\u8005\u7b49\u5f85\u786e\u8ba4\u533a\u5757\u7684\u6570\u91cf\uff0c\u5373\u653b\u51fb\u8005\u4f1a\u7b49\u5f85\u8bda\u5b9e\u94fe\u9ad8\u5ea6\u589e\u957f\\(N\\)\u4e2a\u533a\u5757\u540e\u624d\u4f1a\u9009\u62e9\u53d1\u5e03\u4e0e\u5426\u3002 \\(N_g\\)\u8868\u793a\u5f53\u653b\u51fb\u8005\u843d\u540e\u8bda\u5b9e\u94fe\\(N_g\\)\u4e2a\u533a\u5757\u65f6\u653e\u5f03\u5f53\u524d\u653b\u51fb\u3002 \\(\\beta\\)\u4e3a\u653b\u51fb\u8005\u4e0e\u8bda\u5b9e\u77ff\u5de5\u7b97\u529b\u4e4b\u6bd4\uff0c\\(0\\leqslant\\beta\\leqslant1\\)\u3002</p> <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li>\u4eff\u771f\u6b21\u6570\uff1a3000000\u8f6e*1\u6b21</li> <li>\u77ff\u5de5\u6570\uff1a40</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>q_ave = 1</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aSynchronousNetwork</li> </ul>"},{"location":"#4-\u65e5\u8680\u653b\u51fbeclipse-attack","title":"4. \u65e5\u8680\u653b\u51fb\uff08eclipse attack\uff09","text":""},{"location":"#\u53d7\u65e5\u8680\u653b\u51fb\u5f71\u54cd\u4e0b\u7684\u53cc\u82b1\u653b\u51fb\u793a\u610f\u56fe","title":"\u53d7\u65e5\u8680\u653b\u51fb\u5f71\u54cd\u4e0b\u7684\u53cc\u82b1\u653b\u51fb\u793a\u610f\u56fe","text":"<p>\u56fe\u4e2d\u7eff\u8272\u66f2\u7ebf Theory Shift 10% \u4e3a\u66f2\u7ebf Theory\u5411\u5de6\u5e73\u79fb\u4e00\u4e2a\u5355\u4f4d\u5f97\u5230\u3002</p> <p></p> <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li>\u4eff\u771f\u6b21\u6570\uff1a3000000\u8f6e*1\u6b21</li> <li>\u77ff\u5de5\u6570\uff1a20</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>q_ave = 1</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aTopologyNetwork</li> <li>\u7f51\u7edc\u53c2\u6570\uff1a\u56fe\u4e2d\u7684Full connect topolog\u3001Random connect topolog\u3001Eclipse 10% miners \u4ee5\u53ca Eclipse 20% miners\u4f7f\u7528\u56fa\u5b9a\u7684\u90bb\u63a5\u77e9\u9635\u751f\u6210\u62d3\u6251\u7f51\u7edc\uff0c\u5176\u90bb\u63a5\u77e9\u9635\u5206\u522b\u4e3a\\(TP_F\\)\u3001\\(TP_R\\)\u3001\\(TP_1\\)\u548c\\(TP_2\\)\uff0c\u6b64\u5916\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4<ul> <li>\\(TP_F\\)\u77e9\u9635\u4e3a\u9664\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a0\u5916\u5747\u4e3a1\u3002</li> <li>\\(TP_R\\)\u77e9\u9635\u4e3a\u968f\u673a\u751f\u6210\u7684\u62d3\u6251\u7f51\u7edc\u3002</li> <li>\\(TP_1\\)\u77e9\u9635\u5982\u56feTP1\uff08\u5b64\u7acb\u8282\u70b9\u4e3a18\uff0c19\uff09</li> <li>\\(TP_2\\)\u77e9\u9635\u5982\u56feTP2\uff08\u5b64\u7acb\u8282\u70b9\u4e3a16\uff0c17\uff0c18\uff0c19\uff09</li> </ul> </li> </ul> <p>TP1\u90bb\u63a5\u77e9\u9635\uff1a</p> <p></p> <p>TP2\u90bb\u63a5\u77e9\u9635\uff1a</p> <p></p> <p>\u6ce8\uff1a\u5728\u8bbe\u7f6e\u653b\u51fb\u8005\u65f6\u8bf7\u7ed5\u5f00\u5b64\u7acb\u8282\u70b9\uff0c\u624b\u52a8\u8bbe\u7f6e\u3002</p>"},{"location":"#\u5f00\u53d1\u8005\u6587\u6863-Developers-Document","title":"\u5f00\u53d1\u8005\u6587\u6863 Developer's Document","text":"<p>\u8be6\u89c1developer-guide</p>"},{"location":"#\u8d21\u732e\u8005-Contributors","title":"\u8d21\u732e\u8005 Contributors","text":"<p>\u66f9\u82c7\u676d Weihang Cao</p> <ul> <li>\u4e3b\u8981\u8d1f\u8d23\u6574\u4f53\u6846\u67b6\uff0c\u5171\u8bc6\u5c42\u3001\u8bc4\u4f30\u5c42\u7684\u4ee3\u7801\u7f16\u5199\uff0c\u7edf\u7b79\u9879\u76ee\u8fdb\u5ea6   </li> </ul> <p>\u9648\u70b3\u6587 Bingwen Chen</p> <ul> <li>\u4e3b\u8981\u8d1f\u8d23\u7f51\u7edc\u5c42\u90e8\u5206\u7684\u4ee3\u7801\u7f16\u5199  </li> </ul> <p>\u9648\u9633 Yang Chen</p> <ul> <li>\u4e3b\u8981\u8d1f\u8d23\u653b\u51fb\u8005\u90e8\u5206\u7684\u4ee3\u7801\u7f16\u5199  </li> </ul> <p>\u5d14\u81ea\u7fd4 Zixiang Cui</p> <ul> <li>\u4e3b\u8981\u8d1f\u8d23\u5bf9\u5171\u8bc6\u5c42\u548c\u57fa\u7840\u6846\u67b6\u8fdb\u884c\u4f18\u5316   </li> </ul> <p>\u9648\u559c\u5e74 Xinian Chen</p> <ul> <li>\u4e3b\u8981\u8d1f\u8d23\u4eff\u771f\u5668\u7684\u6d4b\u8bd5\u4e0e\u4f18\u5316   </li> </ul> <p>\u51cc\u6615\u5f64 Xintong Ling</p> <ul> <li>\u6307\u5bfc\u8001\u5e08</li> </ul>"},{"location":"developer-guide/","title":"ChainXim \u5f00\u53d1\u8005\u6587\u6863 Developer Guide","text":""},{"location":"developer-guide/#\u603b\u4f53\u67b6\u6784-Framework","title":"\u603b\u4f53\u67b6\u6784 Framework","text":"<p>ChainXim\u4e3b\u8981\u7531Environment\u3001Miner\u3001Adversary\u3001Network\u3001Consensus\u3001Blockchain\u516d\u4e2a\u7ec4\u4ef6\u7ec4\u6210\uff0c\u5176\u4e2dConsensus\u3001Adversary\u4e0eNetwork\u4e09\u5927\u7ec4\u4ef6\u53ef\u914d\u7f6e\u3001\u53ef\u66ff\u6362\uff0c\u4ece\u800c\u9002\u5e94\u4e0d\u540c\u7c7b\u578b\u7684\u5171\u8bc6\u534f\u8bae\u3001\u653b\u51fb\u5411\u91cf\u4e0e\u7f51\u7edc\u6a21\u578b\u3002\u516d\u4e2a\u62bd\u8c61\u7ec4\u4ef6\u4e4b\u95f4\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u6bcf\u4e2a\u62bd\u8c61\u7ec4\u4ef6\u7531\u5bf9\u5e94\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u5b9e\u73b0\uff0c\u5176\u4e2dConsensus\u5bf9\u5e94\u7684Consensus\u7c7b\u4ee5\u53caNetwork\u5bf9\u5e94\u7684Network\u7c7b\u4ec5\u4e3a\u62bd\u8c61\u7c7b\uff0c\u8fd8\u9700\u8981\u6d3e\u751f\u51fa\u6709\u5b9e\u9645\u529f\u80fd\u7684\u7c7b\uff0c\u4ee5\u5b9e\u73b0\u5404\u7c7b\u5171\u8bc6\u534f\u8bae\u4e0e\u7f51\u7edc\u6a21\u578b\u3002</p> <p>\u76ee\u524d\u5df2\u5b9e\u73b0\u7684\u5171\u8bc6\u534f\u8bae\uff08\u76ee\u524dconsensus_type\u914d\u7f6e\u7684\u6240\u6709\u53ef\u9009\u9879\uff09\uff1a</p> \u5171\u8bc6\u7c7b(\u6d3e\u751f\u81eaConsensus) \u8bf4\u660e consensus.PoW \u5de5\u4f5c\u91cf\u8bc1\u660e\u673a\u5236 <p>\u76ee\u524d\u5df2\u5b9e\u73b0\u7684\u7f51\u7edc\u6a21\u578b\uff08\u76ee\u524dnetwork_type\u914d\u7f6e\u7684\u6240\u6709\u53ef\u9009\u9879\uff09\uff1a</p> \u7f51\u7edc\u7c7b(\u6d3e\u751f\u81eaNetwork) \u8bf4\u660e network.SynchronousNetwork \u540c\u6b65\u7f51\u7edc\u6a21\u578b network.DeterPropNetwork \u57fa\u4e8e\u4f20\u64ad\u5411\u91cf\u7684\u7f51\u7edc\u6a21\u578b network.StochPropNetwork \u5ef6\u8fdf\u6709\u754c\u3001\u63a5\u6536\u6982\u7387\u968f\u8f6e\u6b21\u589e\u52a0\u9012\u589e\u7684\u7f51\u7edc\u6a21\u578b network.TopologyNetwork \u590d\u6742\u62d3\u6251\u7f51\u7edc\u6a21\u578b\uff0c\u53ef\u4ee5\u751f\u6210\u968f\u673a\u7f51\u7edc <p>Environment\u662f\u4eff\u771f\u5668\u7684\u6838\u5fc3\u3002\u7528\u6237\u6267\u884cmain.py\u4e2d\u7684\u4e3b\u7a0b\u5e8f\u5f00\u59cb\u4eff\u771f\u3002\u4e3b\u7a0b\u5e8f\u6839\u636e\u4eff\u771f\u53c2\u6570\u521d\u59cb\u5316Environment\u5bf9\u8c61\uff0c\u8c03\u7528<code>exec</code>\u542f\u52a8\u4eff\u771f\u5faa\u73af\uff0c\u4eff\u771f\u7ed3\u675f\u540e\u8c03\u7528<code>view_and_write</code>\u751f\u6210\u4eff\u771f\u7ed3\u679c\u5e76\u5199\u5165Results\u6587\u4ef6\u5939\u3002</p> <p>ChainXim\u5c06\u65f6\u95f4\u79bb\u6563\u5316\u5904\u7406\uff0c\u62bd\u8c61\u4e3a\u201c\u8f6e\u6b21\u201d\uff08round\uff09\uff0c\u4ee5\u8f6e\u6b21\u4e3a\u5355\u4f4d\u6a21\u62df\u6bcf\u4e2a\u8282\u70b9\u7684\u884c\u4e3a\u3002\u6bcf\u4e2a\u8f6e\u6b21\u4f9d\u6b21\u6fc0\u6d3b\u77ff\u5de5\u8282\u70b9\u6267\u884c\u5171\u8bc6\u64cd\u4f5c\uff0c\u6240\u6709\u8282\u70b9\u90fd\u88ab\u6fc0\u6d3b\u4e00\u904d\u4e4b\u540e\uff0c\u8c03\u7528\u7f51\u7edc\u7c7b\u4e2d\u7684<code>diffuse</code>\u65b9\u6cd5\u5728\u77ff\u5de5\u8282\u70b9\u95f4\u8fdb\u884c\u6d88\u606f\u4f20\u8f93\u3002(\u8be6\u89c1\u73af\u5883\u4e0e\u6a21\u578b\u5047\u8bbe\u7ae0\u8282)</p>"},{"location":"developer-guide/#\u73af\u5883\u4e0e\u6a21\u578b\u5047\u8bbe-Environment--Model-Assumptions","title":"\u73af\u5883\u4e0e\u6a21\u578b\u5047\u8bbe Environment &amp; Model Assumptions","text":"<p>Environment\u7ec4\u4ef6\u662fChainXim\u7a0b\u5e8f\u8fd0\u884c\u7684\u57fa\u77f3\uff0c\u5176\u4e3b\u8981\u5b8c\u6210\u4e86\u4eff\u771f\u5668\u7cfb\u7edf\u6a21\u578b\u7684\u67b6\u6784\uff0c\u4ee5\u4fbf\u4e0e\u5176\u5b83\u4e94\u5927\u7ec4\u4ef6\u8fdb\u884c\u5bf9\u63a5\u3002\u540c\u65f6\u4e5f\u5b9a\u4e49\u4e86\u4eff\u771f\u5668\u4e2d\u4e3b\u8981\u7684\u4e00\u4e9b\u53c2\u91cf\uff0c\u5e76\u5c01\u88c5\u4e86\u4eff\u771f\u5668\u5404\u7ec4\u4ef6\u4e2d\u9700\u8981\u8fd0\u7528\u7684\u90e8\u5206\u51fd\u6570\u3002\u4e3a\u4fbf\u4e8e\u7406\u89e3\u8be5\u90e8\u5206\u5185\u5bb9\uff0c\u4e0b\u9762\u5c06\u9996\u5148\u4ecb\u7ecdChainXim\u7684\u6a21\u578b\u5047\u8bbe\u3002</p>"},{"location":"developer-guide/#\u6a21\u578b\u5047\u8bbe","title":"\u6a21\u578b\u5047\u8bbe","text":"<p>ChainXim\u7684\u7cfb\u7edf\u6a21\u578b\u8bbe\u8ba1\u4e3b\u8981\u53c2\u8003\u4e86\u4e0b\u9762\u7684\u8bba\u6587\uff1a</p> <ul> <li>J. A. Garay, A. Kiayias and N. Leonardos, \"The bitcoin backbone protocol: Analysis and applications\", Eurocrypt, 2015. https://eprint.iacr.org/2014/765.pdf</li> </ul> <p>ChainXim\u5c06\u8fde\u7eed\u7684\u65f6\u95f4\u5212\u5206\u4e3a\u4e00\u4e2a\u4e2a\u79bb\u6563\u7684\u8f6e\u6b21\uff0c\u4e14\u7f51\u7edc\u4e2d\u7684\u5168\u90e8\u8282\u70b9\uff08\u5305\u542b\u8bda\u5b9e\u77ff\u5de5\u4e0e\u975e\u8bda\u5b9e\u653b\u51fb\u8005\uff09\u90fd\u5c06\u5728\u6bcf\u4e2a\u8f6e\u6b21\u5185\u8fdb\u884c\u4e00\u5b9a\u6570\u76ee\u7684\u64cd\u4f5c\uff0c\u4ee5\u5b8c\u6210\u8bb0\u8d26\u6743\u7684\u7ade\u4e89\u4e0e\u65b0\u533a\u5757\u7684\u751f\u6210\u4e0e\u4f20\u64ad\u3002\u5b9a\u4e49\u7f51\u7edc\u4e2d\u77ff\u5de5\u603b\u6570\u4e3an\uff0c\u5176\u4e2d\u6709t\u4e2a\u77ff\u5de5\u96b6\u5c5e\u4e8e\u975e\u8bda\u5b9e\u7684\u653b\u51fb\u8005\u3002\u6bcf\u4e2a\u8f6e\u6b21\u4e2d\uff0c\u5168\u4f53\u77ff\u5de5\u6839\u636e\u5404\u81ea\u7684\u7f16\u53f7\u88ab\u4f9d\u6b21\u5524\u9192\uff0c\u5e76\u6839\u636e\u81ea\u5df1\u7684\u8eab\u4efd\u91c7\u53d6\u884c\u52a8\uff0c\u8bda\u5b9e\u77ff\u5de5\u5c06\u4e25\u683c\u4f9d\u7167\u5171\u8bc6\u534f\u8bae\u7684\u89c4\u5219\u4ea7\u751f\u533a\u5757\uff1b\u653b\u51fb\u8005\u5219\u4f1a\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u9075\u5b88\u534f\u8bae\u6216\u53d1\u8d77\u653b\u51fb\u3002\u6ce8\u610f\uff0c\u6bcf\u4e2a\u8f6e\u6b21\u4e2d\uff0c\u653b\u51fb\u6a21\u5757\u53ea\u4f1a\u88ab\u89e6\u53d1\u4e00\u6b21\uff0c\u6bcf\u6b21\u89e6\u53d1\u90fd\u4f1a\u8fdb\u884c\u4e00\u6b21\u5b8c\u6574\u7684\u653b\u51fb\u884c\u4e3a\u3002\u5f53\u524d\u7248\u672c\u4e2d\uff0c\u653b\u51fb\u8005\u6bcf\u8f6e\u6b21\u4e2d\u4f1a\u968f\u673a\u5728\u8f6e\u5230\u67d0\u4e00\u4e2a\u96b6\u5c5e\u4e8e\u653b\u51fb\u8005\u7684\u77ff\u5de5\u65f6\u89e6\u53d1\u3002\u867d\u7136\u4e0d\u540c\u77ff\u5de5\u88ab\u5524\u9192\u7684\u6b21\u5e8f\u4e0d\u540c\uff0c\u4f46\u540c\u4e00\u8f6e\u6b21\u5185\u5b9e\u9645\u4e0a\u4e0d\u5b58\u5728\u5148\u540e\u987a\u5e8f\u3002 </p> <p>\u4e3a\u6a21\u62df\u4e0a\u8ff0\u5404\u65b9\u5728\u73b0\u5b9e\u533a\u5757\u94fe\u7cfb\u7edf\u4e2d\u7684\u5177\u4f53\u64cd\u4f5c\uff0cChainXim\u53c2\u8003\u4e86\u8bba\u6587\u4e2d\u63d0\u51fa\u7684\u4e24\u79cd\u91cd\u8981\u65b9\u6cd5\uff0c\u5b83\u4eec\u5206\u522b\u4e3a\u968f\u673a\u9884\u8a00\uff08Random Oracle\uff09\u548c\u6269\u6563\uff08Diffuse\uff09\u65b9\u6cd5\uff0c\u5176\u5728ChainXim\u4e2d\u7684\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <ul> <li>\u968f\u673a\u9884\u8a00\uff08Random Oracle\uff09\uff1a\u4ee5PoW\u5171\u8bc6\u4e3a\u4f8b\uff0c\u5404\u77ff\u5de5\u5728\u6bcf\u4e00\u8f6e\u6b21\u6700\u591a\u53ef\u6267\u884cq\u6b21\u884c\u52a8\uff08\u4e0d\u540c\u77ff\u5de5\u7684q\u53ef\u80fd\u4e3a\u4e0d\u540c\u503c\uff09\uff0c\u5373q\u6b21\u8fdb\u884c\u54c8\u5e0c\u8ba1\u7b97\u7684\u673a\u4f1a\u3002\u6bcf\u4e2a\u77ff\u5de5\u90fd\u5c06\u8fdb\u884cq\u6b21\u968f\u673a\u67e5\u8be2\u64cd\u4f5c\uff0c\u5373\u5c06\u67d0\u4e00\u968f\u673a\u6570\u8f93\u5165\u54c8\u5e0c\u51fd\u6570\uff0c\u9a8c\u8bc1\u5176\u7ed3\u679c\u662f\u5426\u5c0f\u4e8e\u7ed9\u5b9a\u96be\u5ea6\u503c\u3002\u82e5\u77ff\u5de5\u6210\u529f\u627e\u5230\u4e86\u4f4e\u4e8e\u96be\u5ea6\u503c\u7684\u7ed3\u679c\uff0c\u5219\u89c6\u4e3a\u5176\u6210\u529f\u4ea7\u751f\u4e86\u4e00\u4e2a\u533a\u5757\u3002\u540c\u4e00\u8f6e\u6b21\u4e2d\u4e0d\u540c\u77ff\u5de5\u4ea7\u751f\u7684\u533a\u5757\u89c6\u4f5c\u662f\u540c\u65f6\u4ea7\u751f\u7684\u3002</li> <li>\u6269\u6563\uff08Diffuse\uff09\uff1a\u5f53\u77ff\u5de5\u4ea7\u751f\u4e86\u65b0\u7684\u533a\u5757\uff0c\u5b83\u4f1a\u5c06\u8fd9\u4e2a\u533a\u5757\u4e0a\u4f20\u5230\u7f51\u7edc\uff0c\u7531\u7f51\u7edc\u5c42\u8d1f\u8d23\u6d88\u606f\u4f20\u64ad\u3002\u6839\u636e\u7f51\u7edc\u5c42\u914d\u7f6e\u7684\u4e0d\u540c\uff0c\u4f20\u64ad\u903b\u8f91\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u6b64\u5916\uff0c\u653b\u51fb\u8005\u4e5f\u53ef\u80fd\u9009\u62e9\u4e0d\u4e0a\u4f20\u81ea\u5df1\u672c\u8f6e\u6b21\u6316\u5230\u7684\u533a\u5757\uff0c\u53ea\u6709\u4e0a\u4f20\u5230\u7f51\u7edc\u5c42\u7684\u533a\u5757\u624d\u4f1a\u7ecf\u7531\u8be5\u65b9\u6cd5\u8fdb\u884c\u4f20\u64ad\u3002\u5728ChainXim\u7684\u6a21\u578b\u4e2d\uff0c\u8ba4\u4e3a\u653b\u51fb\u8005\u6240\u63a7\u5236\u7684\u77ff\u5de5\u62e5\u6709\u72ec\u7acb\u4e8e\u533a\u5757\u94fe\u7cfb\u7edf\u7684\u4e13\u7528\u901a\u4fe1\u901a\u9053\uff0c\u5373\u4efb\u4e00\u96b6\u5c5e\u4e8e\u653b\u51fb\u8005\u7684\u77ff\u5de5\u4e00\u65e6\u63a5\u6536\u5230\u67d0\u4e2a\u533a\u5757\uff0c\u5219\u653b\u51fb\u8005\u9ebe\u4e0b\u7684\u6240\u6709\u77ff\u5de5\u5747\u4f1a\u5728\u4e0b\u4e00\u8f6e\u6b21\u6536\u5230\u8be5\u533a\u5757\u3002</li> </ul> <p>\u6ce8\u610f\uff0c\u4e0a\u8ff0\u7684\u6269\u6563\u65b9\u6cd5\u4e3b\u8981\u4e0eNetwork\u7ec4\u4ef6\u5bf9\u63a5\uff0c\u800c\u968f\u673a\u9884\u8a00\u65b9\u6cd5\u5219\u4e0eConsensus\u7ec4\u4ef6\u5bf9\u63a5\u3002\u968f\u5373\u9884\u8a00\u5efa\u6a21\u6700\u521d\u662f\u9488\u5bf9\u6bd4\u7279\u5e01\u4e2d\u7684\u7684PoW\u5171\u8bc6\u534f\u8bae\u63d0\u51fa\u7684\u3002\u4e3a\u4f7f\u4eff\u771f\u5668\u80fd\u591f\u517c\u5bb9\u5176\u5b83\u5171\u8bc6\uff0c\u4f8b\u5982PBFT\u8fd9\u7c7b\u57fa\u4e8e\u4ea4\u4e92\u7684\u5171\u8bc6\uff0cChainXim\u540e\u7eed\u5c06\u8003\u8651\u5728Consensus\u7ec4\u4ef6\u4e2d\u5bf9\u8fd9\u4e00\u65b9\u6cd5\u8fdb\u884c\u91cd\u8f7d\u3002 Environment\u4e2d\u8bbe\u7f6e\u4e86exec\u51fd\u6570\u6765\u4e00\u6b21\u6027\u5b8c\u6210\u4e0a\u8ff0\u4e24\u79cd\u65b9\u6cd5\uff1a\u6bcf\u4e00\u8f6e\u6b21\u4e2d\uff0c\u6240\u6709\u77ff\u5de5\u5c06\u4f9d\u6b21\u88ab\u5524\u9192\uff0c\u5e76\u5404\u81ea\u6267\u884c\u968f\u673a\u9884\u8a00\u65b9\u6cd5\uff1a\u5982\u679c\u77ff\u5de5\u4e3a\u8bda\u5b9e\u65b9\uff0c\u90a3\u4e48exec\u51fd\u6570\u5c06\u8c03\u7528Consensus\u7ec4\u4ef6\u6267\u884c\u8fdb\u884c\u76f8\u5173\u64cd\u4f5c\uff1b\u5982\u679c\u6fc0\u6d3b\u4e86\u653b\u51fb\u8005\uff0c\u5219\u8c03\u7528Attacker\u7ec4\u4ef6\u8fdb\u884c\u76f8\u5173\u64cd\u4f5c\u3002\uff08\u6bcf\u4e00\u8f6e\u6b21\u4e2d\u53ea\u4f1a\u8c03\u7528\u4e00\u6b21Attacker\u7ec4\u4ef6\uff09 \u5f53\u6240\u6709\u77ff\u5de5\u90fd\u5b8c\u6210\u81ea\u5df1\u7684\u884c\u52a8\uff0c\u5373\u56de\u5408\u7ed3\u675f\u65f6\uff0cexec\u51fd\u6570\u4e2d\u5c06\u6267\u884cNetwork\u7ec4\u4ef6\u4e2d\u7684\u6269\u6563\u65b9\u6cd5\uff0c\u5728\u7f51\u7edc\u4e2d\u4f20\u64ad\u533a\u5757\u3002\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u4f8b\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u8be5\u5b9e\u4f8b\u4e2dn=4\uff0ct=1\u3002\u5f53\u7b2ck\u8f6e\u6b21\uff08Round k\uff09\u5f00\u59cb\u65f6\uff0c\u56db\u4e2a\u77ff\u5de5\u5c06\u4f9d\u7167\u5e8f\u53f7\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u88ab\u4f9d\u6b21\u5524\u9192\uff0c\u4e14\u5404\u81ea\u5b8c\u6210\u81ea\u5df1\u7684q\u6b21\u884c\u52a8\u3002\u5176\u4e2d\uff0c\u4ec5\u67092\u53f7\u77ff\u5de5\uff08Miner 2\uff09\u6210\u529f\u83b7\u5f97\u4e86\u8bb0\u8d26\u6743\uff0c\u5e76\u5c06\u4ea7\u751f\u7684\u533a\u5757\u8fdb\u884c\u4f20\u64ad\uff08Diffuse\u65b9\u6cd5\uff09\u3002\u7531\u4e8e\u5404\u81ea\u7684\u4f20\u64ad\u65f6\u5ef6\u4e0d\u5c3d\u76f8\u540c\uff0c1\u53f7\u77ff\u5de5\u4e0e3\u53f7\u77ff\u5de5\u5728\u7b2ck+1\u8f6e\u6b21\u4fbf\u5df2\u6210\u529f\u63a5\u6536\u5230\u4e86\u8be5\u533a\u5757\uff0c\u800c4\u53f7\u77ff\u5de5\u5219\u5230\u7b2ck+2\u8f6e\u6b21\u624d\u6536\u5230\u6b64\u533a\u5757\u3002\u7b2ck+1\u8f6e\u6b21\u6ca1\u6709\u77ff\u5de5\u5b8c\u6210\u51fa\u5757\uff0c\u7b2ck+2\u8f6e\u6b21\u4e2d1\u53f7\u4e0e4\u53f7\u77ff\u5de5\u5219\u90fd\u5b8c\u6210\u4e86\u51fa\u5757\uff0c\u4f46\u8fd9\u91cc4\u53f7\u77ff\u5de5\u4e3a\u653b\u51fb\u8005\uff0c\u5b83\u91c7\u53d6\u4e86\u81ea\u79c1\u6316\u77ff\u7684\u653b\u51fb\u624b\u6bb5\uff0c\u5c06\u968f\u673a\u9884\u8a00\u4e2d\u4ea7\u751f\u7684\u533a\u5757\u7f6e\u4e8e\u79c1\u94fe\u4e0a\uff0c\u5728\u6269\u6563\u4e2d\u4e5f\u6682\u4e0d\u4f20\u64ad\u7ed9\u5176\u5b83\u77ff\u5de5\u3002\u7b2ck+3\u8f6e\u6b21\u4e2d\u53ea\u67094\u53f7\u653b\u51fb\u8005\u77ff\u5de5\u5b8c\u6210\u51fa\u5757\uff0c\u8fd9\u65f6\u5728\u5b83\u7684\u89c6\u91ce\u4e2d\uff0c\u81ea\u5df1\u7684\u79c1\u94fe\u5df2\u7ecf\u957f\u4e8e\u4e3b\u94fe\uff0c\u6545\u5b83\u4f1a\u5c06\u79c1\u94fe\u901a\u8fc7\u6269\u6563\u65b9\u6cd5\u4f20\u64ad\u7ed9\u5176\u5b83\u77ff\u5de5\uff0c\u533a\u5757\u94fe\u81f3\u6b64\u53d1\u751f\u5206\u53c9\uff0c\u4e14\u5728\u6536\u5230\u8be5\u79c1\u94fe\u77ff\u5de5\u7684\u89c6\u91ce\u4e2d\uff0c\u653b\u51fb\u8005\u7684\u94fe\u4e3a\u6700\u957f\u5408\u6cd5\u94fe\u3002\u7b2ck+4\u8f6e\u6b21\u4e2d\uff0c\u5982\u679c1\u53f7\u62162\u53f7\u77ff\u5de5\u6ca1\u6709\u6536\u5230\u79c1\u94fe\uff0c\u5e76\u7ee7\u7eed\u5728\u8bda\u5b9e\u4e3b\u94fe\u4e0a\u6316\u77ff\uff0c\u5219\u5b83\u4eec\u7684\u5229\u76ca\u5c06\u53ef\u80fd\u53d7\u5230\u635f\u5bb3\u3002</p> <p>\u7efc\u4e0a\u6240\u8ff0\uff0cChainXim\u5229\u7528\u79bb\u6563\u7684\u8f6e\u6b21\u4e0e\u53d7\u9650\u7684\u884c\u52a8\u6b21\u6570\u6709\u6548\u62bd\u8c61\u4e86\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u533a\u5757\u7684\u4ea7\u751f\u4e0e\u4f20\u64ad\u3002</p>"},{"location":"developer-guide/#\u4eff\u771f\u5668\u73af\u5883","title":"\u4eff\u771f\u5668\u73af\u5883","text":"<p>\u603b\u4f53\u6765\u8bf4\uff0c\u73af\u5883\u7ec4\u4ef6\u5b8c\u6210\u4e86\u6574\u4f53\u6a21\u578b\u7684\u642d\u5efa\u3002\u521d\u59cb\u5316\u51fd\u6570\u6839\u636e\u8f93\u5165\u53c2\u6570\u8bbe\u7f6e\u57fa\u7840\u53c2\u6570\uff0c\u8c03\u7528\u4e86\u5176\u5b83\u7ec4\u4ef6\u8fdb\u884c\u5404\u81ea\u7684\u521d\u59cb\u5316\uff0c\u8bbe\u7f6en\u4e2a\u77ff\u5de5\u3001\u9009\u5b9at\u4e2a\u653b\u51fb\u8005\u3001\u914d\u7f6e\u5168\u5c40\u533a\u5757\u94fe\u3001\u7f51\u7edc\u7ec4\u4ef6\u3001\u653b\u51fb\u7ec4\u4ef6\u7b49\uff0c\u7528\u4e8e\u540e\u7eed\u8fd0\u884c\u4e0e\u8bc4\u4f30\u3002\u73af\u5883\u7ec4\u4ef6\u4e2d\u7684\u4e3b\u8981\u51fd\u6570\u53ca\u5176\u5404\u81ea\u7684\u53c2\u6570\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e select_adversary_random - \u968f\u673a\u9009\u53d6\u4e00\u5b9a\u6570\u91cf\u7684\u77ff\u5de5\u4f5c\u4e3a\u653b\u51fb\u8005 select_adversary *Miner_ID:tuple \u901a\u8fc7\u8f93\u5165\u6307\u5b9aID\uff0c\u8bbe\u7f6e\u76f8\u5e94\u77ff\u5de5\u4e3a\u653b\u51fb\u8005 envir_create_global_chain - \u521b\u5efa\u73af\u5883\u4e2d\u7684\u5168\u5c40\u533a\u5757\u94fe attack_excute round:int \u6267\u884cattack\u4e2d\u5b9a\u4e49\u7684\u653b\u51fb\u7c7b\u578b exec num_rounds:int, max_height:int, process_bar_type:str \u6267\u884c\u6307\u5b9a\u8f6e\u6570\u6216\u6307\u5b9a\u9ad8\u5ea6\u7684\u4eff\u771f\uff0c\u901a\u8fc7num_rounds\u8bbe\u7f6e\u4eff\u771f\u8fd0\u884c\u7684\u603b\u8f6e\u6570\uff0c\u901a\u8fc7max_height\u8bbe\u7f6e\u4eff\u771f\u7ec8\u6b62\u7684\u9ad8\u5ea6 assess_common_prefix - \u8ba1\u7b97\u8bc4\u4f30\u533a\u5757\u94fe\u7684\u5171\u540c\u524d\u7f00\u7279\u6027 assess_common_prefix_k - \u4f18\u5316\u7684\u8ba1\u7b97\u8bc4\u4f30\u5171\u540c\u524d\u7f00\u7684\u65b9\u6cd5 view - \u5728\u7ec8\u7aef\u7a97\u53e3\u8f93\u51fa\u4eff\u771f\u7ed3\u679c\uff0c\u5305\u542b\u4eff\u771f\u751f\u6210\u7684\u533a\u5757\u94fe\u7ed3\u6784\u56fe\u3001\u541e\u5410\u91cf\u3001\u589e\u957f\u7387(\u53cd\u6620\u94fe\u589e\u957f)\u3001\u5206\u53c9\u7387\u53ca\u5171\u540c\u524d\u7f00\u4e0e\u94fe\u8d28\u91cf\u8bc4\u4f30 view_and_write - \u8f93\u51fa\u4eff\u771f\u7ed3\u679c\u5e76\u4fdd\u5b58\u5728txt\u6587\u4ef6\u4e2d process_bar - \u663e\u793a\u5f53\u524d\u4eff\u771f\u7684\u8fdb\u5ea6\uff0c\u5728\u7ec8\u7aef\u8f93\u51fa\u5b9e\u65f6\u53d8\u52a8\u7684\u8fdb\u5ea6\u6761\u4e0e\u767e\u5206\u6bd4 <p>\u4e0a\u8868\u4e2d\uff0cenvir_create_global_chain\u521d\u59cb\u5316\u751f\u6210\u4e86\u4e00\u6761\u5168\u5c40\u533a\u5757\u94fe\u3002\u6b64\u540e\uff0c\u8be5\u94fe\u5c06\u4f5c\u4e3a\u4e0a\u5e1d\u89c6\u89d2\u4e0b\u7684\u5168\u5c40\u533a\u5757\u94fe\u6811\u4e0e\u5168\u5c40\u6700\u957f\u5408\u6cd5\u94fe\u3002 \u4e3b\u7a0b\u5e8f\u6839\u636e\u4eff\u771f\u53c2\u6570\u521d\u59cb\u5316Environment\u5bf9\u8c61\uff0c\u8c03\u7528<code>exec</code>\u542f\u52a8\u4eff\u771f\u5faa\u73af\uff0c\u5b9e\u73b0\u4e86\u8bba\u6587\u4e2d\u6240\u8ff0\u7684\u968f\u673a\u9884\u8a00\u65b9\u6cd5\u4e0e\u6269\u6563\u65b9\u6cd5,\u5bf9\u4e8e\u653b\u51fb\u8005\u5219\u9700\u901a\u8fc7<code>attack_excute</code>\u8c03\u7528\u76f8\u5e94\u63a5\u53e3\u3002\u4eff\u771f\u7ed3\u675f\u540e\u8c03\u7528<code>view_and_write</code>\u7edf\u8ba1\u5e76\u8f93\u51fa\u4eff\u771f\u7ed3\u679c\u3002</p>"},{"location":"developer-guide/#\u77ff\u5de5-Miner","title":"\u77ff\u5de5 Miner","text":"<p>Miner\u7ec4\u4ef6\u5b9a\u4e49\u4e86\u77ff\u5de5\u7c7b\uff0c\u7528\u4e8e\u521b\u5efa\u77ff\u5de5\u5e76\u8fdb\u884c\u76f8\u5173\u7684\u64cd\u4f5c\u3002\u5176\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> \u51fd\u6570 \u8f93\u5165\u53c2\u6570\u4e0e\u7c7b\u578b \u8fd4\u56de\u503c\u7c7b\u578b \u8bf4\u660e join_network network:Network - \u5728\u7f51\u7edc\u521d\u59cb\u5316\u65f6\u77ff\u5de5\u52a0\u5165\u7f51\u7edc\uff0c\u521d\u59cb\u5316\u7f51\u7edc\u63a5\u53e3 forward msgs:list[Message], msg_source_type:str, forward_strategy:str, spec_targets:list, syncLocalChain:bool - \u901a\u8fc7\u7f51\u7edc\u63a5\u53e3\u5c42\u5c06\u6d88\u606f\u8f6c\u53d1\u7ed9\u5176\u4ed6\u8282\u70b9\u3002 msgs\u9700\u8981\u8f6c\u53d1\u7684\u6d88\u606f\u5217\u8868; msg_source_type\u6d88\u606f\u6765\u6e90\u7c7b\u578b, SELF_GEN_MSG\u8868\u793a\u7531\u672c\u77ff\u5de5\u4ea7\u751f, OUTER_RCV_MSG\u8868\u793a\u7531\u7f51\u7edc\u63a5\u6536; forward_strategy \u6d88\u606f\u8f6c\u53d1\u7b56\u7565; spec_targets \u5982\u679cforward_strategy\u4e3aSPECIFIC, \u5219spec_targets\u4e3a\u8f6c\u53d1\u7684\u76ee\u6807\u8282\u70b9\u5217\u8868; syncLocalChain \u662f\u5426\u5411\u90bb\u5c45\u540c\u6b65\u672c\u5730\u94fe\uff0c\u5c3d\u91cf\u5728\u4ea7\u751f\u65b0\u533a\u5757\u65f6\u540c\u6b65. set_adversary isAdversary:bool - \u8bbe\u7f6e\u5404\u77ff\u5de5\u662f\u5426\u4e3a\u653b\u51fb\u8005 receive msg:message bool \u5904\u7406\u63a5\u6536\u7684\u4fe1\u606f\uff0c\u5b9e\u9645\u4e3a\u8c03\u7528consensus\u7ec4\u4ef6\u4e2d\u7684receive\u65b9\u6cd5 launch_consensus input:any Block|None, bool \u5f00\u59cb\u5171\u8bc6\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e3a\u8c03\u7528consensus\u7ec4\u4ef6\u4e2d\u7684consensus_process\u65b9\u6cd5\uff0c\u8fd4\u56de\u65b0\u6d88\u606fnew_msg\uff08\u6ca1\u6709\u65b0\u6d88\u606f\u5219\u4e3aNone\uff09\u4ee5\u53ca\u662f\u5426\u6709\u65b0\u6d88\u606f\u7684\u6807\u8bc6\u7b26msg_available BackboneProtocol round:int Block|None \u8bda\u5b9e\u77ff\u5de5\u6bcf\u8f6e\u6b21\u6267\u884c\u7684\u64cd\u4f5c\u3002\u9996\u5148\u4ece\u7f51\u7edc\u4e2d\u63a5\u6536\u4fe1\u606f\uff08\u533a\u5757\u94fe\u66f4\u65b0\uff09\uff0c\u5176\u6b21\u8c03\u7528\u6316\u77ff\u51fd\u6570\u5c1d\u8bd5\u751f\u6210\u533a\u5757\u3002\u5982\u679c\u533a\u5757\u94fe\u6709\u66f4\u65b0\uff08\u63a5\u6536\u5230\u65b0\u533a\u5757\u6216\u4ea7\u751f\u4e86\u65b0\u533a\u5757\uff09\uff0c\u5219\u5c06\u65b0\u6d88\u606f\u8fd4\u56de\u7ed9\u73af\u5883\u7ec4\u4ef6\uff0c\u5426\u5219\u8fd4\u56de\u7a7a <p>\u8003\u8651\u5230\u4eff\u771f\u5668\u7684\u62d3\u5c55\u6027\uff0cminer\u7ec4\u4ef6\u81ea\u8eab\u5b9a\u4e49\u7684\u51fd\u6570\u5b9e\u9645\u662f\u5f88\u5c11\u7684\uff0c\u4e3b\u8981\u7684\u51fd\u6570\u90fd\u5728consensus\u7ec4\u4ef6\u4e0eenvironment\u7ec4\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u8be5\u7ec4\u4ef6\u5b9e\u9645\u4e0a\u4e3a\u8054\u7cfb\u5404\u7ec4\u4ef6\u7684\u6865\u6881\u3002miner\u53ea\u80fd\u901a\u8fc7\u7f51\u7edc\u63a5\u53e3<code>self.NIC:NetworkInterface</code>\u4e0e\u7f51\u7edc\u8fdb\u884c\u4ea4\u4e92\uff0c\u7f51\u7edc\u63a5\u53e3\u8c03\u7528<code>receive</code>\u51fd\u6570\u5c06\u5176\u4ed6\u8282\u70b9\u53d1\u9001\u7684\u6d88\u606f\u4f20\u9012\u7ed9\u5f53\u524d\u8282\u70b9\uff0c\u5f53\u524d\u8282\u70b9\u901a\u8fc7<code>forward</code>\u51fd\u6570\u5c06\u8981\u8f6c\u53d1\u7684\u6d88\u606f\u53d1\u7ed9\u7f51\u7edc\u63a5\u53e3\u5c42\uff0c\u7f51\u7edc\u63a5\u53e3\u5c42\u901a\u8fc7\u7f51\u7edc\u5c42\u5c06\u6d88\u606f\u53d1\u9001\u7ed9\u5176\u4ed6\u8282\u70b9\u3002</p>"},{"location":"developer-guide/#\u533a\u5757\u94fe\u6570\u636e-Chain-Data","title":"\u533a\u5757\u94fe\u6570\u636e Chain Data","text":"<p>\u672c\u8282\u4ecb\u7ecdChainXim\u4e2d\u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b\u3002\u5728\u4eff\u771f\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6240\u6709\u533a\u5757\u6570\u636e\u901a\u8fc7data.BlockHead\u3001data.Block\u3001data.Chain\u63cf\u8ff0\u3002\u4e0b\u56fe\u4e3aChainXim\u4e2d\u533a\u5757\u94fe\u6570\u636e\u7ed3\u6784\u7684\u793a\u610f\u56fe\u3002\u6240\u6709Block\u4ee5\u591a\u53c9\u6811\u5f62\u5f0f\u7ec4\u7ec7\u8d77\u6765\uff0c\u6811\u4e0a\u7684\u6bcf\u4e00\u5bf9\u7236\u8282\u70b9\u4e0e\u5b50\u8282\u70b9\u901a\u8fc7Block\u4e2d\u7684parentblock\u4e0enext\u5c5e\u6027\u53cc\u5411\u94fe\u63a5\uff0c\u6811\u7684\u6839\u8282\u70b9\u4e0e\u672b\u7aef\u8282\u70b9\u5206\u522b\u8bb0\u5f55\u4e8eChain.head\u4ee5\u53caChain.last_block\u3002\u56fe\u4e2dChain\u5bf9\u8c61\u5305\u542b\u9ad8\u5ea6\u4e3a2\u7684\u533a\u5757\u94fe\uff0c\u9664\u521b\u4e16\u533a\u5757<code>Block 0</code>\u4ee5\u5916\uff0c\u5171\u6709\u4e09\u4e2a\u533a\u5757\uff0c\u5728\u533a\u5757\u9ad8\u5ea61\u5904\u51fa\u73b0\u5206\u53c9\uff0c<code>Block 0 - Block 1 - Block 3</code>\u6784\u6210\u4e3b\u94fe\uff0c<code>Block 3</code>\u662f\u4e3b\u94fe\u7684\u94fe\u5c3e\u3002</p> <p></p>"},{"location":"developer-guide/#\u6d88\u606f\u7c7b-Message","title":"\u6d88\u606f\u7c7b Message","text":"<p>Message\u662f\u77ff\u5de5\u5728\u6316\u77ff\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6240\u6709\u6d88\u606f\u7684\u57fa\u7c7b\uff0c\u76ee\u524d\u4e3b\u8981\u7684\u6d88\u606f\u4ec5\u6709\u533a\u5757Block\u3002Message\u7684\u5c5e\u6027\u76ee\u524d\u4ec5\u5305\u542b\u6d88\u606f\u957f\u5ea6size\uff0c\u5355\u4f4dMB\u3002</p>"},{"location":"developer-guide/#BlockHead","title":"BlockHead","text":"<p>BlockHead\u7528\u4e8e\u5b9a\u4e49\u533a\u5757\u5934\u4e2d\u7684\u6570\u636e\uff0cdata.BlockHead\u4e3a\u62bd\u8c61\u57fa\u7c7b\uff0c\u5176calculate_blockhash\u4e3a\u62bd\u8c61\u65b9\u6cd5\uff0c\u9700\u8981\u5728\u5171\u8bc6\u7c7b\u4e2d\u5b9a\u4e49\u65b0\u7684BlockHead\u5e76\u8986\u76d6calculate_blockhash\u3002BlockHead\u4ec5\u5305\u542b\u4e0b\u8868\u4e2d\u7684\u5c5e\u6027\uff1a</p> \u5c5e\u6027 \u7c7b\u578b \u8bf4\u660e prehash bytes \u524d\u4e00\u533a\u5757\u7684\u54c8\u5e0c timestamp int \u521b\u5efa\u533a\u5757\u65f6\u7684\u65f6\u95f4\u6233 content Any \u533a\u5757\u4e2d\u627f\u8f7d\u7684\u6570\u636e\uff0c\u5728\u5b9e\u9645\u7cfb\u7edf\u4e2d\u4e00\u822c\u4e3a\u4ea4\u6613\u4fe1\u606f\u6216Merkle Root miner int \u4ea7\u751f\u533a\u5757\u7684\u77ff\u5de5\u6216\u653b\u51fb\u8005\u7684ID <p>\u6ce8\uff1a\u7531\u4e8e\u672c\u4eff\u771f\u5668\u66f4\u52a0\u5173\u5fc3\u533a\u5757\u5728\u7f51\u7edc\u4e2d\u7684\u4f20\u64ad\u60c5\u51b5\uff0c\u56e0\u6b64\uff0c\u5bf9\u4e8e\u533a\u5757\u94fe\u4e2d\u5b58\u50a8\u7684\u6570\u636e\uff08\u4ea4\u6613\uff0c\u667a\u80fd\u5408\u7ea6\u7b49\uff09\uff0c\u4f7f\u7528content\u5c5e\u6027\u5bf9\u5176\u8fdb\u884c\u62bd\u8c61\u3002</p>"},{"location":"developer-guide/#Block","title":"Block","text":"<p>Block\u7528\u4e8e\u5b9a\u4e49\u533a\u5757\u4e2d\u7684\u6570\u636e\uff0c\u9664\u4e86\u533a\u5757\u5934blockhead\u4ee5\u5916\uff0c\u8fd8\u5305\u542b\u4e0b\u8868\u4e2d\u7684\u5c5e\u6027\uff1a</p> \u5c5e\u6027 \u7c7b\u578b \u8bf4\u660e name str \u533a\u5757\u7684friendly name\uff0c\u683c\u5f0f\u4e3a\u5b57\u6bcdB+\u4e00\u4e2a\u6807\u8bc6\u533a\u5757\u4ea7\u751f\u987a\u5e8f\u7684\u5e8f\u53f7 height int \u533a\u5757\u9ad8\u5ea6 blockhash bytes \u533a\u5757\u88ab\u6784\u5efa\u65f6\u81ea\u52a8\u8ba1\u7b97\u51fa\u7684\u533a\u5757\u54c8\u5e0c isAdversaryBlock bool \u662f\u5426\u662f\u653b\u51fb\u8005\u4ea7\u751f\u7684\u533a\u5757 isGenesis bool \u662f\u5426\u662f\u521b\u4e16\u533a\u5757 next list[Block] \u4e00\u4e2a\u5f15\u7528\u5b50\u5757\u7684\u5217\u8868 parentblock Block \u5bf9\u6bcd\u5757\u7684\u5f15\u7528 <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cblockhead\u5c5e\u6027\u4e3a\u53ea\u8bfb\u5c5e\u6027\uff0cBlock\u5bf9\u8c61\u88ab\u6784\u9020\u540e\u4fbf\u4e0d\u53ef\u4fee\u6539\u3002 \u9664\u6b64\u4ee5\u5916Block\u5177\u6709\u4e24\u4e2a\u8f85\u52a9\u65b9\u6cd5\uff1a</p> \u65b9\u6cd5 \u8f93\u5165\u53c2\u6570\u4e0e\u7c7b\u578b \u8fd4\u56de\u503c\u7c7b\u578b \u8bf4\u660e get_height - int \u8fd4\u56deBlock.height calculate_blockhash - bytes \u8c03\u7528blockhead.calculate_blockhash\uff0c\u4fdd\u5b58\u54c8\u5e0c\u503c\u4e8eblockhash\u5e76\u8fd4\u56deblockhash\u7684\u503c <p>\u6700\u540e\uff0c\u4e3a\u4e86\u4f7fBlock\u5bf9\u8c61\u80fd\u591f\u5728Network\u4e2d\u4f20\u8f93\uff0cBlock\u7c7b\u6d3e\u751f\u81eaMessage\u7c7b\u3002</p>"},{"location":"developer-guide/#Chain","title":"Chain","text":"<p>Chain\u4e3b\u8981\u7528\u4e8e\u4fdd\u5b58\u533a\u5757\u94fe\u7684\u6839\u8282\u70b9\u4e0e\u672b\u7aef\u8282\u70b9\uff0c\u5e76\u5b9a\u4e49\u64cd\u4f5c\u533a\u5757\u94fe\u6240\u9700\u7684\u4e00\u7cfb\u5217\u51fd\u6570\u3002Chain\u5305\u542b\u4e0b\u8868\u4e2d\u7684\u5c5e\u6027\uff1a</p> \u5c5e\u6027 \u8bf4\u660e head \u50a8\u5b58\u533a\u5757\u94fe\u7684\u521b\u4e16\u533a\u5757 last_block \u5bf9\u4e3b\u94fe\u672b\u7aef\u533a\u5757\u7684\u5f15\u7528\uff0c\u5bf9\u4e8ePoW\u7cfb\u7edf\u4e3b\u94fe\u4e3a\u591a\u53c9\u6811\u4e0a\u7684\u6700\u957f\u94fe miner_id \u7ef4\u62a4\u533a\u5757\u94fe\u7684\u77ff\u5de5\u6216\u653b\u51fb\u8005\u7684ID\uff0c\u5982\u4e3a\u5168\u5c40\u533a\u5757\u94fe\u5219\u4e3a\u7f3a\u7701\u503cNone <p>Chain\u7c7b\u5177\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u4e8e\u6dfb\u52a0\u65b0\u533a\u5757\u3001\u5408\u5e76\u94fe\u3001\u641c\u7d22\u533a\u5757\u3001\u53ef\u89c6\u5316\u533a\u5757\u94fe\u3001\u4fdd\u5b58\u533a\u5757\u94fe\u6570\u636e\u7b49\uff0c\u89c1\u4e0b\u8868\uff1a</p> \u65b9\u6cd5 \u8f93\u5165\u53c2\u6570\u4e0e\u7c7b\u578b \u8fd4\u56de\u503c\u7c7b\u578b \u8bf4\u660e search_block block: Block Block|None \u5728\u5b58\u50a8\u4e8e\u672c\u5730\u7684\u533a\u5757\u6811\u4e2d\u641c\u7d22\u76ee\u6807\u5757\uff0c\u5b58\u5728\u8fd4\u56de\u8be5\u533a\u5757\uff0c\u4e0d\u5b58\u5728\u8fd4\u56deNone search_block_by_hash blockhash: bytes Block|None \u6309\u7167\u54c8\u5e0c\u5728\u5b58\u50a8\u4e8e\u672c\u5730\u7684\u533a\u5757\u6811\u4e2d\u641c\u7d22\u76ee\u6807\u5757\uff0c\u5b58\u5728\u8fd4\u56de\u8be5\u533a\u5757\uff0c\u4e0d\u5b58\u5728\u8fd4\u56deNone get_last_block - Block \u8fd4\u56deChain.last_block set_last_block block: Block - \u68c0\u67e5block\u662f\u5426\u5728\u94fe\u4e2d\uff0c\u7136\u540e\u8bbe\u7f6e\u8be5block\u4e3alast_block add_blocks blocks: Block | list[block], insert_point: Block Block \u6df1\u62f7\u8d1d\u533a\u5757\u540e\u6dfb\u52a0\u5230\u94fe\u4e2d\uff0cblocks \u53ef\u4ee5\u662flist[Block]\u7c7b\u578b \u4e5f\u53ef\u4ee5\u662fBlock\u7c7b\u578b\uff0cinset_point \u662f\u63d2\u5165\u533a\u5757\u7684\u4f4d\u7f6e \u4ece\u5176\u540e\u5f00\u59cb\u6dfb\u52a0\u9ed8\u8ba4\u4e3alast_block ShowStructure1 - - \u4ee5head\u4e3a\u6839\u8282\u70b9\uff0c\u5728stdout\u6253\u5370\u6574\u4e2a\u591a\u53c9\u6811 ShowStructure miner_num:int - \u751f\u6210blockchain visualisation.svg\uff0c\u663e\u793a\u533a\u5757\u94fe\u4e2d\u6bcf\u4e2a\u533a\u5757\u4ea7\u751f\u7684\u8f6e\u6b21\u4ee5\u53ca\u7236\u5b50\u5173\u7cfb ShowStructureWithGraphviz - - \u5728blockchain_visualization\u76ee\u5f55\u4e0b\u501f\u52a9Graphviz\u751f\u6210\u533a\u5757\u94fe\u53ef\u89c6\u5316\u56fe get_block_interval_distribution - - \u751f\u6210\u51fa\u5757\u65f6\u95f4\u5206\u5e03\u56feblock interval distribution.svg printchain2txt chain_data_url:int - \u5c06\u94fe\u4e2d\u6240\u6709\u5757\u7684\u7ed3\u6784\u4e0e\u4fe1\u606f\u4fdd\u5b58\u5230chain_data_url\uff0c\u9ed8\u8ba4\u4fdd\u5b58\u5230'Chain Data/chain_data.txt' CalculateStatistics rounds:int dict \u751f\u6210\u533a\u5757\u94fe\u7edf\u8ba1\u4fe1\u606f\uff0c\u901a\u8fc7\u5b57\u5178\u8fd4\u56de\u7edf\u8ba1\u4fe1\u606f\uff0crounds\u4e3a\u4eff\u771f\u603b\u8f6e\u6b21\u6570"},{"location":"developer-guide/#\u5171\u8bc6-Consensus","title":"\u5171\u8bc6 Consensus","text":"<p>\u672c\u8282\u4ecb\u7ecdChainXim\u7684\u5171\u8bc6\u5c42\u67b6\u6784\uff0c\u4ee5\u5de5\u4f5c\u91cf\u8bc1\u660e\uff08Proof of Work, PoW\uff09\u4e3a\u4f8b\u89e3\u91ca\u5171\u8bc6\u534f\u8bae\u5728ChainXim\u4e2d\u7684\u5b9e\u73b0\u3002Consensus\u7c7b\u662f\u4e00\u4e2a\u63cf\u8ff0ChainXim\u5171\u8bc6\u5c42\u57fa\u672c\u8981\u7d20\u7684\u62bd\u8c61\u7c7b\uff0c\u5728ChainXim\u4e2d\u5b9e\u73b0\u5171\u8bc6\u534f\u8bae\u9700\u8981\u5728Consensus\u7c7b\u57fa\u7840\u4e0a\u6269\u5c55\u51fa\u65b0\u7684\u5171\u8bc6\u7c7b\u3002\u76ee\u524d\u5df2\u7ecf\u5b9e\u73b0\u7684\u5171\u8bc6\u7c7b\u662fPoW\uff0c\u4e0b\u56fe\u4e3a\u5c55\u73b0PoW\u4e0eConsensus\u5173\u7cfb\u7684\u7c7b\u56fe\u3002</p> <p></p> <p>\u6bcf\u4e00\u4e2aPoW\u5bf9\u8c61\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> \u5c5e\u6027 \u7c7b\u578b \u8bf4\u660e local_chain Chain \u672c\u5730\u94fe\uff0c\u662f\u67d0\u4e00\u77ff\u5de5\u89c6\u89d2\u4e0b\u7684\u533a\u5757\u94fe\uff0c\u5305\u542b\u4e3b\u94fe\u4ee5\u53ca\u6240\u6709\u8be5\u77ff\u5de5\u5df2\u77e5\u7684\u5206\u53c9 _receive_tape list \u63a5\u6536\u961f\u5217\uff0c\u533a\u5757\u5230\u8fbe\u77ff\u5de5\u65f6\u88ab\u6dfb\u52a0\u5230\u63a5\u6536\u961f\u5217\u4e2d\uff0c\u77ff\u5de5\u7684\u56de\u5408\u7ed3\u675f\u540e\u6e05\u7a7a\u961f\u5217 target bytes PoW\u4e2d\u54c8\u5e0c\u8ba1\u7b97\u95ee\u9898\u7684\u76ee\u6807\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53\u533a\u5757\u54c8\u5e0c\u503c\u5c0f\u4e8e\u8be5\u76ee\u6807\u503c\uff0c\u533a\u5757\u6709\u6548 q int \u5355\u4e2a\u77ff\u5de5\u6bcf\u8f6e\u6b21\u53ef\u8ba1\u7b97\u54c8\u5e0c\u6b21\u6570 <p>PoW\u7c7b\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6a21\u62df\u5de5\u4f5c\u91cf\u8bc1\u660e\u673a\u5236\u4e2d\u7684\u51fa\u5757\u3001\u9a8c\u8bc1\u884c\u4e3a\uff0c\u5e76\u901a\u8fc7\u6700\u957f\u94fe\u539f\u5219\u89e3\u51b3\u5206\u53c9\uff1a</p> \u65b9\u6cd5 \u8f93\u5165\u53c2\u6570\u4e0e\u7c7b\u578b \u8fd4\u56de\u503c\u7c7b\u578b \u8bf4\u660e mining_consensus miner_id:int,isadversary:bool,x: Any,round: int Block, bool |None, bool \u6bcf\u4e2a\u8f6e\u6b21\u6267\u884c\u4e00\u6b21\uff0c\u4fee\u6539q\u6b21nonce\u8ba1\u7b97\u533a\u5757\u54c8\u5e0c\uff0c\u5982\u679c\u54c8\u5e0c\u5c0f\u4e8e\u76ee\u6807\u503c\uff0c\u8fd4\u56deBlock\u5bf9\u8c61\u548cTrue\uff0c\u5426\u5219\u8fd4\u56deNone\u548cFalse local_state_update - Block, bool \u9010\u4e00\u9a8c\u8bc1_receive_tape\u4e2d\u7684\u533a\u5757\uff0c\u5c06\u533a\u5757\u5408\u5e76\u5230\u672c\u5730\u94fe\u4e2d\uff0c\u6700\u540e\u901a\u8fc7\u6700\u957f\u94fe\u51c6\u5219\u786e\u5b9a\u4e3b\u94fe\uff0c\u8fd4\u56de\u4e3b\u94fe\u7684\u94fe\u5c3e\u4ee5\u53ca\u4e00\u4e2a\u53cd\u6620\u4e3b\u94fe\u662f\u5426\u88ab\u66f4\u65b0\u7684\u6807\u5fd7\u5982\u679c\u65b0\u533a\u5757\u5408\u6cd5\u4f46\u56e0\u4e3a\u4e2d\u95f4\u533a\u5757\u7f3a\u5931\u65e0\u6cd5\u5e76\u5165\u672c\u5730\u94fe\uff0c\u5219\u653e\u5165\u7f13\u5b58\u4e2d valid_chain lastblock: Block bool \u9a8c\u8bc1\u672b\u7aef\u4e3alastblock\u7684\u94fe valid_block block: Block bool \u9a8c\u8bc1block\u662f\u5426\u6709\u6548\uff0c\u5373\u9a8c\u8bc1\u533a\u5757\u54c8\u5e0c\u662f\u5426\u5c0f\u4e8e\u76ee\u6807\u503c"},{"location":"developer-guide/#\u5171\u8bc6\u534f\u8bae\u4e0e\u533a\u5757","title":"\u5171\u8bc6\u534f\u8bae\u4e0e\u533a\u5757","text":"<p>\u4e0b\u56fe\u5c55\u793a\u4e86Chainxim\u4e2d\u4e0e\u5171\u8bc6\u76f8\u5173\u7684\u7ee7\u627f\u4e0e\u6d3e\u751f\u5173\u7cfb\u3002\u5982\u56fe\u6240\u793a\uff0cPoW.BlockHead\u4e0ePoW.Block\u7c7b\u662f\u5171\u8bc6\u7c7b\u7684\u5b50\u7c7b\uff0c\u6d3e\u751f\u81eadata.BlockHead\u4e0edata.Block\u3002Consensus\u7c7b\u7684\u5b50\u7c7bBlockHead\u4e0eBlock\u7c7b\u5206\u522b\u7ee7\u627f\u81eadata.BlockHead\u4e0edata.Block\uff0c\u5e76\u91cd\u65b0\u5b9a\u4e49\u4e86BlockHead\u4e0eBlock\u7684\u521d\u59cb\u5316\u63a5\u53e3\u3002</p> <p></p> <p>Consensus.BlockHead\u4e0eConsensus.Block\u901a\u8fc7\u5982\u4e0b\u63a5\u53e3\u521d\u59cb\u5316\u3002</p> <p><pre><code># consensus/consensus_abc.py\nclass Consensus(metaclass=ABCMeta):\n    class BlockHead(data.BlockHead):\n        def __init__(self, preblock:data.Block=None, timestamp=0, content=0, miner_id=-1):\n\n    class Block(data.Block):\n        def __init__(self, blockhead: data.BlockHead, preblock: data.Block = None, isadversary=False, blocksize_MB=2):\n</code></pre> \u548cdata.Blockhead\u4e0edata.Block\u76f8\u6bd4\uff0c\u8f93\u5165\u53c2\u6570\u53d1\u751f\u4e86\u4e00\u5b9a\u53d8\u5316\uff0c\u6bd4\u5982prehash\u6362\u6210preblock\uff0c\u53bb\u9664height\u3001blockhash\u7b49\uff0c\u8fd9\u53ef\u4ee5\u5c06data.Block\u4ee5\u53cadata.BlockHead\u7684\u5e95\u5c42\u7ec6\u8282\u9690\u85cf\u8d77\u6765\u3002 \u4ee5PoW\u4e3a\u4f8b\uff0c\u5728\u6784\u9020\u65b0\u7684Block\u5bf9\u8c61\u65f6\uff0c\u9700\u8981\u5148\u6d3e\u751f\u51fa\u5177\u4f53\u5171\u8bc6\u534f\u8bae\u7684\u533a\u5757\u5934PoW.BlockHead\uff0c\u7136\u540e\u7528\u533a\u5757\u5934blockhead\u3001\u524d\u4e00\u533a\u5757preblock\u3001\u653b\u51fb\u8005\u4fe1\u606fisadversary\u6784\u9020PoW.Block\uff08\u5982\u6709\u9700\u8981\uff0c\u53ef\u4ee5\u52a0\u4e0a\u4e00\u4e9b\u5176\u4ed6\u53c2\u6570\uff0c\u5982\u533a\u5757\u5927\u5c0fblocksize_MB\uff09\uff0c\u5176\u63a5\u53e3\u5982\u4e0b\u3002</p> <pre><code># consensus/pow.py\nclass PoW(Consensus):\n    class BlockHead(Consensus.BlockHead):\n        def __init__(self, preblock: Consensus.Block = None, timestamp=0, content=0, miner_id=-1,target = bytes(),nonce = 0):\n            super().__init__(preblock, timestamp, content, miner_id)\n            self.target = target  # \u96be\u5ea6\u76ee\u6807\n            self.nonce = nonce  # \u968f\u673a\u6570\n\n        def calculate_blockhash(self) -&gt; bytes:\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0cPoW.BlockHead\u521d\u59cb\u5316\u65f6\u9664\u4e86\u9700\u8981Consensus.BlockHead\u7684\u8f93\u5165\u53c2\u6570\uff0c\u8fd8\u589e\u52a0\u4e86target\u4ee5\u53canonce\uff1b\u4eceConsensus.BlockHead\u7ee7\u627f\u7684\u8f93\u5165\u53c2\u6570\u7684\u540c\u65f6\u4e5f\u7ee7\u627f\u4e86\u9ed8\u8ba4\u503c\uff0c\u65b0\u589e\u7684\u5165\u53c2\u4e5f\u9700\u8981\u6307\u5b9a\u9ed8\u8ba4\u503c\uff0c\u8fd9\u4e9b\u9ed8\u8ba4\u503c\u5728\u751f\u6210\u521b\u4e16\u533a\u5757\u65f6\u4f1a\u6709\u7528\u3002\u6b64\u5916\uff0ccalculate_blockhash\u65b9\u6cd5\u9700\u8981\u6839\u636e\u5404\u7c7b\u5171\u8bc6\u534f\u8bae\u4e2d\u7684\u533a\u5757\u5b9a\u4e49\u91cd\u5199\u3002</p>"},{"location":"developer-guide/#\u5171\u8bc6\u7c7b\u7684\u521d\u59cb\u5316","title":"\u5171\u8bc6\u7c7b\u7684\u521d\u59cb\u5316","text":"<p>Consensus\u521d\u59cb\u5316\u65f6\u9700\u8981\u77ff\u5de5ID\u4f5c\u4e3a\u53c2\u6570\uff0c\u800c\u4eceConsensus\u6d3e\u751f\u51fa\u7684\u5171\u8bc6\u7c7b\uff0c\u521d\u59cb\u5316\u65f6\u4e00\u822c\u9700\u8981\u989d\u5916\u7684\u5171\u8bc6\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u901a\u8fc7consensus_param\u627f\u8f7d\uff0cconsensus_param\u5728Environment\u5bf9\u8c61\u6784\u9020\u65f6\u6307\u5b9a\uff08\u53ef\u53c2\u8003\u6e90\u4ee3\u7801\uff09\uff0c\u5728Miner\u7c7b\u521d\u59cb\u5316\u65f6\u4f20\u9012\u7ed9\u5171\u8bc6\u5bf9\u8c61\u3002\u5728PoW\u4e2d\uff0cconsensus_param\u5305\u62ec\u4ee5\u4e0b\u4e09\u9879\uff1a</p> \u5c5e\u6027 \u7c7b\u578b \u8bf4\u660e target str PoW\u4e2d\u54c8\u5e0c\u8ba1\u7b97\u95ee\u9898\u7684\u5341\u516d\u8fdb\u5236\u76ee\u6807\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53\u533a\u5757\u54c8\u5e0c\u503c\u5c0f\u4e8e\u8be5\u76ee\u6807\u503c\uff0c\u533a\u5757\u6709\u6548\u3002 q_ave int \u5355\u4e2a\u77ff\u5de5\u6bcf\u8f6e\u6b21\u53ef\u8ba1\u7b97\u54c8\u5e0c\u6b21\u6570\u7684\u5e73\u5747\u503c q_distr str \u5355\u4e2a\u77ff\u5de5\u6bcf\u8f6e\u6b21\u53ef\u8ba1\u7b97\u54c8\u5e0c\u6b21\u6570\u7684\u5206\u5e03 <p>\u6ce8\uff1a\u53c2\u6570q\u6307\u6bcf\u4e2a\u8f6e\u6b21\u6bcf\u4e2a\u77ff\u5de5\u8ba1\u7b97\u54c8\u5e0c\u7684\u6700\u5927\u6b21\u6570\uff0c\u901a\u8fc7q_distr\u4e0eq_ave\u6307\u5b9a\u3002q_distr\u4e3a<code>equal</code>\u65f6\uff0c\u6240\u6709\u77ff\u5de5\u7684q\u5747\u7b49\u4e8eq_ave\uff1b\u5f53q_distr\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5316\u7684\u6570\u7ec4\u65f6\uff0c\u9009\u62e9q_distr\u4e2d\u4e0b\u6807\u4e3aminer_id\u7684\u5143\u7d20\u4f5c\u4e3aq\uff08\u5373\u6309\u7167\u8be5\u6570\u7ec4\u5206\u914d\u7b97\u529b\u5360\u6bd4\uff09\u3002</p> <p>\u5171\u8bc6\u7c7b\u521d\u59cb\u5316\u65f6\u9700\u8981\u521d\u59cb\u5316\u672c\u5730\u94feBlockchain\uff0c\u5e76\u4e3a\u672c\u5730\u94fe\u751f\u6210\u521b\u4e16\u533a\u5757\uff0c\u751f\u6210\u521b\u4e16\u533a\u5757\u65f6\u4f1a\u8c03\u7528Consensus.create_genesis_block\u65b9\u6cd5\uff0c\u5176\u63a5\u53e3\u5982\u4e0b\uff1a</p> <pre><code># consensus/consensus_abc.py\ndef create_genesis_block(self, chain:Chain, blockheadextra:dict = None, blockextra:dict = None):\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u5373\u4e3a\u901a\u8fc7Chain()\u4ea7\u751f\u7684\u7a7a\u94fe\uff0c\u540e\u4e24\u4e2a\u5b57\u5178\u578b\u53c2\u6570\u53ef\u4e3a\u521b\u4e16\u533a\u5757\u6307\u5b9a\u989d\u5916\u53c2\u6570\uff0c\u5728Environment\u6784\u9020\u65f6\u4f20\u5165\u7684genesis_blockheadextra\u4ee5\u53cagenesis_blockextra\u4f1a\u88ab\u4f20\u9012\u5230\u8fd9\u4e2a\u63a5\u53e3\u3002\u67d0\u4e9b\u7279\u6b8a\u7684\u5171\u8bc6\u534f\u8bae\u5982\u679c\u9700\u8981\u6307\u5b9a\u521b\u4e16\u533a\u5757\u7684\u53c2\u6570\uff0c\u5c31\u9700\u8981\u5728\u6784\u9020Environment\u5bf9\u8c61\u65f6\u4f20\u5165\u5b57\u5178\u7c7b\u578b\u7684genesis_blockheadextra\u4ee5\u53cagenesis_blockextra\u3002</p> <p>\u901a\u8fc7create_genesis_block\u751f\u6210\u521b\u4e16\u533a\u5757\u65f6\uff0c\u4f1a\u5148\u8c03\u7528self.BlockHead\u751f\u6210\u521b\u4e16\u533a\u5757\u7684\u533a\u5757\u5934\u3001\u901a\u8fc7blockheadextra\u66f4\u65b0\u533a\u5757\u5934\u3001\u901a\u8fc7self.Block\u751f\u6210\u521b\u4e16\u533a\u5757\u5e76\u8d4b\u503c\u7ed9self.head\uff0c\u6700\u540e\u901a\u8fc7blockextra\u66f4\u65b0\u533a\u5757\u3002</p>"},{"location":"developer-guide/#\u6d88\u606f\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f","title":"\u6d88\u606f\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f","text":"<p>\u5728\u5f53\u524d\u67b6\u6784\u4e2d\uff0cChainXim\u7406\u8bba\u4e0a\u53ef\u4ee5\u652f\u6301Message\u53ca\u5176\u6d3e\u751f\u5bf9\u8c61\u7531\u5171\u8bc6\u5bf9\u8c61(consensus)\u4ea7\u751f\u3001\u5728\u7f51\u7edc\u4e2d\u4f20\u8f93\u5e76\u88ab\u76ee\u6807\u77ff\u5de5\u7684\u5171\u8bc6\u5bf9\u8c61\u5904\u7406\u3002\u672c\u5c0f\u8282\u4ee5PoW\u4e3a\u4f8b\uff0c\u89e3\u91caChainXim\u4e2d\u5178\u578b\u7684\u6d88\u606f\u5bf9\u8c61\u2014\u2014\u533a\u5757\u5982\u4f55\u88ab\u4ea7\u751f\u3001\u4f20\u8f93\u3001\u63a5\u6536\u3001\u9a8c\u8bc1\u5e76\u66f4\u65b0\u5230\u76ee\u6807\u77ff\u5de5\u7684\u672c\u5730\u94fe\u4e2d\u3002</p> <p>\u4e0b\u56fe\u5c55\u793aChainXim\u4e2d\u4e0d\u540c\u6a21\u5757\u3001\u4e0d\u540c\u65b9\u6cd5\u95f4\u7684\u8c03\u7528\u5173\u7cfb\uff1a</p> <p></p> <p>\u5176\u4e2d\u6bd4\u8f83\u503c\u5f97\u5173\u6ce8\u7684\u662f\u7c97\u4f53\u7684\u516d\u4e2a\u65b9\u6cd5\uff0cconsensus_process\u8c03\u7528mining_consensus\u5b9e\u73b0\u51fa\u5757\uff0c\u65b0\u533a\u5757\u7ecf\u7531launch_consensus\u8c03\u7528forward\u8fdb\u5165\u77ff\u5de5\u7684\u8f6c\u53d1\u961f\u5217\uff0c\u6bcf\u8f6e\u6b21diffuse\u88ab\u8c03\u7528\u65f6\u4f1a\u8c03\u7528Miner.NIC.nic_forward\u4f7f\u533a\u5757\u8fdb\u5165\u6a21\u62df\u7f51\u7edc\u5f00\u59cb\u4eff\u771f\u3002\u5728\u77ff\u5de5\u63a5\u6536\u5230\u65b0\u533a\u5757\u65f6\uff0cdiffuse\u8c03\u7528\u8be5\u77ff\u5de5\u7684receive\u65b9\u6cd5\u5b9e\u73b0\u533a\u5757\u63a5\u6536\uff08\u63a5\u6536\u5230\u7684\u533a\u5757\u6682\u5b58\u4e8e\u63a5\u6536\u7f13\u51b2\u533a_receive_tape\uff09\uff0clocal_state_update\u5728\u6bcf\u4e2a\u8f6e\u6b21\u5f00\u59cb\u65f6\u9010\u4e2a\u9a8c\u8bc1_receive_tape\u4e2d\u7684\u533a\u5757\u5e76\u66f4\u65b0\u5230\u76ee\u6807\u77ff\u5de5\u7684\u672c\u5730\u94fe\u4e2d\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u6d88\u606f\u7684\u5177\u4f53\u8f6c\u53d1\u3001\u63a5\u6536\u8fc7\u7a0b\u5bf9\u4e8e\u4e0d\u540c\u7f51\u7edc\u7c7b\u578b\u4f1a\u7565\u6709\u4e0d\u540c\uff0c\u8be6\u89c1\u7f51\u7edc\u4e00\u8282\uff09</p>"},{"location":"developer-guide/#\u533a\u5757\u4ea7\u751f\u4e0e\u4f20\u64ad","title":"\u533a\u5757\u4ea7\u751f\u4e0e\u4f20\u64ad","text":"<p>PoW.consensus_process\u88ab\u8c03\u7528\u540e\u5c06\u8c03\u7528PoW.mining_consensus\uff0c\u8fdb\u884c\u6240\u8c13\u7684\u201c\u6316\u77ff\u201d\u64cd\u4f5c\u3002\u7531\u4e8e\u6bcf\u4e2a\u77ff\u5de5\u4e00\u4e2a\u8f6e\u6b21\u5185\u7684PoW\u5171\u8bc6\u5bf9\u8c61\u53ea\u6709q\u6b21\u8ba1\u7b97\u54c8\u5e0c\u7684\u673a\u4f1a\uff0c\u56e0\u6b64\u6bcf\u6b21\u8c03\u7528mining_consensus\u4ec5\u4ee5\u4e00\u5b9a\u6982\u7387\u751f\u6210\u533a\u5757\u5e76\u4ea7\u751fPoW.Block\u5bf9\u8c61\uff0c\u672a\u80fd\u4ea7\u751f\u65b0\u533a\u5757\u65f6\u8fd4\u56deNone\u3002\u5982\u679cmining_consensus\u8fd4\u56de\u4e86Block\u5bf9\u8c61\uff0cPoW.consensus_process\u5c06Block\u5bf9\u8c61\u6dfb\u52a0\u5230\u672c\u5730\u94fe\uff0c\u7136\u540e\u8fd4\u56de\u5305\u542b\u8be5Block\u5bf9\u8c61\u7684\u5217\u8868\u3002</p> <p>\u8be5\u5217\u8868\u5c06\u88ab\u4f20\u9012\u5230\u4f4d\u4e8eEnvironment.exec\u7684\u4e3b\u5faa\u73af\u4e2d\uff0c\u7136\u540e\u901a\u8fc7\u7f51\u7edc\u7c7b\u7684access_network\u8fdb\u5165\u7f51\u7edc\u6a21\u578b\u4f20\u64ad\u3002\u7531\u4e8eBlock\u7c7b\u662fMessage\u7684\u6d3e\u751f\u7c7b\uff0c\u5176\u5b9e\u4f8b\u53ef\u4ee5\u5728\u7f51\u7edc\u7c7b\u4e2d\u4f20\u64ad\u3002</p>"},{"location":"developer-guide/#\u533a\u5757\u63a5\u6536","title":"\u533a\u5757\u63a5\u6536","text":"<p>\u7f51\u7edc\u7c7b\u7684diffuse\u65b9\u6cd5\u6bcf\u4e2a\u8f6e\u6b21\u7ed3\u675f\u65f6\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\u4f1a\u63a8\u8fdb\u7f51\u7edc\u4e2d\u6570\u636e\u5305\u7684\u4f20\u64ad\u8fdb\u5ea6\u3002\u7f51\u7edc\u6a21\u578b\u4e2d\u7684Block\u5bf9\u8c61\u7ecf\u8fc7\u4e00\u5b9a\u8f6e\u6b21\u4e4b\u540e\u5230\u8fbe\u5176\u4ed6\u77ff\u5de5\uff0c\u6b64\u65f6Miner.receive\u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528\uff0c\u8fdb\u800c\u8c03\u7528receive_filter\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f1a\u6839\u636e\u6d88\u606f\u7c7b\u578b\u8fdb\u884c\u5206\u6d41\uff0c\u5bf9\u63a5\u6536\u5230\u7684Block\u5bf9\u8c61\u8c03\u7528receive_block\u6dfb\u52a0\u5230_receive_tape\u4e2d\u3002</p>"},{"location":"developer-guide/#\u66f4\u65b0\u672c\u5730\u94fe","title":"\u66f4\u65b0\u672c\u5730\u94fe","text":"<p>\u5728BackboneProtocal\u8c03\u7528launch_consensus\u4e4b\u524d\uff0clocal_state_update\u4f1a\u88ab\u8c03\u7528\u3002\u5bf9\u4e8ePoW\u5171\u8bc6\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5c06_receive_tape\u4e2d\u7f13\u5b58\u7684\u533a\u5757\u9010\u4e00\u9a8c\u8bc1\u540e\u5408\u5e76\u5230\u672c\u5730\u94fe\uff1b\u5982\u679c\u5e76\u5165\u7684\u94fe\u6bd4\u5f53\u524d\u4e3b\u94fe\u66f4\u957f\uff0c\u5c31\u5c06\u5176\u8bbe\u7f6e\u4e3a\u4e3b\u94fe\u3002\u9a8c\u8bc1\u8fc7\u7a0b\u5206\u4e3a\u4e24\u6b65\uff0c\u7b2c\u4e00\u6b65\u9a8c\u8bc1\u533a\u5757\u672c\u8eab\u7684\u5408\u6cd5\u6027\uff0c\u5373\u533a\u5757\u54c8\u5e0c\u662f\u5426\u5c0f\u4e8e\u76ee\u6807\u503c\uff0c\u7b2c\u4e8c\u90e8\u68c0\u67e5\u533a\u5757\u7684\u6bcd\u5757\u662f\u5426\u53ef\u4ee5\u4ece\u672c\u5730\u94fe\u4e2d\u68c0\u7d22\u5230\uff0c\u5982\u679c\u68c0\u7d22\u5230\u5219\u5c06\u5408\u6cd5\u65b0\u533a\u5757\u6dfb\u52a0\u5230\u672c\u5730\u94fe\uff0c\u5426\u5219\u653e\u5165_block_buffer\u7b49\u5f85\u5176\u6bcd\u5757\u88ab\u63a5\u6536\u5230\u3002\u5f53_block_buffer\u4e2d\u7684\u6bcd\u5757\u5728local_state_update\u4e2d\u88ab\u5904\u7406\uff0c\u5219\u8c03\u7528synthesis_fork\u4ece_block_buffer\u5c06\u8fd9\u4e2a\u6bcd\u5757\u4e4b\u540e\u7684\u5206\u652f\u5e76\u5165\u672c\u5730\u94fe\u3002</p>"},{"location":"developer-guide/#\u5982\u4f55\u5b9e\u73b0\u65b0\u7684\u5171\u8bc6\u534f\u8bae","title":"\u5982\u4f55\u5b9e\u73b0\u65b0\u7684\u5171\u8bc6\u534f\u8bae","text":"<pre><code>class MyConsensus(Consensus):\n</code></pre> <p>\u4e3a\u4e86\u5728ChainXim\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u5171\u8bc6\u534f\u8bae\uff0c\u9700\u8981\u4eceConsensus\u7c7b\u4e2d\u6d3e\u751f\u51fa\u5171\u8bc6\u7c7b\uff08\u672c\u5c0f\u8282\u4ee5MyConsensus\u4e3a\u4f8b\uff09\uff0c\u5e76\u4e14\u81f3\u5c11\u8986\u76d6\u4ee5\u4e0b\u5b50\u7c7b\u4e0e\u51fd\u6570\uff0c\u5b9e\u73b0\u5176\u57fa\u672c\u529f\u80fd\uff1a</p> <ul> <li>BlockHead: \u4eceConsensus.BlockHead\u6d3e\u751f\uff0c\u5b9a\u4e49\u533a\u5757\u5934\u4e2d\u4e0e\u5171\u8bc6\u534f\u8bae\u76f8\u5173\u7684\u6570\u636e\u9879\uff0c\u9700\u8981\u8986\u76d6calculate_blockhash\u65b9\u6cd5</li> <li>mining_consensus: \u6839\u636e\u5171\u8bc6\u534f\u8bae\u4ea7\u751f\u65b0\u533a\u5757</li> <li>local_state_update: \u6839\u636e\u63a5\u6536\u5230\u7684\u533a\u5757\u66f4\u65b0\u672c\u5730\u94fe</li> <li>valid_chain: \u9a8c\u8bc1\u6574\u6761\u533a\u5757\u94fe\u662f\u5426\u7b26\u5408\u5171\u8bc6\u534f\u8bae</li> <li>valid_block: \u9a8c\u8bc1\u5355\u4e2a\u533a\u5757\u662f\u5426\u7b26\u5408\u5171\u8bc6\u534f\u8bae</li> </ul> <p>MyConsensus.BlockHead\u53ef\u4ee5\u53c2\u8003PoW.BlockHead\u7684\u5199\u6cd5\uff0c\u91cd\u65b0\u5b9e\u73b0__init__\u4ee5\u53cacalculate_blockhash\u4f7fBlockHead\u652f\u6301\u65b0\u7684\u5171\u8bc6\u534f\u8bae\u3002Block\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4eceConsensus\u7ee7\u627f\u800c\u6765\u7684\u5b50\u7c7bBlock\uff0c\u4e5f\u53ef\u4ee5\u5728MyConsensus\u4e2d\u6d3e\u751f\u65b0\u7684Block\u5b50\u7c7b\u3002PoW\u7c7b\u91c7\u7528\u662f\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f46\u5982\u679cBlock\u4e2d\u6709\u9700\u8981\u4f20\u9012\u7684\u6570\u636e\u4f46\u662f\u4e0e\u54c8\u5e0c\u8ba1\u7b97\u4e0d\u76f4\u63a5\u76f8\u5173\uff0c\u53ef\u4ee5\u91c7\u7528\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u5c06\u8fd9\u90e8\u5206\u6570\u636e\u901a\u8fc7\u65b0\u7684Block\u5b50\u7c7b\u627f\u8f7d\u3002</p> <pre><code>    class Block(Consensus.Block):\n        def __init__(self, blockhead: chain.BlockHead, preblock: chain.Block = None, isadversary=False, blocksize_MB=2, other_params):\n            super().__init__(blockhead, preblock, isadversary, blocksize_MB)\n            ...\n</code></pre> <p>Block\u5bf9\u8c61\u7684\u6784\u9020\u8fc7\u7a0b\u53ef\u53c2\u8003\u201c\u5171\u8bc6\u534f\u8bae\u4e0e\u533a\u5757\u201d\u3002</p> <p>\u5bf9\u4e8e\u7c7bPoW\u7684\u5171\u8bc6\u673a\u5236\uff0c\u7531\u4e8e\u6bd4\u8f83\u7b80\u5355\uff0c\u56e0\u6b64\u57fa\u672c\u4e0a\u53ea\u9700\u8981\u8003\u8651\u533a\u5757\u5b9e\u73b0\u5373\u53ef\u3002\u4f46\u8bb8\u591a\u5171\u8bc6\u534f\u8bae\u8fdc\u6bd4\u5de5\u4f5c\u91cf\u8bc1\u660e\u66f4\u52a0\u590d\u6742\uff0c\u8fd9\u79cd\u590d\u6742\u6027\u4f53\u73b0\u5728\u5176\u5171\u8bc6\u8fc7\u7a0b\u9700\u8981\u4ea7\u751f\u533a\u5757\u4ee5\u5916\u7684\u5176\u4ed6\u6d88\u606f\u5e76\u5728\u7f51\u7edc\u4e2d\u4f20\u64ad\uff0c\u5e76\u4e14\u9664\u4e86\u672c\u5730\u94fe\u4ee5\u5916\u6bcf\u4e2a\u77ff\u5de5\u53ef\u80fd\u8fd8\u4f1a\u6709\u5176\u4ed6\u72b6\u6001\u91cf\u3002\u5982\u679c\u8981\u5b9e\u73b0\u8fd9\u6837\u7684\u5171\u8bc6\u534f\u8bae\uff0c\u9700\u8981\u6269\u5c55\u5171\u8bc6\u5c42\u4e0e\u7f51\u7edc\u5c42\u53ef\u5904\u7406\u7684\u5bf9\u8c61\u3002ChainXim\u4e2d\u53ef\u4ee5\u901a\u8fc7\u6d3e\u751fdata.Message\u7c7b\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6bd4\u5982\u589e\u52a0ExtraMessage\u4f5c\u4e3aMyConsensus\u7684\u5b50\u7c7b\uff1a</p> <pre><code>    class ExtraMessage(network.Message):\n        def __init__(self,size,...):\n</code></pre> <p>\u7136\u540e\u5728\u9700\u8981ExtraMessage\u7684\u5730\u65b9\u76f4\u63a5\u6784\u9020\u5373\u53ef\uff0c\u8fd9\u6837\u7684\u5bf9\u8c61\u53ef\u4ee5\u5728\u7f51\u7edc\u5c42\u6b63\u786e\u4f20\u64ad\u3002\u4e3a\u4e86\u4f7fExtraMessage\u88ab\u5171\u8bc6\u5bf9\u8c61\u6b63\u786e\u63a5\u6536\uff0c\u9700\u8981\u5728MyConsensus\u7c7b\u4e2d\u91cd\u5199receive\u65b9\u6cd5\u5e76\u65b0\u589ereceive_extra_message\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u793a\u4f8b\uff1a</p> <pre><code>    def receive(self,msg: Message):\n        if isinstance(msg,Block):\n            return self.receive_block(msg)\n        elif isinstance(msg,ExtraMessage):\n            return self.receive_extra_message(msg)\n    def receive_extra_message(self,extra_msg: ExtraMessage):\n        if extra_msg_not_received_yet:\n            self._receive_tape.append(extra_msg)\n            random.shuffle(self._receive_tape) # \u6253\u4e71\u63a5\u6536\u987a\u5e8f\n            return True\n        else:\n            return False\n</code></pre> <p>\u5982\u679c\u5171\u8bc6\u534f\u8bae\u7c7b\u4f3c\u5de5\u4f5c\u91cf\u8bc1\u660e\u673a\u5236\uff0c\u53ef\u4ee5\u4eff\u7167PoW.mining_consensus\uff0c\u7528MyConsensus.mining_consensus\u5b9e\u73b0\u5171\u8bc6\u673a\u5236\u4e2d\u7684\u51fa\u5757\u7b97\u6cd5\uff0c\u5176\u63a5\u53e3\u5982\u4e0b\uff1a</p> <pre><code>    def mining_consensus(self, Miner_ID, isadversary, x, round):\n</code></pre> <p>\u66f4\u5177\u4f53\u7684\u5199\u6cd5\u53ef\u4ee5\u53c2\u8003PoW.mining_consensus\u3002</p> <p>\u4f46\u5982\u679c\u662f\u66f4\u52a0\u590d\u6742\u7684\u5171\u8bc6\u534f\u8bae\uff0c\u9700\u8981\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u4ea7\u751fBlock\u4ee5\u5916\u7684\u6d88\u606f\u5bf9\u8c61\uff0c\u5219\u9700\u8981\u7528MyConsensus.consensus_process\u8986\u76d6Consensus.consensus_process\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u673a\uff0c\u793a\u4f8b\uff1a</p> <pre><code>    def consensus_process(self, Miner_ID, isadversary, x, round):\n        if self.state == STATE1:\n            newblock, mine_success = self.mining_consensus(Miner_ID, isadversary, x, round)\n            if mine_success is True:\n                self.local_chain.add_blocks(newblock)\n                self.local_chain.set_last_block(newblock)\n                self.state = NEXT_STATE\n                return [newblock], True # \u8fd4\u56de\u6316\u51fa\u7684\u533a\u5757\n            else:\n                return None, False\n        elif self.state == STATE2:\n            DO_SOMETHING_TO_PRODUCE_EXTRA_MESSAGE\n            self.state = NEXT_STATE\n            if len(list_of_extra_messages) &gt; 0:\n                return list_of_extra_messages, True\n            else:\n                return None, False\n</code></pre> <p>\u5176\u4e2dself.state\u662f\u63a7\u5236\u5171\u8bc6\u7c7b\u5b9e\u4f8b\u7684\u72b6\u6001\uff0c\u5728STATE2\u4e0bconsensus_process\u5982\u679c\u4ea7\u751f\u4e86\u65b0\u7684\u6d88\u606f\u5219\u8fd4\u56de\u7531ExtraMessage\u6784\u6210\u7684\u5217\u8868\u4ee5\u53caTrue\uff1b\u5982\u679c\u6ca1\u6709\u5219\u8fd4\u56deNone\u4ee5\u53caFalse\u3002self.state\u53ef\u4ee5\u5728__init__\u4e2d\u521d\u59cb\u5316\uff0c\u793a\u4f8b\uff1a</p> <pre><code>    def __init__(self, miner_id, consensus_param):\n        super().__init__(miner_id)\n        self.state = INITIAL_STATE\n        ...\n</code></pre> <p>MyConsensus.local_state_update\u9700\u8981\u6839\u636e_receive_tape\u4e2d\u7f13\u5b58\u7684Message\u5bf9\u8c61\u66f4\u65b0\u5171\u8bc6\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u6700\u5178\u578b\u7684\u5c31\u662f\u6839\u636e\u4f20\u5165\u7684\u533a\u5757\u66f4\u65b0\u672c\u5730\u94fe\uff0c\u5176\u903b\u8f91\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\uff1a</p> <pre><code>    def local_state_update(self):\n        for incoming_block in self._receive_tape:\n            if isinstance(incoming_block, Consensus.Block):# \u5904\u7406Block\n                if not self.valid_block(incoming_block):\n                    continue\n                prehash = incoming_block.blockhead.prehash\n                if insert_point := self.local_chain.search_block_by_hash(prehash):\n                    conj_block = self.local_chain.add_blocks(blocks=[incoming_block], insert_point=insert_point)\n                    fork_tip, _ = self.synthesize_fork(conj_block)\n                    depthself = self.local_chain.get_height()\n                    depth_incoming_block = fork_tip.get_height()\n                    if depthself &lt; depth_incoming_block:\n                        self.local_chain.set_last_block(fork_tip)\n                        new_update = True\n                        self.state = NEXT_STATE # \u63a5\u6536\u5230\u65b0\u533a\u5757\u65f6\u7684\u72b6\u6001\u8f6c\u79fb\n                else:\n                    self._block_buffer.setdefault(prehash, [])\n                    self._block_buffer[prehash].append(incoming_block)\n\n            elif isinstance(message, ExtraMessage): # \u5904\u7406ExtraMessage\n                DEAL_WITH_OTHER_INCOMING_MESSAGES\n                self.state = NEXT_STATE # \u63a5\u6536\u5230\u5176\u4ed6\u6d88\u606f\u65f6\u7684\u72b6\u6001\u8f6c\u79fb\n            elif ...:\n                ...\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u6839\u636e_receive_tape\u4e2d\u6d88\u606f\u7684\u7c7b\u578b\u5206\u522b\u5904\u7406\uff0c\u5982\u679c\u4f20\u5165\u7684\u662f\u533a\u5757\u5c31\u5c1d\u8bd5\u9a8c\u8bc1\u5e76\u5c06\u5176\u5408\u5e76\u5230\u672c\u5730\u94fe\u4e2d\u3002\u4e00\u822clocal_state_update\u9700\u8981\u8c03\u7528valid_chain\u65b9\u6cd5\u9a8c\u8bc1\u4f20\u5165\u533a\u5757\u6240\u5728\u7684\u94fe\uff0c\u56e0\u6b64\u9700\u8981\u5728MyConsensus\u4e2d\u5b9e\u73b0valid_chain\u4e0evalid_block\u65b9\u6cd5\u3002\u4e00\u822cvalid_chain\u65b9\u6cd5\u4f1a\u6838\u5bf9\u94fe\u4e0a\u533a\u5757\u7684prehash\uff0c\u786e\u8ba4\u94fe\u4e0a\u533a\u5757\u80fd\u5426\u80fd\u6b63\u786e\u6784\u6210\u54c8\u5e0c\u94fe\uff0c\u5e76\u8c03\u7528valid_block\u9a8c\u8bc1\u6bcf\u4e2a\u533a\u5757\u7684\u5408\u6cd5\u6027\u3002valid_chain\u7684\u5199\u6cd5\u53ef\u4ee5\u53c2\u8003PoW.valid_chain\u3002</p> <p>\u6700\u540e\uff0c\u5982\u679c\u9700\u8981\u4f7f\u5171\u8bc6\u7c7bMyConsensus\u53ef\u914d\u7f6e\uff0c\u8fd8\u9700\u8981\u4fee\u6539__init__\u65b9\u6cd5\u5e76\u5728system_config.ini\u4e2d\u589e\u52a0\u914d\u7f6e\u9879\u3002__init__\u53ef\u53c2\u8003\u4ee5\u4e0b\u8303\u4f8b\uff1a</p> <pre><code>    def __init__(self, miner_id, consensus_param):\n        super().__init__(miner_id)\n        self.state = INITIAL_STATE # \u72b6\u6001\u521d\u59cb\u5316\n        self.a = consensus_param['param_a']\n        self.b = int(consensus_param['param_b']) # \u7c7b\u578b\u8f6c\u6362\n</code></pre> <p>__init__\u4fee\u6539\u540e\uff0c\u5c31\u53ef\u4ee5\u5728system_config.ini\u4e2d\u7684ConsensusSettings\u90e8\u5206\u589e\u52a0\u914d\u7f6e\u9879param_a\u4e0eparam_b\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8econsensus.PoW\u4ee5\u5916\u7684\u5171\u8bc6\u7c7b\uff0c\u6240\u6709ConsensusSettings\u4e0b\u7684\u914d\u7f6e\u9879\u4f1a\u4ee5\u5b57\u5178\u5f62\u5f0f\u901a\u8fc7consensus_param\u539f\u6837\u4f20\u9012\u7ed9MyConsensus\u3002\u5982\u679c\u5728system_config.ini\u4e2d\u914d\u7f6e\u5982\u4e0b\uff1a</p> <pre><code>[ConsensusSettings]\nparam_a=value_a\nparam_b=100\n</code></pre> <p>\u90a3\u4e48\u4f20\u9012\u7ed9MyConsensus.__init__\u7684consensus_param\u4e3a<code>{'param_a':'value_a','param_b':'100'}</code>\u3002</p> <p>\u76ee\u524dChainXim\u5728\u521d\u59cb\u5316\u65f6\u6839\u636econsensus_type\u914d\u7f6e\u9879\u7684\u503c\u52a8\u6001\u5bfc\u5165\u5171\u8bc6\u7c7b\uff0c\u5982\u679c\u9700\u8981\u5728\u4eff\u771f\u4e2d\u4f7f\u7528MyConsensus\u7c7b\uff0c\u9700\u8981\u5728system_config.ini\u4e2d\u914d\u7f6e\u5982\u4e0b\uff1a <pre><code>consensus_type=consensus.MyConsensus\n</code></pre> \u5e76\u5728consensus/__init__.py\u4e2d\u6dfb\u52a0\u4e00\u884c\uff08\u5047\u8bbeMyConsensus\u7c7b\u5b9a\u4e49\u4e8econsensus/myconsensus.py\uff09\uff1a <pre><code>from .myconsensus import MyConsensus\n</code></pre></p>"},{"location":"developer-guide/#\u7f51\u7edc\u63a5\u53e3-Network-Interface","title":"\u7f51\u7edc\u63a5\u53e3 Network Interface","text":"<p>\u5728\u4ecb\u7ecd\u7f51\u7edc\u6a21\u5757\u4e4b\u524d\uff0c\u9996\u5148\u4ecb\u7ecd\u7f51\u7edc\u63a5\u53e3\uff0c\u5b9a\u4e49\u4e8e<code>./miner/network_interface</code>\uff0c\u7528\u4e8e\u6a21\u62df\u7f51\u5361\uff08NIC\uff09\u7684\u884c\u4e3a\uff0c\u4f5c\u4e3a\u77ff\u5de5\u548c\u7f51\u7edc\u4e4b\u95f4\u4ea4\u4e92\u7684\u901a\u9053\u3002\u5728\u77ff\u5de5\u521d\u59cb\u5316\u65f6\u5e76\u52a0\u5165\u7f51\u7edc\u65f6\uff0c\u4f1a\u6839\u636e\u7f51\u7edc\u7c7b\u578b\u5728\u77ff\u5de5\u4e2d\u521d\u59cb\u5316\u4e00\u4e2aNIC\u5b9e\u4f8b\u3002</p> <p><pre><code>def join_network(self, network):\n    \"\"\"\u521d\u59cb\u5316\u7f51\u7edc\u63a5\u53e3\"\"\"\n    if (isinstance(network, TopologyNetwork) or \n        isinstance(network, AdHocNetwork)):\n        self.NIC = NICWithTp(self)\n    else:\n        self.NIC = NICWithoutTp(self)\n    if isinstance(network, AdHocNetwork):\n        self.NIC.withSegments = True\n    self.NIC.nic_join_network(network)\n</code></pre> \u77ff\u5de5\u5c06\u5171\u8bc6\u8fc7\u7a0b\u4ea7\u751f\u7684\u6d88\u606f\uff08\u76ee\u524d\u4ec5\u6709\u533a\u5757\uff09\u901a\u8fc7\u8be5NIC\u5b9e\u4f8b\u53d1\u9001\u5230\u7f51\u7edc\u4e2d\uff1b\u800c\u7f51\u7edc\u4e5f\u901a\u8fc7\u8be5NIC\u5b9e\u4f8b\uff0c\u5c06\u6b63\u5728\u4f20\u64ad\u7684\u533a\u5757\u53d1\u9001\u7ed9\u76ee\u6807\u77ff\u5de5\u3002 \u6839\u636e\u7f51\u7edc\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u53ef\u4ee5\u5c06\u7f51\u7edc\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e0d\u5e26\u62d3\u6251\u4fe1\u606f\u7684\u62bd\u8c61\u7f51\u7edc\uff08SynchronousNetwork\u3001StochPropNetwork\u3001DeterPropNetwork\uff09\u548c\u5e26\u62d3\u6251\u4fe1\u606f\u7684\u62df\u771f\u7f51\u7edc\uff08TopologyNetwork\u3001AdHocNetwork\uff09\u3002\u5bf9\u5e94\u5c06Network Interface\u5206\u4e3a\u4e24\u7c7b\uff1a<code>NICWithoutTp</code>\u548c<code>NICWithTp</code>\u3002\u8fd9\u4e24\u7c7b\u7f51\u7edc\u63a5\u53e3\u90fd\u7ee7\u627f\u81ea\u62bd\u8c61\u57fa\u7c7b<code>NetworkInterface</code>\u3002\u5728\u5177\u4f53\u4ecb\u7ecd\u7f51\u7edc\u63a5\u53e3\u524d\uff0c\u5148\u4ecb\u7ecd\u4e00\u4e9b<code>./miner/_consts.py</code>\u4e2d\u9884\u5148\u5b9a\u4e49\u7684\u4e00\u4e9b\u5e38\u91cf\u3002</p>"},{"location":"developer-guide/#\u7f51\u7edc\u63a5\u53e3\u76f8\u5173\u5e38\u91cf-_constspy","title":"\u7f51\u7edc\u63a5\u53e3\u76f8\u5173\u5e38\u91cf _consts.py","text":"<p>\u7f51\u7edc\u63a5\u53e3\u5728\u5b9e\u73b0\u65f6\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u5e38\u91cf\uff0c\u8fd9\u4e9b\u5e38\u91cf\u9884\u5b9a\u4e49\u5728\u6587\u4ef6<code>./miner/_consts.py</code>\u4e2d\uff0c\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a</p>"},{"location":"developer-guide/#1-\u8f6c\u53d1\u7b56\u7565","title":"1. \u8f6c\u53d1\u7b56\u7565","text":"<p>TopologyNetwork\u3001AdHocNetwork\u4e2d\uff0c\u77ff\u5de5\u9700\u8981\u5bf9\u4ea7\u751f\u7684\u6d88\u606f\u6307\u5b9a\u8f6c\u53d1\u7b56\u7565\u3002\u76ee\u524d\u5b9a\u4e49\u4e86\u4e09\u79cd\uff1a</p> \u5e38\u91cf \u5177\u4f53\u503c \u89e3\u91ca FLOODING \"flooding\" \u6cdb\u6d2a\u8f6c\u53d1\uff0c\u5373\u5411\u6240\u6709\u90bb\u5c45\u8282\u70b9\u8f6c\u53d1 SELFISH \"selfish\" \u81ea\u79c1\u8f6c\u53d1\uff0c\u5373\u4e0d\u8fdb\u884c\u8f6c\u53d1\u64cd\u4f5c SPEC_TARGETS \"spec_tagets\" \u6307\u5b9a\u8f6c\u53d1\u76ee\u6807"},{"location":"developer-guide/#2-\u5f85\u8f6c\u53d1\u6d88\u606f\u6765\u6e90","title":"2. \u5f85\u8f6c\u53d1\u6d88\u606f\u6765\u6e90","text":"<p>\u6d88\u606f\u7684\u6765\u6e90\u5373\u8be5\u6d88\u606f\u662f\u81ea\u5df1\u4ea7\u751f\u7684\u8fd8\u662f\u4ece\u5916\u90e8\u7f51\u7edc\u4e2d\u63a5\u6536\u5230\u7684\u3002\u8be5\u5e38\u91cf\u7684\u8bbe\u7f6e\u4e3b\u8981\u662f\u56e0\u4e3a\u5728\u4e0d\u540c\u7f51\u7edc\u4e2d\u5bf9\u4e0d\u540c\u6765\u6e90\u7684\u6d88\u606f\u6709\u4e0d\u540c\u7684\u5904\u7406\uff1a\u65e0\u62d3\u6251\u7684\u62bd\u8c61\u7f51\u7edc\uff08SynchronousNetwork\u3001StochPropNetwork\u3001DeterPropNetwork\uff09\u4e2d\u4ec5\u4f1a\u8f6c\u53d1\u81ea\u5df1\u4ea7\u751f\u7684\u6d88\u606f\uff1b\u800c\u5e26\u62d3\u6251\u7684\u62df\u771f\u7f51\u7edc\uff08TopologyNetwork\u3001AdHocNetwork\uff09\u4e24\u79cd\u6765\u6e90\u7684\u6d88\u606f\u90fd\u4f1a\u8f6c\u53d1\u3002</p> \u5e38\u91cf \u5177\u4f53\u503c \u89e3\u91ca SELF \"self_generated_msg\" \u8be5\u6d88\u606f\u662f\u81ea\u5df1\u4ea7\u751f\u7684 OUTER \"msg_from_outer\" \u8be5\u6d88\u606f\u662f\u4ece\u5916\u90e8\u7f51\u7edc\u4e2d\u63a5\u6536\u5230\u7684"},{"location":"developer-guide/#3-\u4fe1\u9053\u72b6\u6001","title":"3. \u4fe1\u9053\u72b6\u6001","text":"<p>\u5728TopologyNetwork\u3001AdHocNetwork\u4e2d\u7528\u4e8e\u6807\u8bb0\u4fe1\u9053\u72b6\u6001\u3002</p> \u5e38\u91cf \u5177\u4f53\u503c \u89e3\u91ca _IDLE \"idle\" \u4fe1\u9053\u7a7a\u95f2 _BUSY \"busy\" \u4fe1\u9053\u4e2d\u6709\u6d88\u606f\u6b63\u5728\u4f20\u9012"},{"location":"developer-guide/#\u7f51\u7edc\u63a5\u53e3\u62bd\u8c61\u57fa\u7c7b-NetworkInterface","title":"\u7f51\u7edc\u63a5\u53e3\u62bd\u8c61\u57fa\u7c7b NetworkInterface","text":"<p>\u7f51\u7edc\u63a5\u53e3\u62bd\u8c61\u57fa\u7c7b\uff0c\u5b9a\u4e49\u4e86\u5e94\u5f53\u5b9e\u73b0\u7684\u62bd\u8c61\u63a5\u53e3\u3002\u4f4d\u4e8e<code>.\\network\\nic_abc.py</code>\u4e2d\u3002\u9996\u5148\u5b9a\u4e49\u4e86\u6240\u6709\u7f51\u7edc\u63a5\u53e3\u5171\u540c\u62e5\u6709\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4ee5\u53ca\u5404\u7f51\u7edc\u63a5\u53e3\u9700\u8981\u5b9e\u73b0\u7684\u62bd\u8c61\u65b9\u6cd5\u3002</p> \u6210\u5458\u53d8\u91cf \u7c7b\u578b \u89e3\u91ca miner Miner \u6301\u6709\u8be5\u7f51\u7edc\u63a5\u53e3\u7684\u77ff\u5de5 miner_id int \u6301\u6709\u8be5\u7f51\u7edc\u63a5\u53e3\u7684\u77ff\u5de5ID _network Network \u73af\u5883\u4e2d\u7684\u7f51\u7edc\u5b9e\u4f8b _receive_buffer list[Packet] \u7f13\u5b58\u672c\u8f6e\u4e2d\u4ece\u7f51\u7edc\u4e2d\u63a5\u6536\u5230\u7684\u6570\u636e\u5305 _forward_buffer dict[str, list[Block]] \u7f13\u5b58\u5c06\u8981\u53d1\u9001\u5230\u7f51\u7edc\u4e2d\u7684\u6d88\u606f\u961f\u5217\uff08\u76ee\u524d\u4ec5\u6709Block\uff09\uff1bkey\u8868\u793a\u8be5\u6d88\u606f\u7684\u6765\u6e90\uff0cOUTER\u548cSELF \u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570 \u89e3\u91ca append_forward_buffer msg:Message, type:str, strategy: str, spec_target:list \u5c06\u8981\u8f6c\u53d1\u7684\u6d88\u606fmsg\u6dfb\u52a0\u5230_forward_buffer\u4e2d\uff0c\u5e76\u6307\u5b9a\u6d88\u606f\u7c7b\u578b type\uff08OUTER/SELF\uff09\uff0c\u8f6c\u53d1\u7b56\u7565strategy\uff08\u9ed8\u8ba4FLOODING\uff09\uff0c\u6307\u5b9a\u76ee\u6807spec_target\u4ec5\u5728SPEC_TARGETS\u7b56\u7565\u6709\u6548\u3002 nic_join_network network:Network \u62bd\u8c61\u65b9\u6cd5\u3002\u5728\u77ff\u5de5\u521d\u59cb\u5316\u5e76\u52a0\u5165\u7f51\u7edc\u65f6\uff0c\u521d\u59cb\u5316\u7f51\u7edc\u63a5\u53e3 nic_receive packet: Packet \u62bd\u8c61\u65b9\u6cd5\u3002\u63a5\u6536\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u5305\uff0c\u5e76\u4f20\u9012\u7ed9\u77ff\u5de5\u3002 nic_forward list[Packet] \u62bd\u8c61\u65b9\u6cd5\u3002\u5c06_forward_buffer\u4e2d\u7684\u6d88\u606f\u6309\u7167\u89c4\u5219\u53d1\u9001\u5230\u7f51\u7edc\u4e2d\u3002 <p>\u4ee5\u4e0b\u65b9\u6cd5\u53ea\u6709TopologyNetwork\u3001AdHocNetwork\u4e24\u4e2a\u7f51\u7edc\u9700\u8981\u5b9e\u73b0\uff1a</p> \u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570 \u89e3\u91ca remove_neighbor remove_id:int \u62bd\u8c61\u65b9\u6cd5\u3002\u79fb\u9664\u6307\u5b9a\u7684\u90bb\u5c45\u3002 add_neighbor add_id:int \u62bd\u8c61\u65b9\u6cd5\u3002\u6dfb\u52a0\u6307\u5b9a\u7684\u90bb\u5c45\u3002 getdata inv:INVMsg \u62bd\u8c61\u65b9\u6cd5\u3002\u56de\u5e94inv\u6d88\u606f\uff0c\u7d22\u8981\u7f3a\u5931\u7684\u533a\u5757\u3002 get_reply msg_name, target:int, err:str, round \u62bd\u8c61\u65b9\u6cd5\u3002\u6d88\u606f\u6210\u529f\u53d1\u9001\u5230\u76ee\u6807\u77ff\u5de5\uff0c\u6216\u53d1\u9001\u5931\u8d25\u65f6\uff0c\u539f\u77ff\u5de5\u83b7\u5f97\u6d88\u606f\u53d1\u9001\u7ed3\u679c\u3002"},{"location":"developer-guide/#NICWithoutTp","title":"NICWithoutTp","text":"<p>\u77ff\u5de5\u548c\u7f51\u7edc\u4e4b\u95f4\u901a\u8fc7\u7f51\u7edc\u63a5\u53e3\u8fdb\u884c\u4ea4\u4e92\u7684\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b\uff1a 1. \u77ff\u5de5\u5728\u6709\u6d88\u606f\u9700\u8981\u4f20\u64ad\u65f6\uff08\u901a\u8fc7\u81ea\u8eab\u5171\u8bc6\u4ea7\u751f\u6216\u4ece\u5916\u90e8\u7f51\u7edc\u63a5\u6536\uff09\uff0c\u901a\u8fc7forward\u51fd\u6570\u4e2d\u5c06\u5f85\u8f6c\u53d1\u6d88\u606f\u5199\u5165NIC\u7684_forward_buffer\u5bf9\u5e94\u7684\u6d88\u606f\u961f\u5217\u4e2d\uff1b 2. \u5728\u6bcf\u4e00\u8f6e\u7ed3\u675f\u65f6\uff0c\u7f51\u7edc\u5728diffuse\u65f6\u8c03\u7528\u6bcf\u4e2a\u77ff\u5de5NIC\u4e2d\u7684nic_forward\u51fd\u6570\uff0c\u5c06_forward_buffer\u4e2d\u7684\u6d88\u606f\u63a5\u5165\u7f51\u7edc\uff0c\u5e76\u6309\u7167\u7f51\u7edc\u89c4\u5219\u8fdb\u884c\u4f20\u64ad\uff1b 3. \u7f51\u7edc\u5c06\u6d88\u606f\u4f20\u9012\u7ed9\u76ee\u6807\u77ff\u5de5\u65f6\uff0c\u4f1a\u8c03\u7528\u76ee\u6807\u77ff\u5de5NIC\u7684nic_receive\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8d1f\u8d23\u901a\u8fc7\u77ff\u5de5receive\u63a5\u53e3\u5c06\u6d88\u606f\u4f20\u9012\u7ed9\u77ff\u5de5\uff0c\u4f9b\u5171\u8bc6\u5c42\u5904\u7406\u3002</p> <p>\u5bf9\u4e8e\u4e0d\u5305\u542b\u62d3\u6251\u4fe1\u606f\u7684\u7f51\u7edc\u63a5\u53e3NICWithoutTp\uff0c\u5728\u4e0a\u8ff0\u8fc7\u7a0b2\u4e2d\uff0c\u4ec5\u8f6c\u53d1\u5904\u7406_forward_buffer\u4e2d\u7531\u81ea\u8eab\u4ea7\u751f\u7684\u6d88\u606f\uff0c\u5373SELF\u6d88\u606f\u961f\u5217\u4e2d\u7684\u5185\u5bb9\u3002\u4e3b\u8981\u7684\u6210\u5458\u65b9\u6cd5\u5982\u4e0b\uff1a</p> \u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570 \u89e3\u91ca nic_receive packet: Packet \u63a5\u6536\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u5305\uff0c\u5e76\u4f20\u9012\u7ed9\u77ff\u5de5\u3002 nic_forward list[Packet] _forward_buffer\u4e2dSELF\u6d88\u606f\u961f\u5217\u7684\u5185\u5bb9\u901a\u8fc7access_netork\u53d1\u9001\u5230\u7f51\u7edc\u4e2d\u3002"},{"location":"developer-guide/#NICWithTp","title":"NICWithTp","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570 \u89e3\u91ca nic_receive packet: Packet \u63a5\u6536\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u5305\uff0c\u5e76\u4f20\u9012\u7ed9\u77ff\u5de5\u3002 nic_forward list[Packet] _forward_buffer\u4e2d\u7684\u6d88\u606f\u6309\u7167\u89c4\u5219\u53d1\u9001\u5230\u7f51\u7edc\u4e2d\uff0c\u5177\u4f53\u8fc7\u7a0b\u5728\u540e\u6587\u4ecb\u7ecd\u3002 remove_neighbor remove_id:int \u79fb\u9664\u6307\u5b9a\u7684\u90bb\u5c45\u3002 add_neighbor add_id:int \u6dfb\u52a0\u6307\u5b9a\u7684\u90bb\u5c45\u3002 getdata inv:INVMsg \u56de\u5e94inv\u6d88\u606f\uff0c\u7d22\u8981\u7f3a\u5931\u7684\u533a\u5757\u3002 get_reply msg_name, target:int, err:str, round \u6d88\u606f\u6210\u529f\u53d1\u9001\u5230\u76ee\u6807\u77ff\u5de5\uff0c\u6216\u53d1\u9001\u5931\u8d25\u65f6\uff0c\u539f\u77ff\u5de5\u83b7\u5f97\u6d88\u606f\u53d1\u9001\u7ed3\u679c\u3002"},{"location":"developer-guide/#\u7f51\u7edc-Network","title":"\u7f51\u7edc Network","text":"<p>\u7f51\u7edc\u5c42\u7684\u4e3b\u8981\u529f\u80fd\u662f\u63a5\u6536\u73af\u5883\u4e2d\u4ea7\u751f\u7684\u65b0\u533a\u5757\uff0c\u5e76\u901a\u8fc7\u4e00\u5b9a\u7684\u4f20\u64ad\u89c4\u5219\u4f20\u8f93\u7ed9\u5176\u4ed6\u77ff\u5de5\uff0c\u4f5c\u4e3a\u77ff\u5de5\u4e4b\u95f4\u8fde\u63a5\u7684\u901a\u9053\u3002\u7f51\u7edc\u5c42\u7531\u62bd\u8c61\u57fa\u7c7bNetwork\u6d3e\u751f\u51fa\u4e0d\u540c\u7c7b\u578b\u7684\u7f51\u7edc\u3002\u76ee\u524d\u5b9e\u73b0\u4e86\u62bd\u8c61\u6982\u5ff5\u7684\u540c\u6b65\u7f51\u7edc\uff08SynchronousNetwork\uff09\u3001\u968f\u673a\u6027\u4f20\u64ad\u7f51\u7edc\uff08StochPropNetwork\uff09\uff0c\u786e\u5b9a\u6027\u4f20\u64ad\u7f51\u7edc\uff08DeterPropNetwork\uff09\u548c\u76f8\u5bf9\u771f\u5b9e\u7684\u62d3\u6251P2P\u7f51\u7edc\uff08TopologyNetwork\uff09\u3002</p>"},{"location":"developer-guide/#\u62bd\u8c61\u57fa\u7c7b-Network","title":"\u62bd\u8c61\u57fa\u7c7b Network","text":"<p>Network\u57fa\u7c7b\u89c4\u5b9a\u4e86\u4e09\u4e2a\u63a5\u53e3\uff0c\u5916\u90e8\u6a21\u5757\u53ea\u80fd\u901a\u8fc7\u8fd9\u4e09\u4e2a\u63a5\u53e3\u4e0e\u7f51\u7edc\u6a21\u5757\u4ea4\u4e92\uff1b\u540c\u65f6\u4e5f\u89c4\u5b9a\u4e86\u8f93\u5165\u53c2\u6570\uff0c\u6d3e\u751f\u7c7b\u4e0d\u53ef\u4ee5\u66f4\u6539</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u8bbe\u7f6e\u7f51\u7edc\u53c2\u6570\u3002\u5728\u73af\u5883\u7c7b\u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\u7f51\u7edc\u53c2\u6570\u3002main\u7531\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u7f51\u7edc\u53c2\u6570\u4fe1\u606f\u5230\u73af\u5883\u3002 access_network new_msg:list[Message], minerid:int,round:int \u63a5\u6536\u6240\u6709\u65b0\u4ea7\u751f\u7684\u6d88\u606f\u5bf9\u8c61\u8fdb\u5165\u7f51\u7edc\uff0c\u7b49\u5f85\u4f20\u64ad\u3002\u540c\u65f6\u5c06\u5404\u6d88\u606f\u5bf9\u8c61\u548c\u4f20\u64ad\u76f8\u5173\u4fe1\u606f\u5c01\u88c5\u6210 Packet\u3002 diffuse round:int \u6700\u4e3b\u8981\u7684\u51fd\u6570\u3002\u5728exec\u6bcf\u8f6e\u7ed3\u675f\u65f6\u8c03\u7528\uff0c\u5177\u4f53\u5b9e\u73b0\u7f51\u7edc\u7684\u4f20\u64ad\u89c4\u5219 <p>\u5728\u4ecb\u7ecd\u5177\u4f53\u76844\u79cd\u7f51\u7edc\u524d\uff0c\u5148\u4ecb\u7ecd\u6d88\u606f\u6570\u636e\u5305Packet\u3002</p>"},{"location":"developer-guide/#\u6d88\u606f\u6570\u636e\u5305-Packet","title":"\u6d88\u606f\u6570\u636e\u5305 Packet","text":"<p>\u6d88\u606f\u5bf9\u8c61\u901a\u8fc7access_network\u8fdb\u5165\u7f51\u7edc\u540e\u88ab\u5c01\u88c5\u4e3aPacket\uff0c\u9664\u4e86\u8fdb\u5165\u7f51\u7edc\u7684\u6d88\u606f\u5bf9\u8c61\u5916\u8fd8\u5305\u542b\u4f20\u64ad\u76f8\u5173\u4fe1\u606f\u3002 \u7f51\u7edc\u4e2d\u6d88\u606f\u5bf9\u8c61\u4ee5Packet\u7684\u5f62\u5f0f\u4f20\u64ad\uff0c\u5f85\u4f20\u64ad\u7684Packet\u5b58\u50a8\u5728\u7f51\u7edc\u7684network_tape\u5c5e\u6027\u4e2d\u3002 Packet\u5728\u4e0d\u540c\u7684\u7f51\u7edc\u7c7b\u4e2d\u6709\u4e0d\u540c\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u5982\uff1a - SynchronousNetwork\u4e2d\uff0c\u4ec5\u5305\u542b\u6d88\u606f\u5bf9\u8c61\u548c\u4ea7\u751f\u8be5\u6d88\u606f\u7684\u77ff\u5de5id\uff1b - StochPropNetwork\u4e2d\uff0c\u8fd8\u5305\u542b\u5bf9\u5e94\u7684\u5f53\u524d\u63a5\u6536\u6982\u7387\uff1b - DeterPropNetwork\u4e2d\uff0c\u8bb0\u5f55\u4e86\u4f20\u64ad\u5411\u91cf\uff1b - TopologyNetwork\u4e2d\uff0c\u8bb0\u5f55\u4e86\u6d88\u606f\u7684\u6765\u6e90\u3001\u76ee\u6807\u7b49\u3002</p> <p>\u4ee5TopologyNetwork\u4e2d\u7684PacketPVNet\u4e3a\u4f8b\uff1a</p> <pre><code># network/propvec.py\nclass PacketPVNet(Packet):\n    '''propagation vector\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u5305\uff0c\u5305\u542b\u8def\u7531\u76f8\u5173\u4fe1\u606f'''\n    def __init__(self, payload: Message, source_id: int, round: int, prop_vector:list, outnetobj):\n        super().__init__(source_id, payload)\n        self.payload = payload\n        self.source = source_id\n        self.round = round\n        self.outnetobj = outnetobj  # \u5916\u90e8\u7f51\u7edc\u7c7b\u5b9e\u4f8b\n        # \u4f20\u64ad\u8fc7\u7a0b\u76f8\u5173\n        self.received_miners:list[int] = [source_id]\n        self.trans_process_dict = {\n            f'miner {source_id}': round\n        }\n        # \u6bcf\u8f6e\u90fdpop\u7b2c\u4e00\u4e2a\uff0c\u8bb0\u5f55\u5269\u4f59\u7684\u4f20\u64ad\u5411\u91cf\n        self.remain_prop_vector = copy.deepcopy(prop_vector)\n</code></pre> <p>\u63a5\u4e0b\u6765\u4ecb\u7ecd\u5404\u79cd\u7f51\u7edc\u5982\u4f55\u5b9e\u73b0\u4e09\u79cd\u63a5\u53e3\u3002</p>"},{"location":"developer-guide/#\u540c\u6b65\u7f51\u7edc-SynchronousNetwork","title":"\u540c\u6b65\u7f51\u7edc SynchronousNetwork","text":"<p>\u9664\u4ea7\u751f\u6d88\u606f\u7684\u77ff\u5de5\u5916\uff0c\u6240\u6709\u77ff\u5de5\u90fd\u5728\u4e0b\u4e00\u8f6e\u6b21\u5f00\u59cb\u65f6\u63a5\u6536\u5230\u65b0\u4ea7\u751f\u7684\u6d88\u606f</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u540c\u6b65\u7f51\u7edc\u65e0\u9700\u53c2\u6570 access_network new_msg:list[Message], minerid:int,round:int \u5c06\u6d88\u606f\u5bf9\u8c61\u3001\u77ff\u5de5id\u3001\u5f53\u524d\u8f6e\u6b21\u5c01\u88c5\u6210PacketSyncNet\uff0c\u52a0\u5165network_tape\u3002 diffuse - \u5728\u4e0b\u4e00\u8f6e\u6b21\u5f00\u59cb\u65f6\uff0c\u6240\u6709\u77ff\u5de5\u90fd\u6536\u5230network_tape\u4e2d\u7684\u6570\u636e\u5305"},{"location":"developer-guide/#\u968f\u673a\u6027\u4f20\u64ad\u7f51\u7edcStochPropNetwork","title":"\u968f\u673a\u6027\u4f20\u64ad\u7f51\u7edcStochPropNetwork","text":"<p>\u65b0\u6d88\u606f\u5728\u8fdb\u5165\u7f51\u7edc\u540e\uff0c\u6bcf\u8f6e\u6b21\u4ee5\u4e0d\u65ad\u589e\u52a0\u7684\u6982\u7387\u88ab\u5404\u77ff\u5de5\u63a5\u6536\uff08\u65f6\u5ef6\uff09\uff0c\u4e14\u81f3\u591a\u5728\u63a5\u6536\u6982\u7387\u8fbe\u52301\u540e\u88ab\u6240\u6709\u77ff\u5de5\u63a5\u6536\uff08\u6709\u754c\uff09\u3002</p> <p>\u7f51\u7edc\u53c2\u6570\uff1a</p> \u5c5e\u6027 \u8bf4\u660e rcvprob_start\uff08float\uff09 \u521d\u59cb\u63a5\u6536\u6982\u7387\u3002\u5373\u8be5\u6d88\u606f\u8fdb\u5165\u7f51\u7edc\u65f6\uff0c\u5728\u4e0b\u4e00\u8f6e\u88ab\u67d0\u4e2a\u77ff\u5de5\u63a5\u6536\u7684\u6982\u7387 rcvprob_inc\uff08float\uff09 \u6d88\u606f\u8fdb\u5165\u7f51\u7edc\u540e\uff0c\u6bcf\u8f6e\u589e\u52a0\u7684\u63a5\u6536\u6982\u7387 <p>\u4f8b\u5982\uff0crcvprob_start=rcvprob_inc=0.2\u7684\u60c5\u51b5\u4e0b\uff0c\u65b0\u6d88\u606f\u5728\u8fdb\u5165\u7f51\u7edc\u540e\uff0c\u6240\u6709\u5176\u4ed6\u77ff\u5de5\u5fc5\u5b9a\u57285\u8f6e\u5185\u63a5\u6536\u5230\u6d88\u606f\u3002</p> <p>\u63a5\u53e3\u51fd\u6570\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u8bbe\u7f6ercvprob_start\uff0crcvprob_inc access_network new_msg:list[Message], minerid:int,round:int \u6d88\u606f\u5bf9\u8c61\u3001\u77ff\u5de5id\u3001\u5f53\u524d\u8f6e\u6b21\u5c01\u88c5\u6210PacketBDNet\u52a0\u5165network_tape\u3002\u5e76\u521d\u59cb\u5316\u8be5\u6570\u636e\u5305\u7684\u63a5\u6536\u6982\u7387\uff0c\u540c\u65f6\u8bb0\u5f55\u4f20\u64ad\u8fc7\u7a0b diffuse round:int network tape\u4e2d\u7684\u5404\u4e2aPacket\u4ee5\u4e0d\u65ad\u589e\u52a0\u6982\u7387\u88ab\u5404\u77ff\u5de5\u63a5\u6536\uff0c\u5f53\u524d\u63a5\u6536\u6982\u7387\u66f4\u65b0\u5230PacketBDNet\u3002\u5728\u88ab\u6240\u6709\u77ff\u5de5\u90fd\u63a5\u6536\u5230\u65f6\uff0c\u5c06\u5176\u5728network_tape\u4e2d\u5220\u9664\uff0c\u5e76\u628a\u4f20\u64ad\u8fc7\u7a0b\u4fdd\u5b58\u5728network log.txt\u4e2d\u3002\u6ce8\uff1a\u5f53\u53d1\u9001\u7ed9\u653b\u51fb\u8005\u65f6\uff0c\u5176\u4ed6\u653b\u51fb\u8005\u4e5f\u7acb\u5373\u6536\u5230 <p>\u91cd\u8981\u51fd\u6570</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e record_block_propagation_time - \u8bb0\u5f55\u6d88\u606f\u4f20\u64ad\u65f6\u95f4 save_trans_process - \u4fdd\u5b58\u4f20\u64ad\u8fc7\u7a0b"},{"location":"developer-guide/#\u786e\u5b9a\u6027\u4f20\u64ad\u7f51\u7edc-DeterPropNetwork","title":"\u786e\u5b9a\u6027\u4f20\u64ad\u7f51\u7edc DeterPropNetwork","text":"<p>\u7ed9\u5b9a\u4f20\u64ad\u5411\u91cf\uff0c\u7f51\u7edc\u4f9d\u7167\u4f20\u64ad\u5411\u91cf\uff0c\u6bcf\u8f6e\u6b21\u5f00\u59cb\u65f6\u5c06\u6d88\u606f\u5bf9\u8c61\u53d1\u9001\u7ed9\u56fa\u5b9a\u6bd4\u4f8b\u7684\u77ff\u5de5\u3002</p> <p>\u7f51\u7edc\u53c2\u6570\uff1a</p> \u5c5e\u6027 \u8bf4\u660e prop_vector\uff08list\uff09 \u4f20\u64ad\u5411\u91cf\u3002\u4f8b\u5982prop_vector=[0.1, 0.2, 0.4, 0.6, 0.8, 1.0]\u8868\u793a\u4e0b\u4e00\u8f6e\u5f00\u59cb\u524d\u63a5\u6536\u5230\u8be5\u6d88\u606f\u7684\u77ff\u5de5\u6bd4\u4f8b\u4e3a0.1\uff0c\u518d\u4e00\u8f6e\u8fc7\u540e\u6bd4\u4f8b\u4e3a0.2\uff0c\u76f4\u5230\u4e94\u8f6e\u8fc7\u540e\u5168\u90e8\u77ff\u5de5\u90fd\u63a5\u6536\u5230\u8be5\u6d88\u606f\u3002 <p>\u63a5\u53e3\u51fd\u6570\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u8bbe\u7f6eprop_vector access_network new_msg:list[Message], minerid:int,round:int \u6240\u6709\u65b0\u6d88\u606f\u3001\u77ff\u5de5id\u3001\u5f53\u524d\u8f6e\u6b21\u5c01\u88c5\u6210\u6570\u636e\u5305\uff08PacketPVNet\uff09\u52a0\u5165network_tape\u3002\u5e76\u521d\u59cb\u5316\u8be5\u6570\u636e\u5305\u7684\u4f20\u64ad\u5411\u91cf\uff0c\u540c\u65f6\u8bb0\u5f55\u4f20\u64ad\u8fc7\u7a0b diffuse round:int \u4f9d\u7167\u4f20\u64ad\u5411\u91cf,\u5728\u6bcf\u4e00\u8f6e\u4e2d\u5c06\u6570\u636e\u5305\u4f20\u64ad\u7ed9\u56fa\u5b9a\u6bd4\u4f8b\u7684\u77ff\u5de5\u6ce8\uff1a\u5f53\u53d1\u9001\u7ed9\u653b\u51fb\u8005\u65f6\uff0c\u5176\u4ed6\u653b\u51fb\u8005\u4e5f\u7acb\u5373\u6536\u5230\uff0c\u6b64\u65f6\u53ef\u80fd\u51fa\u73b0\u6bd4\u4f8b\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002 <p>\u91cd\u8981\u51fd\u6570</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e record_block_propagation_time - \u8bb0\u5f55\u6d88\u606f\u4f20\u64ad\u65f6\u95f4 save_trans_process - \u4fdd\u5b58\u4f20\u64ad\u8fc7\u7a0b"},{"location":"developer-guide/#\u62d3\u6251P2P\u7f51\u7edc-TopologyNetwork","title":"\u62d3\u6251P2P\u7f51\u7edc TopologyNetwork","text":"<p>\u901a\u8fc7csv\u6587\u4ef6\u6216\u968f\u673a\u65b9\u5f0f\u751f\u6210\u7f51\u7edc\u62d3\u6251\u548c\u5404\u77ff\u5de5\u95f4\u7684\u5e26\u5bbd\u3002\u6d88\u606f\u901a\u8fc7\u77ff\u5de5\u7684\u7f51\u7edc\u63a5\u53e3\u8fdb\u5165\u7f51\u7edc\u540e\uff0c\u5728\u6307\u5b9a\u7684\u6765\u6e90\u548c\u76ee\u6807\u4e4b\u95f4\u5efa\u7acb\u94fe\u8def(Link)\u8fdb\u884c\u4f20\u64ad\uff0c\u6bcf\u6761Link\u7684\u4f20\u8f93\u65f6\u95f4\uff08\u8f6e\u6b21\uff09\u7531\u94fe\u8def\u5e26\u5bbd\u4e0e\u533a\u5757\u5927\u5c0f\u51b3\u5b9a\u3002\u540c\u65f6\u94fe\u8def\u53ef\u80fd\u4ee5\u9884\u8bbe\u7684outage_prob\u6982\u7387\u4e2d\u65ad\uff0c\u6b64\u65f6\u53d1\u9001\u65b9\u4f1a\u91cd\u65b0\u53d1\u9001\u6d88\u606f\u3002</p> <p>\u7f51\u7edc\u53c2\u6570\uff1a</p> \u5c5e\u6027 \u8bf4\u660e init_mode (str) \u7f51\u7edc\u521d\u59cb\u5316\u65b9\u6cd5, 'adj'\u90bb\u63a5\u77e9\u9635, 'coo'\u7a00\u758f\u7684\u90bb\u63a5\u77e9\u9635, 'rand'\u968f\u673a\u751f\u6210\u3002'adj'\u548c'coo'\u7684\u7f51\u7edc\u62d3\u6251\u901a\u8fc7csv\u6587\u4ef6\u7ed9\u5b9a\u3002'rand'\u9700\u8981\u6307\u5b9a\u5e26\u5bbd\u3001\u5ea6\u7b49\u53c2\u6570 outage_prob(float) \u6bcf\u6761\u94fe\u8def\u7684\u4e2d\u65ad\u6982\u7387 dynamic(bool) \u7f51\u7edc\u62d3\u6251\u662f\u5426\u52a8\u6001\u53d8\u5316 avg_tp_change_interval(int) dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u7684\u5e73\u5747\u8f6e\u6b21 edge_remove_prob(float) dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u5df2\u5b58\u5728\u7684\u6bcf\u6761\u8fb9\u79fb\u9664\u7684\u6982\u7387 edge_add_prob(float) dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u672a\u5b58\u5728\u7684\u6761\u8fb9\u65b0\u5efa\u7acb\u8fde\u63a5\u7684\u6982\u7387 max_allowed_partitions(int) dynamic=true\u65f6,\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u6700\u5927\u53ef\u5b58\u5728\u7684\u5206\u533a\u6570\u91cf ave_degree (int) \u7f51\u7edc\u751f\u6210\u65b9\u5f0f\u4e3a'rand'\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u5e73\u5747\u5ea6 bandwidth_adv\uff08float\uff09 \u653b\u51fb\u8005\u4e4b\u95f4\u7684\u5e26\u5bbd\uff0c\u5355\u4f4dMB/round save_routing_graph (bool) \u662f\u5426\u4fdd\u5b58\u5404\u6d88\u606f\u7684\u8def\u7531\u4f20\u64ad\u56fe\u3002\u5efa\u8bae\u7f51\u7edc\u89c4\u6a21\u8f83\u5927\u65f6\u5173\u95ed <p>\u63a5\u53e3\u51fd\u6570\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u8bbe\u7f6e\u5982\u4e0a\u7f51\u7edc\u53c2\u6570 access_network new_msg:list[Message], minerid:int,round:int \u5c06\u65b0\u6d88\u606f\u3001\u77ff\u5de5id\u548c\u5f53\u524d\u8f6e\u6b21\u5c01\u88c5\u6210Packet\uff0c\u52a0\u5165network_tape diffuse round:int diffuse\u5206\u4e3areceive_process\u548cforward_process\u4e24\u90e8\u5206 <ul> <li><code>receive_process</code> \u5c06\u4f20\u64ad\u5b8c\u6210\u7684msg\u53d1\u7ed9\u63a5\u6536\u65b9;</li> </ul> <pre><code>def receive_process(self,round):\n    \"\"\"\u63a5\u6536\u8fc7\u7a0b\"\"\"\n    if len(self._active_links)==0:\n        return\n    dead_links = []\n    for i, link in enumerate(self._active_links):\n        # \u66f4\u65b0\u94fe\u8defdelay\n        if link.delay &gt; 0:\n            link.delay -= 1\n        # \u5224\u65ad\u94fe\u8def\u662f\u5426\u4e2d\u65ad\n        if self.link_outage(round, link):\n            dead_links.append(i)\n            continue\n        if link.delay &gt; 0:\n            continue\n        # \u94fe\u8def\u4f20\u64ad\u5b8c\u6210\uff0ctarget\u63a5\u6536\u6570\u636e\u5305\n        link.target_miner().NIC.nic_receive(link.packet)\n        link.source_miner().NIC.get_reply(\n            link.get_block_msg_name(),link.target_id(), None, round)\n        dead_links.append(i)\n    # \u6e05\u7406\u4f20\u64ad\u7ed3\u675f\u7684link\n    if len(dead_links) == 0:\n        return\n    self._active_links = [link for i, link in enumerate(self._active_links) \n                        if i not in dead_links]\n    dead_links.clear()\n</code></pre> <ul> <li><code>forward_process</code> \u4ece\u77ff\u5de5NIC\u4e2d\u53d6\u5f97\u5c06\u8981\u4f20\u64ad\u7684msg\u8fdb\u5165\u7f51\u7edc\uff1b</li> </ul> <pre><code>def forward_process(self, round):\n    \"\"\"\u8f6c\u53d1\u8fc7\u7a0b\"\"\"\n    for m in self._miners:\n        m.NIC.nic_forward(round)\n</code></pre> <p>\u5176\u4ed6\u91cd\u8981\u51fd\u6570\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e cal_delay msg:Message, sourceid:int, targetid:int \u8ba1\u7b97\u4e24\u77ff\u5de5\u95f4\u7684\u65f6\u5ef6\uff0c\u5305\u62ec\u4f20\u8f93\u65f6\u5ef6\u548c\u5904\u7406\u65f6\u5ef6\u4e24\u90e8\u5206\u3002\u540c\u65f6\u5411\u4e0a\u53d6\u6574\uff0c\u4e14\u6700\u4f4e\u4e3a1\u8f6e\u3002\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a<code>delay=trans_delay+process_delay\uff0c trans_delay=(blocksize*8)/bandwidth</code> generate_network - \u6839\u636e\u7f51\u7edc\u53c2\u6570\u751f\u6210\u7f51\u7edc\u3002 write_routing_to_json - \u6bcf\u5f53\u4e00\u4e2ablock\u4f20\u64ad\u7ed3\u675f,\u5c06\u5176\u8def\u7531\u7ed3\u679c\u8bb0\u5f55\u5728json\u6587\u4ef6\u4e2d\uff0c\u5176\u4e2d\u5305\u542borigin_miner\u548crouting_histroy\u4e24\u4fe1\u606f gen_routing_gragh_from_json - \u8bfb\u53d6routing_histroy.json\u6587\u4ef6,\u5e76\u5c06\u5176\u8f6c\u5316\u4e3arouting_gragh.svg\u56fe\u50cf\uff0c\u4fdd\u5b58\u5728Network Routing\u6587\u4ef6\u5939\u4e2d\u3002 record_block_propagation_time \u8bb0\u5f55\u6d88\u606f\u4f20\u64ad\u65f6\u95f4\u3002"},{"location":"developer-guide/#\u65e0\u7ebf\u81ea\u7ec4\u7ec7\u7f51\u7edc-AdHocNetwork","title":"\u65e0\u7ebf\u81ea\u7ec4\u7ec7\u7f51\u7edc AdHocNetwork","text":"<p>\u5728\u7ed9\u5b9a\u6b63\u65b9\u5f62\u533a\u57df\u4e2d\u968f\u673a\u751f\u6210\u8282\u70b9\u4f4d\u7f6e\uff0c\u8bbe\u7f6e\u8282\u70b9\u95f4\u901a\u4fe1\u8303\u56f4\uff0c\u901a\u4fe1\u8303\u56f4\u5185\u7684\u8282\u70b9\u4f1a\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5\uff0c\u53ef\u4ee5\u4e92\u76f8\u4f20\u9012\u6d88\u606f\u3002\u6bcf\u4e00\u8f6e\u6b21\u8282\u70b9\u8fdb\u884c\u9ad8\u65af\u968f\u673a\u6e38\u8d70\uff0c\u5373\u5728x\u548cy\u5750\u6807\u52a0\u4e0a\u4e00\u4e2a\u96f6\u5747\u503c\u3001\u7ed9\u5b9a\u65b9\u5dee\u7684\u9ad8\u65af\u968f\u673a\u53d8\u91cf\uff0c\u5e76\u6839\u636e\u8282\u70b9\u901a\u4fe1\u8303\u56f4\uff0c\u65ad\u5f00\u65e7\u8fde\u63a5\u6216\u5efa\u7acb\u65b0\u7684\u8fde\u63a5\u3002 \u6bcf\u4e2a\u6d88\u606f\u5728\u4f20\u8f93\u524d\u4f1a\u88ab\u5206\u6bb5(Segment)\uff0c\u6bcf\u4e00\u6bb5\u7684\u4f20\u8f93\u65f6\u95f4\u90fd\u662f\u4e00\u8f6e\uff0c\u63a5\u6536\u65b9NIC\u53ea\u6709\u63a5\u6536\u5230\u5168\u90e8\u5206\u6bb5\u540e\uff0c\u624d\u4f1a\u5c06\u5b8c\u6574\u7684\u6d88\u606f\u4f20\u9012\u7ed9\u5171\u8bc6\u5c42\u3002</p> <p>\u7f51\u7edc\u53c2\u6570\uff1a</p> \u5c5e\u6027 \u8bf4\u660e init_mode (str) \u7f51\u7edc\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u968f\u673a\u751f\u6210 outage_prob(float) \u6bcf\u6761\u94fe\u8def\u7684\u4e2d\u65ad\u6982\u7387 segment_size(float) \u6d88\u606f\u5206\u6bb5\u5927\u5c0f region_width(int) \u6b63\u65b9\u5f62\u533a\u57df\u7684\u5bbd\u5ea6\uff0c\u8282\u70b9\u5728\u8be5\u533a\u57df\u4e2d\u8fdb\u884c\u9ad8\u65af\u968f\u673a\u6e38\u8d70 comm_range(int) \u8282\u70b9\u901a\u4fe1\u8ddd\u79bb\uff0c\u5728\u901a\u4fe1\u8ddd\u79bb\u5185\u7684\u4e24\u8282\u70b9\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 move_variance(float) \u8282\u70b9\u8fdb\u884c\u9ad8\u65af\u968f\u673a\u6e38\u8d70\u65f6\uff0c\u6307\u5b9axy\u5750\u6807\u79fb\u52a8\u8ddd\u79bb\u7684\u65b9\u5dee outage_prob(float) \u94fe\u8def\u4e2d\u65ad\u6982\u7387 <p>\u63a5\u53e3\u51fd\u6570\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u8bbe\u7f6e\u5982\u4e0a\u7f51\u7edc\u53c2\u6570 access_network new_msg:list[Message], minerid:int,round:int \u5c06\u65b0\u6d88\u606f\u3001\u77ff\u5de5id\u548c\u5f53\u524d\u8f6e\u6b21\u5c01\u88c5\u6210Packet\uff0c\u52a0\u5165network_tape diffuse round:int diffuse\u5206\u4e3areceive_process\u548cforward_process"},{"location":"developer-guide/#\u653b\u51fb\u5c42-Attack","title":"\u653b\u51fb\u5c42 Attack","text":"<p>\u653b\u51fb\u8005\u901a\u8fc7\u611f\u77e5\u73af\u5883\uff0c\u5224\u65ad\u5f53\u524d\u5f62\u52bf\u5e76\u4f5c\u51fa\u653b\u51fb\u884c\u4e3a\u5224\u51b3\uff0c\u6267\u884c\u5f53\u524d\u8f83\u4f18\u7684\u653b\u51fb\u51b3\u7b56\u3002\u76ee\u524d\uff0c\u653b\u51fb\u8005\u90e8\u5206\u8fd8\u672a\u5b9e\u73b0\u52a8\u6001\u51b3\u7b56\uff0c\u9700\u8981\u5728\u4eff\u771f\u5668\u8fd0\u884c\u524d\u4fee\u6539system_config.ini\u4e2d\u7684\u53c2\u6570\u4ee5\u8bbe\u7f6e\u4e0d\u540c\u7684\u653b\u51fb\u7b56\u7565\u3002\uff08\u5185\u5bb9\u7b49\u65e5\u8680\u653b\u51fb\u5168\u90e8\u5b8c\u5584\u4e4b\u540e\u518d\u7ee7\u7eed\u66f4\u65b0\uff09</p>"},{"location":"developer-guide/#\u653b\u51fb\u5c42\u4e0e\u6574\u4f53\u7684\u4ea4\u4e92\u903b\u8f91","title":"\u653b\u51fb\u5c42\u4e0e\u6574\u4f53\u7684\u4ea4\u4e92\u903b\u8f91","text":"<p>\u4e0b\u56fe\u4e3a\u67d0\u4e00\u56de\u5408\u653b\u51fb\u6a21\u5757\u7684\u8fd0\u884c\u793a\u4f8b\uff0c\u653b\u51fb\u6a21\u5757\u5b9e\u9645\u8fdb\u884c\u7684\u90e8\u5206\u4e3a\u4e0b\u56fe\u865a\u7ebf\u6846\u5185\u6240\u793a\u3002t\u4e2a\u653b\u51fb\u8005\u6563\u5e03\u5728\u77ff\u5de5\u4e4b\u95f4\uff08\u7f16\u53f7\u53ef\u5728system_config.ini\u4e2d\u6307\u5b9a\uff09\u3002\u6bcf\u4e2a\u8f6e\u6b21\u4e2d\uff0c\u653b\u51fb\u6a21\u5757\u53ea\u4f1a\u88ab\u89e6\u53d1\u4e00\u6b21\uff0c\u6bcf\u6b21\u89e6\u53d1\u90fd\u4f1a\u8fdb\u884c\u4e00\u6b21\u5b8c\u6574\u7684\u653b\u51fb\u884c\u4e3a\uff08\u4f8b\u5982\uff0c\u4ee5\u6240\u6709\u77ff\u5de5\u6bcf\u8f6e\u6b21\u8ba1\u7b97\u54c8\u5e0c\u6570q\u5747\u76f8\u540c\u7684PoW\u4e3a\u4f8b\uff0c\u653b\u51fb\u8005\u6bcf\u6b21\u653b\u51fb\u884c\u4e3a\u53ef\u4ee5\u6267\u884ctq\u6b21\u54c8\u5e0c\u8ba1\u7b97\uff09\u5f53\u524d\u7248\u672c\u4e2d\uff0c\u6bcf\u8f6e\u6b21\u653b\u51fb\u8005\u4f1a\u5728\u968f\u673a\u4f4d\u7f6e\u88ab\u89e6\u53d1\uff0c\u4e3b\u8981\u9632\u6b62\u653b\u51fb\u8005\u5728\u56fa\u5b9a\u4f4d\u7f6e\u89e6\u53d1\u5f71\u54cd\u516c\u5e73\u6027\u3002* \u653b\u51fb\u6a21\u5757\u4e3b\u8981\u4e0e\u7f51\u7edc\u548c\u73af\u5883\u8fdb\u884c\u4ea4\u4e92\uff0c\u4e0e\u73af\u5883\u4ea4\u4e92\u7684\u4e3b\u8981\u5185\u5bb9\u4e3a\u611f\u77e5\u5f53\u524d\u201c\u5c40\u52bf\u201d\u4e0e\u5411\u5168\u5c40\u94fe\u4e0a\u4f20\u533a\u5757\u4e24\u4e2a\u90e8\u5206\uff1b\u4e0e\u7f51\u7edc\u4ea4\u4e92\u7684\u5185\u5bb9\u4e3b\u8981\u662f\u5c06\u533a\u5757\u53d1\u9001\u81f3\u7f51\u7edc\u3002</p> <p></p>"},{"location":"developer-guide/#\u5df2\u5b9e\u73b0\u7684\u653b\u51fb\u65b9\u5f0fAttack-Type","title":"\u5df2\u5b9e\u73b0\u7684\u653b\u51fb\u65b9\u5f0f(Attack Type)","text":"<ul> <li>\u7b97\u529b\u653b\u51fb(Honest Mining)</li> <li>\u81ea\u79c1\u6316\u77ff(Selfish Mining)</li> <li>\u53cc\u82b1\u653b\u51fb(Double Spending)</li> <li>\u65e5\u8680\u653b\u51fb(Eclipse Attack)</li> </ul>"},{"location":"developer-guide/#\u653b\u51fb\u5c42\u4ee3\u7801\u7ed3\u6784Package-Tree","title":"\u653b\u51fb\u5c42\u4ee3\u7801\u7ed3\u6784(Package Tree)","text":"<pre><code>\u251c\u2500 attack\n\u2502  \u251c\u2500 adversary.py\n\u2502  \u251c\u2500 attack_type\n\u2502  \u2502  \u251c\u2500 atomization_behavior.py\n\u2502  \u2502  \u251c\u2500 attack_type.py\n\u2502  \u2502  \u251c\u2500 double_spending.py\n\u2502  \u2502  \u251c\u2500 eclipse.py\n\u2502  \u2502  \u251c\u2500 honest_mining.py\n\u2502  \u2502  \u251c\u2500 selfish_mining.py\n\u2502  \u2502  \u2514\u2500 _atomization_behavior.py\n\u2502  \u2514\u2500 _adversary.py\n</code></pre>"},{"location":"developer-guide/#_adversarypy--adversarypy","title":"_adversary.py &amp; adversary.py","text":"<p>_adversary.py\u63d0\u4f9bAdversary\u62bd\u8c61\u7236\u7c7b\uff0c\u7528\u4e8eadversary.py\u63d0\u4f9b\u7684Adversary\u7ee7\u627f\u3002\u73af\u5883import\u6587\u4ef6adversary.py\u4e2d\u7684Adversary\u7c7b\uff0c\u5e76\u521b\u5efa\u5bf9\u8c61\uff0c\u968f\u540e\u6839\u636e\u73af\u5883\u4f20\u53c2\u521d\u59cb\u5316\u6240\u6709Adversary\u8bbe\u7f6e\u3002\u8be5Adversary\u5bf9\u8c61\u4f5c\u4e3a\u653b\u51fb\u8005\u5168\u4f53\u4ee3\u8868\u7684\u62bd\u8c61\uff0c\u6267\u884c\u653b\u51fb\u3002</p>"},{"location":"developer-guide/#-_adversarypy--adversarypy\u4e2d\u7684\u6210\u5458\u53d8\u91cf","title":"&gt;&gt;&gt; _adversary.py &amp; adversary.py\u4e2d\u7684\u6210\u5458\u53d8\u91cf","text":""},{"location":"developer-guide/#\u5185\u90e8\u6210\u5458\u53d8\u91cf","title":"\u5185\u90e8\u6210\u5458\u53d8\u91cf","text":"\u6210\u5458\u53d8\u91cf \u7c7b\u578b \u89e3\u91ca __Miner_ID int \u503c\u4e3a-1\uff0c\u4e0d\u53d8\u3002\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\uff0c\u7c7b\u4f3c\u666e\u901a\u77ff\u5de5Adversary\u4e5f\u9700\u8981\u521d\u59cb\u5316\u5171\u8bc6consensus\uff0c\u56e0\u6b64\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u88ab\u91cd\u590d\u7684ID\u3002 __adver_num int \u8bb0\u5f55\u653b\u51fb\u8005\u7684\u6570\u91cf\u3002 __attack_type class: AttackType \u6839\u636e\u8bbe\u7f6e\u521b\u5efa\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\uff0c\u82e5\u672a\u8bbe\u7f6e\u5219\u9ed8\u8ba4\u662fHonestMining\u3002 __eclipse bool \u8bb0\u5f55\u662f\u5426\u6267\u884c\u65e5\u8680\u653b\u51fb\u3002 __eclipse_attack class: AttackType \u82e5\u6267\u884c\u65e5\u8680\u653b\u51fb\uff0c\u5219\u521b\u5efa\u65e5\u8680\u653b\u51fbEclipse\u5bf9\u8c61\uff0c\u5426\u5219\u4e3aNone\u3002\u521b\u5efa\u65e5\u8680\u653b\u51fb\u65f6\uff0c\u5185\u90e8\u521d\u59cb\u5316\u4f1a\u8bb0\u5f55\u4e0a\u8ff0\u7684\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\uff0c\u4ee5\u7279\u5b9a\u653b\u51fb\u7c7b\u578b\u5b9e\u884c\u65e5\u8680\u653b\u51fb\u3002 __adver_ids list[int] \u8bb0\u5f55\u4e86\u653b\u51fb\u8005ID\u7684list\u3002 __miner_list list[class: Miner] \u8bb0\u5f55\u4e86\u5168\u4f53\u77ff\u5de5\u7684list\u3002 __network_type class: Network \u8bb0\u5f55\u4e86\u5f53\u524d\u7f51\u7edc\u7c7b\u578b\u5bf9\u8c61\uff0c\u73af\u5883\u521b\u5efa\uff0c\u5e76\u4f20\u7ed9Adversary\u3002 __global_chain class: Chain \u8bb0\u5f55\u4e86\u5f53\u524d\u5168\u5c40\u94fe\u5bf9\u8c61\uff0c\u73af\u5883\u521b\u5efa\uff0c\u5e76\u4f20\u7ed9Adversary\u3002 __adver_consensus_param dict \u4ee5dict\u7684\u5f62\u5f0f\u8bb0\u5f55\u4e86\u653b\u51fb\u8005\u6267\u884c\u7684\u5171\u8bc6\u5bf9\u8c61\u9700\u8981\u7684\u53c2\u6570\u3002 __consensus_type class: Consensus \u6839\u636e\u8bbe\u7f6e\u521b\u5efa\u5171\u8bc6\u7c7b\u578b\u5bf9\u8c61\u3002 __attack_arg dict \u8bb0\u5f55\u4e86\u653b\u51fb\u53c2\u6570\u3002\uff08\u76ee\u524d\u653b\u51fb\u4e2d\u4ec5\u6709DoubleSpending\u9700\u8981\u8be5\u53c2\u6570\u3002"},{"location":"developer-guide/#-_adversarypy--adversarypy\u4e2d\u7684\u6210\u5458\u65b9\u6cd5","title":"&gt;&gt;&gt; _adversary.py &amp; adversary.py\u4e2d\u7684\u6210\u5458\u65b9\u6cd5","text":""},{"location":"developer-guide/#\u5185\u90e8\u65b9\u6cd5","title":"\u5185\u90e8\u65b9\u6cd5","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570\uff08\u7c7b\u578b\uff09 \u8fd4\u56de\u503c: \u7c7b\u578b \u89e3\u91ca __adver_setter() **args: any None \u73af\u5883\u521b\u5efaAdversary\u5bf9\u8c61\u65f6\uff0c\u521d\u59cb\u5316\u9636\u6bb5\u81ea\u52a8\u6267\u884c\u7684\u6210\u5458\u65b9\u6cd5\uff0c\u6839\u636e\u4f20\u53c2\u8bbe\u7f6e\u6240\u6709\u7684\u6210\u5458\u53d8\u91cf\u3002 __adver_gener() None __adver_list: list[class: Miner] \u6839\u636e\u8bbe\u7f6e\uff0c\u5728\u5168\u4f53\u77ff\u5de5\u4e2d\u751f\u6210\u968f\u673a\u6216\u6307\u5b9a\u7684\u653b\u51fb\u8005\u3002 __consensus_q_init() None None \u91cd\u65b0\u8ba1\u7b97\u653b\u51fb\u8005\u7fa4\u4f53\u62bd\u8c61\u5bf9\u8c61Adversary\u7684\u7b97\u529bq\uff08\u4e3a\u6240\u6709\u653b\u51fb\u8005\u7684\u7b97\u529b\u7d2f\u52a0\uff09\u3002 __attack_type_init() None None \u521d\u59cb\u5316\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\uff0c\u7531\u4e0a\u8ff0\u7684\u6210\u5458\u53d8\u91cf\u786e\u5b9a\u3002"},{"location":"developer-guide/#\u5916\u90e8\u65b9\u6cd5","title":"\u5916\u90e8\u65b9\u6cd5","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570: \u7c7b\u578b \u8fd4\u56de\u503c: \u7c7b\u578b \u89e3\u91ca get_adver_ids() None __adver_ids: list[int] \u8fd4\u56de\u8bb0\u5f55\u653b\u51fb\u8005ID\u7684list\u3002 get_adver_num() None __adver_num: int \u8fd4\u56de\u653b\u51fb\u8005\u6570\u91cf\u3002 get_attack_type_name() None attack_type.__class.name: str \u8fd4\u56de\u653b\u51fb\u7c7b\u578b\u7684\u540d\u5b57\u3002 get_attack_type() None __attack_type: AttackType \u8fd4\u56de\u653b\u51fb\u7c7b\u578b\u7684\u540d\u5b57\u3002 get_eclipse() None __eclipse: bool \u521d\u59cb\u5316\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\uff0c\u7531\u4e0a\u8ff0\u7684\u6210\u5458\u53d8\u91cf\u786e\u5b9a\u3002 get_adver_q() None __consensus_type.q: int \u521d\u59cb\u5316\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\uff0c\u7531\u4e0a\u8ff0\u7684\u6210\u5458\u53d8\u91cf\u786e\u5b9a\u3002 excute_per_round(round) round: int None Adversary\u7684\u4e3b\u8981\u65b9\u6cd5\uff0c\u6267\u884c\u653b\u51fb\uff0c\u4f1a\u8c03\u7528\u5bf9\u5e94\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6210\u5458\u65b9\u6cd5\u3002 get_info() None None or __attack_type.info_getter() \u8c03\u7528\u5bf9\u5e94\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6210\u5458\u65b9\u6cd5\uff0c\u83b7\u5f97\u5f53\u524d\u7684\u4fe1\u606f\u3002\u4e00\u822c\u5305\u542b\u6210\u529f\u7387\uff08\u6216\u4e3b\u94fe\u8d28\u91cf\uff09\u4ee5\u53ca\u5bf9\u5e94\u7406\u8bba\u503c\u3002"},{"location":"developer-guide/#_atomization_behaviorpy--atomization_behaviorpy","title":"_atomization_behavior.py &amp; atomization_behavior.py","text":"<p>_atomization_behavior.py\u4e3a\u7236\u7c7b\uff0catomization_behavior.py\u7ee7\u627f\uff0c\u5728\u540e\u8005\u4e2d\u5b9e\u73b0\u4e86\u5177\u4f53\u7684\u539f\u5b50\u5316\u884c\u4e3a(Atomization Behavior\uff0c\u4e0b\u7b80\u79f0AB)\u3002\u89c4\u5b9a\u7236\u7c7b\uff0c\u662f\u56e0\u4e3aAB\u4e2d\u6709\u5fc5\u987b\u5b9e\u73b0\u7684\u884c\u4e3a\uff0c\u901a\u8fc7\u7236\u7c7b\u7ed9\u51fa\u4e00\u4e2a\u884c\u4e3a\u6807\u51c6\uff0c\u5176\u6784\u6210\u653b\u51fb\u7684\u57fa\u7840\u3002\u6b64\u5916\u8fd8\u60f3\u6dfb\u52a0\u529f\u80fd\u76f4\u63a5\u5728\u7ee7\u627f\u7c7b\u4e2d\u6dfb\u52a0\u5373\u53ef\u3002\u56e0\u4e3a\u8be5\u7ee7\u627f\u7c7b\u4e3a\u65b9\u6cd5\u7c7b\uff0c\u6ca1\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4ee5\u4e0b\u8be6\u7ec6\u4ecb\u7ecdAB\u7684\u65b9\u6cd5\uff08\u975e\u8868\u683c\u5f62\u5f0f\uff09\u3002</p>"},{"location":"developer-guide/#\u539f\u5b50\u5316\u884c\u4e3aAtomization-Behavior","title":"\u539f\u5b50\u5316\u884c\u4e3a(Atomization Behavior)","text":""},{"location":"developer-guide/#-1-renew","title":"&gt;&gt;&gt; 1. renew()","text":"<p>renew\u7684\u4f5c\u7528\u4e3a\u66f4\u65b0\u653b\u51fb\u8005\u7684\u6240\u6709\u533a\u5757\u94fe\u72b6\u6001\uff1a\u57fa\u51c6\u94fe\u3001\u653b\u51fb\u94fe\u3001\u77ff\u5de5\u72b6\u6001\uff08\u5305\u62ec\u8f93\u5165\u548c\u5176\u81ea\u8eab\u94fe\uff09\u7b49\u3002\u5f53\u524d\u7248\u672c\u7684renew\u4ec5\u6709round\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\uff0cround\u53ef\u4ee5\u89c6\u4e3a\u4e00\u79cd\u73af\u5883\u72b6\u6001\u3002\u653b\u51fb\u8005\u7684_receive_tape\u4e2d\u5305\u542b\u4e86\u4ee5\u653b\u51fb\u8005\u4e3a\u89c6\u89d2\uff0c\u6bcf\u56de\u5408\u80fd\u591f\u63a5\u53d7\u5230\u7684\u6700\u65b0\u533a\u5757\u3002    </p> <p>renew\u4e2d\u653b\u51fb\u8005\u904d\u5386\u5176\u63a7\u5236\u7684\u6bcf\u4e00\u4e2a\u77ff\u5de5\u3002\u6240\u6709\u77ff\u5de5\u90fd\u5982\u8bda\u5b9e\u77ff\u5de5\u4e00\u6837\u6267\u884clocal_state_update\uff08\u8be6\u89c1\u5171\u8bc6\u90e8\u5206\uff09\u3002\u6839\u636elocal_state_update\u5177\u4f53\u7ed3\u679c\u5bf9\u5b57\u5178\u8fdb\u884c\u66f4\u65b0\u3002</p> <p>\u82e5\u5b58\u5728\u66f4\u65b0\uff0c\u5219\u5c06\u65b0\u4ea7\u751f\u7684\u533a\u5757\u66f4\u65b0\u5230\u57fa\u51c6\u94fe\u548c\u5168\u5c40\u94fe\u4e0a\u3002\u524d\u8005\u4f5c\u4e3a\u653b\u51fb\u8005\u653b\u51fb\u7684\u53c2\u8003\u57fa\u51c6\uff08\u653b\u51fb\u8005\u89c6\u89d2\u4e0b\u6700\u65b0\u7684\u94fe\uff09\uff0c\u540e\u8005\u4f5c\u4e3a\u533a\u5757\u94fe\u7ef4\u62a4\u8005\u6709\u4e49\u52a1\u5c06\u6700\u65b0\u7684\u533a\u5757\u8bb0\u5f55\u5728\u5168\u5c40\u4e2d\u3002</p> <p>\u603b\u7ed3\uff1arenew\u81f3\u5c11\u9700\u8981\u4ee5\u4e0b\u4e09\u90e8\u5206\u529f\u80fd\uff1a</p> <ul> <li> <p>\u5bf9\u6bcf\u4e2a\u653b\u51fb\u8005\u77ff\u5de5\u8fdb\u884clocal_state_update\u3002</p> </li> <li> <p>\u6839\u636e\u66f4\u65b0\u7ed3\u679c\u66f4\u65b0\u57fa\u51c6\u94fe\u548c\u5168\u5c40\u94fe\u3002</p> </li> <li> <p>\u6839\u636e\u9700\u8981\u5c06\u6bcf\u8f6e\u7684\u66f4\u65b0\u7ed3\u679c\u8fdb\u884c\u8bb0\u5f55\u3002</p> </li> </ul> <p>\u82e5\u5f00\u53d1\u8005\u60f3\u8981\u5f00\u53d1\u65b0\u7684\u653b\u51fb\u6a21\u5f0f\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8c03\u6574\u4e09\u90e8\u5206\u7684\u5177\u4f53\u5185\u5bb9\uff0c\u6216\u589e\u52a0\u5176\u4ed6\u529f\u80fd\uff0c\u4f46\u8fd9\u4e09\u90e8\u5206\u529f\u80fd\u662f\u4e0d\u80fd\u5c11\u7684\u3002</p>"},{"location":"developer-guide/#-2-mine","title":"&gt;&gt;&gt; 2. mine()","text":"<p>mine\u8c03\u7528\u5f53\u524d\u7684\u5171\u8bc6\u65b9\u6cd5\uff0c\u5e76\u6267\u884c\u5171\u8bc6\u65b9\u6cd5\u5bf9\u5e94\u7684\u6316\u77ff\u529f\u80fd\uff08\u5373\u8bda\u5b9e\u6316\u77ff\uff09\u3002\u5f53\u524d\u7248\u672c\u7684mine\u4f1a\u5728\u653b\u51fb\u8005\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u4f5c\u4e3a\u5f53\u524d\u56de\u5408\u4f5c\u4e3a\u6316\u77ff\u7684\u201c\u4ee3\u8868\u201d\u3002\u6b64\u5916\uff0c\u6e90\u4ee3\u7801\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u901a\u8fc7ID\u6307\u5b9a\u77ff\u5de5\u6316\u77ff\u7684\u529f\u80fd\u3002</p> <p>\u82e5\u4ea7\u751f\u533a\u5757\uff0c\u5219\u5bf9\u653b\u51fb\u94fe\uff08adver_chain\uff09\u548c\u5168\u5c40\u94fe\u8fdb\u884c\u66f4\u65b0</p> <p>\u5e76\u904d\u5386\u6240\u6709\u653b\u51fb\u8005\uff0c\u5c06\u533a\u5757\u66f4\u65b0\u81f3\u653b\u51fb\u8005\u7684_receive_tape\u4e2d\u3002\u76ee\u7684\u6709\u4e8c\uff0c\u4e00\u662f\u4ee4\u653b\u51fb\u8005\u76f4\u63a5\u80fd\u5171\u4eab\u533a\u5757\uff08\u4e0b\u4e00\u56de\u5408\u6536\u5230\uff09\uff0c\u4e8c\u662f\u5728\u4e0b\u4e00\u56de\u5408\u53ef\u4ee5\u5c06\u8be5\u533a\u5757\u66f4\u65b0\u5230\u57fa\u51c6\u94fe\u4e2d\u3002</p> <p>mine\u6a21\u5757\u7684\u5185\u5bb9\u4e00\u822c\u4e0d\u4f1a\u6709\u5927\u7684\u6539\u52a8\uff0c\u56e0\u4e3a\u5176\u4e3b\u8981\u529f\u80fd\u5c31\u662f\u8c03\u7528\u5171\u8bc6\u7684\u6316\u77ff\u529f\u80fd\uff0c\u5e76\u6839\u636e\u7ed3\u679c\u66f4\u65b0\u5bf9\u5e94\u7684\u533a\u5757\u94fe\u3002</p>"},{"location":"developer-guide/#-3-upload","title":"&gt;&gt;&gt; 3. upload()","text":"<p>\u5411\u7f51\u7edc\u4e0a\u4f20Adversary\u7684\u533a\u5757\u3002</p>"},{"location":"developer-guide/#-4-adopt","title":"&gt;&gt;&gt; 4. adopt()","text":"<p>adopt\u7528\u4e8e\u5c06\u57fa\u51c6\u94fe\uff08honset_chain\uff09\u7684\u7ed3\u679c\u66f4\u65b0\u5230\u653b\u51fb\u94fe\uff08adver_chain\uff09\u4e0a\u3002\u653b\u51fb\u94fe\u53ef\u4ee5\u770b\u4f5c\u653b\u51fb\u96c6\u56e2\u5171\u540c\u7ef4\u62a4\u7684\u4e00\u6761\u94fe\uff0c\u800c\u4e0d\u662f\u5404\u6076\u610f\u77ff\u5de5\u81ea\u8eab\u7684\u94fe\uff0c\u56e0\u6b64\u8fd8\u8981\u66f4\u65b0\u6bcf\u4e2a\u6076\u610f\u77ff\u5de5\u7684\u672c\u5730\u94fe\u3002</p>"},{"location":"developer-guide/#-5-clear","title":"&gt;&gt;&gt; 5. clear()","text":"<p>\u6e05\u9664\u653b\u51fb\u8005\u4e2d\u6240\u6709\u77ff\u5de5\u7684\u8f93\u5165\u548c\u901a\u4fe1\u5185\u5bb9\u3002\u8bbe\u8ba1clear\u7684\u76ee\u7684\u610f\u5728\u6d88\u9664\u672c\u56de\u5408\u7684\u8f93\u5165\u5185\u5bb9\u5bf9\u4e0b\u4e00\u56de\u5408\u7684\u5f71\u54cd\uff0c\u56e0\u6b64clear\u5e94\u7f6e\u4e8e\u4e00\u7cfb\u5217\u884c\u4e3a\u4e4b\u540e\u3002</p>"},{"location":"developer-guide/#-6-wait","title":"&gt;&gt;&gt; 6. wait()","text":"<p>wait\u662f\u8ba9\u653b\u51fb\u6a21\u5757\u7b49\u5f85\u81f3\u4e0b\u4e00\u56de\u5408\u518d\u7ee7\u7eed\u8fd0\u884c\u3002\u56e0\u6b64\u5e76\u6ca1\u6709\u5bf9wait\u90e8\u5206\u8bbe\u8ba1\u5177\u4f53\u884c\u4e3a\uff0c\u5f53\u653b\u51fb\u5b9e\u4f8b\u6267\u884c\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u65f6\u4e5f\u4e0d\u4f1a\u505a\u51fa\u5b9e\u9645\u884c\u52a8\u3002</p>"},{"location":"developer-guide/#attack_typepy--honest_miningpy-selfish_miningpy-double_spending","title":"attack_type.py &amp; honest_mining.py, selfish_mining.py, double_spending","text":""},{"location":"developer-guide/#-attack_typepy\u4e2d\u7684\u6210\u5458\u53d8\u91cf","title":"&gt;&gt;&gt; attack_type.py\u4e2d\u7684\u6210\u5458\u53d8\u91cf","text":""},{"location":"developer-guide/#\u5916\u90e8\u53d8\u91cf","title":"\u5916\u90e8\u53d8\u91cf","text":"<p>\u672a\u8bf4\u660e\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5176\u542b\u4e49\u4e0e\u524d\u8ff0\u4e00\u81f4\u3002</p> \u6210\u5458\u53d8\u91cf \u7c7b\u578b \u8bf4\u660e behavior class: AtomizationBehavior \u8bb0\u5f55AtomizationBehavior\u7c7b\u578b\u7684\u65b9\u6cd5\u7c7b\u5bf9\u8c61\u3002 global_chain class: Chain -------- honest_chain class: Chain \u4ee5Adversary\u89c6\u89d2\u66f4\u65b0\u7684\u8bda\u5b9e\u94fe\u3002Adversary\u9664\u4e86\u5728\u5176\u4e0a\u66f4\u65b0\u8bda\u5b9e\u8282\u70b9\u7684\u533a\u5757\u5916\uff0c\u4e00\u822c\u4e0d\u4f1a\u8fdb\u884c\u989d\u5916\u64cd\u4f5c\uff0c\u4e5f\u662fAdversary\u653e\u5f03\u8fdb\u653b\u540e\uff0c\u63a5\u7eb3\u5e76\u66f4\u65b0adver_chain\u7684\u53c2\u8003\u3002 adver_chain class: Chain Adversary\u672c\u5730\u7684\u94fe\uff0c\u4e00\u822c\u4e0ehonest_chain\u4e0d\u4fdd\u6301\u4e00\u81f4\u3002 miner_list list[class: Miner] -------- adver_list list[class: Miner] -------- network_type class: Network -------- adver_consensus class: Consensus -------- attack_arg dict --------"},{"location":"developer-guide/#-attack_typepy\u4e2d\u7684\u6210\u5458\u65b9\u6cd5","title":"&gt;&gt;&gt; attack_type.py\u4e2d\u7684\u6210\u5458\u65b9\u6cd5","text":""},{"location":"developer-guide/#\u5185\u90e8\u65b9\u6cd5_1","title":"\u5185\u90e8\u65b9\u6cd5","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570: \u7c7b\u578b \u8fd4\u56de\u53c2\u6570: \u7c7b\u578b \u8bf4\u660e __set_behavior_init() None None \u521b\u5efaAtomizationBehavior\u7c7b\u578b\u7684\u65b9\u6cd5\u7c7b\u5bf9\u8c61\u3002"},{"location":"developer-guide/#\u5916\u90e8\u65b9\u6cd5_1","title":"\u5916\u90e8\u65b9\u6cd5","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570: \u7c7b\u578b \u8fd4\u56de\u53c2\u6570: \u7c7b\u578b \u8bf4\u660e set_init() global_chain: Chain, adver_list:list[Miner], miner_list:list[Miner], network_type: Network, adver_consensus: Consensus, attack_arg:dict None \u5bf9\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\u8d4b\u503c\u3002"},{"location":"developer-guide/#\u62bd\u8c61\u65b9\u6cd5","title":"\u62bd\u8c61\u65b9\u6cd5","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570: \u7c7b\u578b \u8fd4\u56de\u53c2\u6570: \u7c7b\u578b \u8bf4\u660e renew_stage(round) round: int newest_block: Block, mine_input: any \u6267\u884c\u66f4\u65b0\u9636\u6bb5\u3002 attack_stage(round,mine_input) round: int None \u6267\u884c\u653b\u51fb\u9636\u6bb5\u3002 clear_record_stage(round) round: int None \u6267\u884c\u6e05\u9664\u548c\u8bb0\u5f55\u9636\u6bb5\u3002 excute_this_attack_per_round(round) round: int None \u6267\u884c\u5f53\u524d\u653b\u51fb\u3002 info_getter() None None \u8fd4\u56de\u5f53\u524d\u653b\u51fb\u4fe1\u606f\u3002"},{"location":"developer-guide/#\u4ee5HonestMining\u4e3a\u4f8b\u8bf4\u660e","title":"\u4ee5HonestMining\u4e3a\u4f8b\u8bf4\u660e","text":"<p>\u653b\u51fb\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff1arenew\u9636\u6bb5\uff0cattack\u9636\u6bb5\uff0c\u548cclear and record\u9636\u6bb5\u3002</p>"},{"location":"developer-guide/#-renew\u9636\u6bb5","title":"&gt;&gt;&gt; renew\u9636\u6bb5\uff1a","text":"<p><pre><code>def renew_stage(self,round):\n        ## 1. renew stage\n    newest_block, mine_input = self.behavior.renew(miner_list = self.adver_list, \\\n                                 honest_chain = self.honest_chain,round = round)\n    return newest_block, mine_input\n</code></pre> \u4ece\u4e0a\u9762\u5c55\u793a\u7684renew\u9636\u6bb5\u6e90\u4ee3\u7801\u53ef\u4ee5\u6ce8\u610f\u5230\uff0crenew\u9636\u6bb5\u9700\u8981\u8fd4\u56de\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662fnewest_block\u4e00\u4e2a\u662fmine_input\u3002\u800crenew\u9636\u6bb5\u4e5f\u4ee5renew()\u65b9\u6cd5\u4e3a\u4e3b\u3002</p>"},{"location":"developer-guide/#-attack\u9636\u6bb5","title":"&gt;&gt;&gt; attack\u9636\u6bb5\uff1a","text":"<p><pre><code>def attack_stage(self,round,mine_input):\n        ## 2. attack stage\n    current_miner = random.choice(self.adver_list)       \n    self.behavior.adopt(adver_chain = self.adver_chain, honest_chain = self.honest_chain)\n    attack_mine = self.behavior.mine(miner_list = self.adver_list, current_miner = current_miner \\\n                              , miner_input = mine_input,\\\n                              adver_chain = self.adver_chain, \\\n                                global_chain = self.global_chain, consensus = self.adver_consensus)\n    if attack_mine:\n        self.behavior.upload(network_type = self.network_type, adver_chain = self.adver_chain, \\\n              current_miner = current_miner, round = round)\n    else:\n        self.behavior.wait()\n</code></pre> attack\u9636\u6bb5Adversary\u8981\u6839\u636e\u6761\u4ef6\u6267\u884cadopt(), mine(), upload(), wait()\u3002\u6839\u636e\u5177\u4f53\u7684\u653b\u51fb\u7b56\u7565\u5224\u65ad\u5982\u4f55\u7ec4\u5408\u8fd9\u4e9b\u65b9\u6cd5\u3002HonestMining\u7b56\u7565\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u8981\u6316\u51fa\u533a\u5757\u5c31\u53d1\u5e03\uff0c\u5426\u5219\u5c31\u7b49\u5f85\u3002\u6ce8\u610f\u5230\u5373\u4f7f\u662f\u6700\u7b80\u5355\u7684HonestMining\u4e5f\u672a\u5fc5\u6bcf\u8f6e\u90fd\u4f1a\u4e0e\u7f51\u7edc\u4ea4\u4e92\u3002 \u5177\u4f53\u5230Selfish Mining\u548cDouble Spending\uff0c\u56e0\u4e3a\u7b56\u7565\u6bd4\u8f83\u590d\u6742\uff0c\u6e90\u4ee3\u7801\u4e5f\u6bd4\u8f83\u590d\u6742\uff0c\u82e5\u9700\u8981\u53ef\u4ee5\u76f4\u63a5\u67e5\u770b\u6e90\u4ee3\u7801\u3002</p>"},{"location":"developer-guide/#-clear-and-record\u9636\u6bb5","title":"&gt;&gt;&gt; clear and record\u9636\u6bb5\uff1a","text":"<p><pre><code>def clear_record_stage(self,round):\n    ## 3. clear and record stage\n    self.behavior.clear(miner_list = self.adver_list)# \u6e05\u7a7a\n    self.__log['round'] = round\n    self.__log['honest_chain'] = self.honest_chain.lastblock.name + ' Height:' + str(self.honest_chain.lastblock.height)\n    self.__log['adver_chain'] = self.adver_chain.lastblock.name + ' Height:' + str(self.adver_chain.lastblock.height)\n    self.resultlog2txt()\n</code></pre> \u8fd9\u4e2a\u9636\u6bb5\u6bd4\u8f83\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u8c03\u7528clear()\u65b9\u6cd5\uff0c\u6e05\u7a7a\u77ff\u5de5\u5185\u90e8\u7684\u5197\u4f59\u6570\u636e\uff0c\u5e76\u8bb0\u5f55\u4e00\u4e9b\u9700\u8981\u7684\u4fe1\u606f\u5230\u65e5\u5fd7dict\u4e2d\u3002</p>"},{"location":"developer-guide/#eclipsepy","title":"eclipse.py","text":"<p>eclipse\u4e0eHonestMining\u7b49\u653b\u51fb\u4e0d\u540c\uff0c\u5176\u9700\u8981\u4f9d\u6258\u524d\u9762\u8fd9\u4e09\u79cd\u653b\u51fb\uff0c\u624d\u80fd\u4ea7\u751f\u6548\u679c\u3002</p>"},{"location":"developer-guide/#\u8bc4\u4f30-Evaluation","title":"\u8bc4\u4f30 Evaluation","text":"<p><code>Environment.exec</code>\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5c06\u6267\u884c<code>Environment.view_and_write</code>\uff0c\u5bf9\u4eff\u771f\u7ed3\u679c\u8fdb\u884c\u8bc4\u4f30\u4e0e\u8f93\u51fa\u3002</p> <ul> <li> <p>view_and_write\u9996\u5148\u8c03\u7528view\uff0c\u83b7\u53d6\u7edf\u8ba1\u6570\u636e\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u5230\u547d\u4ee4\u884c</p> </li> <li> <p>view\u4f1a\u8c03\u7528global_chain\u4e2d\u7684<code>CalculateStatistics</code>\u51fd\u6570\uff0c\u5bf9\u5168\u5c40\u533a\u5757\u94fe\u6811\u72b6\u7ed3\u6784\u8fdb\u884c\u6570\u636e\u7edf\u8ba1\uff0c\u5e76\u5c06\u7ed3\u679c\u66f4\u65b0\u5230\u5b57\u5178\u53d8\u91cfstat\u4e2d\u3002</p> </li> <li> <p>\u4e4b\u540e\uff0c\u5c06\u4ece\u5171\u540c\u524d\u7f00\uff08common prefix\uff09\u3001\u94fe\u8d28\u91cf\uff08chain quality\uff09\u3001\u94fe\u589e\u957f\uff08chain growth\uff09\u4e09\u4e2a\u7ef4\u5ea6\u5bf9\u5168\u5c40\u533a\u5757\u94fe\u8fdb\u884c\u6570\u636e\u7edf\u8ba1\u3002\u8fd9\u4e09\u90e8\u5206\u7531external.py\u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u5b9e\u73b0\u3002</p> </li> <li> <p>\u5176\u6b21\uff0c\u8c03\u7528network\u4e2d\u7684<code>cal_block_propagation_times</code>\u51fd\u6570\uff0c\u83b7\u53d6\u7f51\u7edc\u76f8\u5173\u7684\u7edf\u8ba1\u53c2\u6570\u3002</p> </li> <li> <p>\u6700\u540e\uff0c<code>view_and_write</code>\u5c06\u8bc4\u4f30\u7ed3\u679c\u8f93\u51fa\u5230\u6587\u4ef6\u4e2d\u3002</p> </li> </ul> <p>\u4ee5\u4e0b\u4e3astat\u4e2d\u7edf\u8ba1\u53c2\u6570\u7684\u89e3\u91ca\uff0c\u5b83\u4eec\u548c\u4eff\u771f\u5668\u6700\u540e\u7684\u8f93\u51fa\u7ed3\u679c\u76f8\u5bf9\u5e94(\u8be6\u89c1\u7528\u6237\u624b\u518c)\uff1a</p> \u5b57\u5178\u6761\u76ee \u89e3\u91ca/\u8ba1\u7b97\u65b9\u5f0f num_of_generated_blocks \u751f\u6210\u7684\u533a\u5757\u603b\u6570 num_of_valid_blocks \u4e3b\u94fe\u4e2d\u7684\u533a\u5757\u603b\u6570\uff08\u4e3b\u94fe\u957f\u5ea6\uff09 num_of_stale_blocks \u5b64\u5757\u6570\uff08\u4e0d\u5728\u4e3b\u94fe\u4e2d\u7684\u533a\u5757\uff09 stale_rate \u5b64\u5757\u7387=\u5b64\u5757\u6570/\u533a\u5757\u603b\u6570 num_of_forks \uff08\u4e3b\u94fe\u4e0a\u7684\uff09\u5206\u53c9\u6570 fork_rate \u5206\u53c9\u7387=\u4e3b\u94fe\u4e0a\u6709\u5206\u53c9\u7684\u9ad8\u5ea6\u6570/\u4e3b\u94fe\u9ad8\u5ea6 average_block_time_main \u4e3b\u94fe\u5e73\u5747\u51fa\u5757\u65f6\u95f4=\u603b\u8f6e\u6570/\u4e3b\u94fe\u957f\u5ea6 block_throughput_main \u4e3b\u94fe\u533a\u5757\u541e\u5410\u91cf=\u4e3b\u94fe\u957f\u5ea6/\u603b\u8f6e\u6570 throughput_main_MB =\u4e3b\u94fe\u533a\u5757\u541e\u5410\u91cf*\u533a\u5757\u5927\u5c0f average_block_time_total \u603b\u5e73\u5747\u51fa\u5757\u65f6\u95f4=\u603b\u8f6e\u6570/\u751f\u6210\u7684\u533a\u5757\u603b\u6570 block_throughput_total \u603b\u533a\u5757\u541e\u5410\u91cf=\u751f\u6210\u7684\u533a\u5757\u603b\u6570/\u603b\u8f6e\u6570 throughput_total_MB =\u603b\u533a\u5757\u541e\u5410\u91cf*\u533a\u5757\u5927\u5c0f total_round \u8fd0\u884c\u603b\u8f6e\u6570 common_prefix_pdf \u7edf\u8ba1\u5171\u540c\u524d\u7f00\u5f97\u5230\u7684pdf\uff08\u7edf\u8ba1\u6bcf\u8f6e\u7ed3\u675f\u65f6\uff0c\u6240\u6709\u8bda\u5b9e\u8282\u70b9\u7684\u94fe\u7684\u5171\u540c\u524d\u7f00\u4e0e\u6700\u957f\u94fe\u957f\u5ea6\u7684\u5dee\u503c\u5f97\u5230\u7684\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\uff09 consistency_rate \u4e00\u81f4\u6027\u6307\u6807=common_prefix_pdf[0] average_chain_growth_in_honest_miners'_chain \u8bda\u5b9e\u77ff\u5de5\u94fe\u957f\u7684\u5e73\u5747\u589e\u52a0\u503c chain_quality_property \u94fe\u8d28\u91cf\u5b57\u5178\uff0c\u8bb0\u5f55\u8bda\u5b9e\u8282\u70b9\u548c\u6076\u610f\u8282\u70b9\u7684\u51fa\u5757\u6570\u76ee ratio_of_blocks_contributed_by_malicious_players \u6076\u610f\u8282\u70b9\u51fa\u5757\u5360\u6bd4 upper_bound t/(n-t) \u6076\u610f\u8282\u70b9\u51fa\u5757\u5360\u6bd4\u7684\u4e0a\u754c(n\u4e3a\u77ff\u5de5\u603b\u6570\uff0ct\u4e3a\u6076\u610f\u77ff\u5de5\u6570\u76ee) block_propagation_times \u533a\u5757\u4f20\u64ad\u65f6\u95f4\uff08\u5206\u5e03\uff09 <p>\u5173\u4e8e\u5171\u540c\u524d\u7f00\u3001\u94fe\u8d28\u91cf\u548c\u94fe\u589e\u957f\u4e09\u4e2a\u6307\u6807\u7684\u89e3\u91ca\u5982\u4e0b\uff1a</p> \u6027\u8d28 \u89e3\u91ca Common Prefix \u5f53\u6076\u610f\u8282\u70b9\u7b97\u529b\u4e0d\u8d85\u8fc7\u4e00\u5b9a\u6bd4\u4f8b\u65f6\uff0c\u8bda\u5b9e\u77ff\u5de5\u7ef4\u62a4\u7684\u533a\u5757\u94fe\u603b\u662f\u6709\u5f88\u957f\u7684\u5171\u540c\u524d\u7f00\uff08\u628a\u4efb\u610f\u4e24\u4e2a\u8bda\u5b9e\u77ff\u5de5\u7684\u94fe\u622a\u6389\u4e00\u6bb5\uff0c\u5269\u4f59\u90e8\u5206\uff08\u524d\u7f00\uff09\u603b\u662f\u76f8\u540c\u7684\uff09 Chain Quality \u622a\u53d6\u8bda\u5b9e\u77ff\u5de5\u94fe\u4e2d\u4efb\u610f\u8db3\u591f\u957f\u7684\u4e00\u6bb5\uff0c\u5176\u4e2d\u6076\u610f\u77ff\u5de5\u4ea7\u751f\u7684\u533a\u5757\u5360\u6bd4\u4e0d\u4f1a\u8d85\u8fc7t/(n-t)(n\u4e3a\u77ff\u5de5\u603b\u6570\uff0ct\u4e3a\u6076\u610f\u77ff\u5de5\u6570\u76ee) Chain Growth \u8bda\u5b9e\u77ff\u5de5\u7684\u94fe\u603b\u662f\u81f3\u5c11\u4ee5\u4e00\u5b9a\u901f\u7387\u589e\u957f <p>\u5bf9\u5e94external.py\u4e2d\u7684\u51fd\u6570\u5b9e\u73b0\u5982\u4e0b\uff1a</p> \u51fd\u6570 \u8f93\u5165\u53c2\u6570 \u8f93\u51fa\u53c2\u6570 \u8bf4\u660e common_prefix prefix1:Block\uff0cprefix2:Chain \u5171\u540c\u524d\u7f00prefix1 \u8ba1\u7b97\u4e24\u6761\u533a\u5757\u94fe\u7684\u5171\u540c\u524d\u7f00 chain_quality blockchain:Chain \u5b57\u5178cq_dict;\u6307\u6807chain_quality_property \u7edf\u8ba1\u6076\u610f\u8282\u70b9\u51fa\u5757\u5360\u6bd4 chain_growth blockchain:Chain \u533a\u5757\u94fe\u9ad8\u5ea6 \u83b7\u53d6\u533a\u5757\u94fe\u957f\u5ea6\u589e\u957f\uff08\u5373\u533a\u5757\u94fe\u9ad8\u5ea6\uff09 <p>\u6ce8\u610f\uff0ccommon_prefix\u548cchain_growth\u5747\u4ec5\u5b9e\u73b0\u4e86\u5bf9\u5e94\u6027\u8d28\u7684\u90e8\u5206\u529f\u80fd\uff1acommon_prefix\u53ea\u662f\u8ba1\u7b97\u4e24\u6761\u533a\u5757\u94fe\u7684\u5171\u540c\u524d\u7f00\uff0c\u800c\u4e00\u81f4\u6027\u6307\u6807\u6839\u636e\u6bcf\u6b21\u4eff\u771f\u7684\u65e5\u5fd7\u7edf\u8ba1\u51fa\u6765\u800cchain_growth\u4ec5\u8fd4\u56de\u533a\u5757\u94fe\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u94fe\u589e\u957f\u901f\u7387\u5219\u5728CalculateStatistics\u51fd\u6570\u4e2d\u5b8c\u6210\u3002</p> <p>\u6709\u5173\u4ee5\u4e0a\u4e09\u4e2a\u6307\u6807\u66f4\u52a0\u8be6\u7ec6\u7684\u542b\u4e49\uff0c\u53ef\u4ee5\u9605\u8bfb\uff1a</p> <ul> <li>J. A. Garay, A. Kiayias and N. Leonardos, \"The bitcoin backbone protocol: Analysis and applications\", Eurocrypt, 2015. https://eprint.iacr.org/2014/765.pdf</li> </ul>"},{"location":"en/","title":"ChainXim User Guide","text":""},{"location":"en/#Introduction","title":"Introduction","text":"<p>ChainXim is a blockchain simulator developed by XinLab to simulate and verify blockchain systems under different parameter settings. We hope that ChainXim can be compatible with different consensus protocols, network models, and can design different attackers to comprehensively evaluate the blockchain's security, throughput, and other performance metrics.</p>"},{"location":"en/#Download","title":"Download","text":"<p>ChainXim repository: https://github.com/XinLab-SEU/ChainXim</p> <p>You can clone the Github repository with git.</p> <p>Git clone command: <code>git clone https://github.com/XinLab-SEU/ChainXim.git</code></p> <p>Or you can download the master branch from the ChainXim code repository: master.zip</p>"},{"location":"en/#File-Structure","title":"File Structure","text":"<p>The file structure after extracting the zip file or cloning the repository is as follows: <pre><code>chain-xim\n    \u251c\u2500\u2500 Attack.py\n    \u251c\u2500\u2500 Environment.py\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 data\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 block.py\n    \u2502   \u251c\u2500\u2500 chain.py\n    \u2502   \u2514\u2500\u2500 message.py\n    \u251c\u2500\u2500 consensus\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 consensus_abc.py\n    \u2502   \u2514\u2500\u2500 pow.py\n    \u251c\u2500\u2500 errors.py\n    \u251c\u2500\u2500 external.py\n    \u251c\u2500\u2500 functions.py\n    \u251c\u2500\u2500 global_var.py\n    \u251c\u2500\u2500 main.py\n    \u251c\u2500\u2500 miner\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 _consts.py\n    \u2502   \u251c\u2500\u2500 miner.py.py\n    \u2502   \u251c\u2500\u2500 network_interface\n    \u2502       \u251c\u2500\u2500 nic_abc.py\n    \u2502       \u251c\u2500\u2500 nic_with_tp.py\n    \u2502       \u2514\u2500\u2500 nic_without_tp.py\n    \u251c\u2500\u2500 network\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 adhoc.py\n    \u2502   \u251c\u2500\u2500 deterprop.py\n    \u2502   \u251c\u2500\u2500 network_abc.py\n    \u2502   \u251c\u2500\u2500 stochprop.py\n    \u2502   \u251c\u2500\u2500 synchronous.py\n    \u2502   \u251c\u2500\u2500 topology.py\n    \u2502   \u251c\u2500\u2500 topolpgy.csv\n    \u2502   \u251c\u2500\u2500 topolpgy_coo.csv\n    \u2502   \u2514\u2500\u2500 topology_eclipse_sample.csv\n    \u2514\u2500\u2500 system_config.ini\n</code></pre></p> File or Directory Description main.py Main program of the simulator system_config.ini Configuration file README.md User documentation Environment.py Environment class and related functions miner/ Directory containing miner classes and network interfaces data/ Directory containing Message, BlockHead, Block, Chain classes and related functions consensus/ Directory containing abstract consensus classes, PoW classes, and related functions network/ Directory containing various network classes Attack.py Attacker class and related functions functions.py Functions including SHA256 hash calculation external.py External functions for blockchain statistics errors.py Error classes for throwing errors in the simulator global_var.py Global variables"},{"location":"en/#Configuration-Environment","title":"Configuration Environment","text":"<ol> <li>Install Anaconda. Anaconda download link</li> <li>Open Anaconda Prompt from the Start menu.</li> <li>Create a conda environment and activate it, choosing Python version 3.10. <pre><code>conda create -n chainxim python=3.10 python-graphviz\nactivate chainxim\n</code></pre></li> <li>Install the required packages via pip. <pre><code>cd &lt;project_directory&gt;\npip install -r requirements.txt\n</code></pre></li> </ol>"},{"location":"en/#Simple-Startup","title":"Simple Startup","text":"<ol> <li>Open Anaconda Prompt from the Start menu, and activate the conda environment before running. <pre><code>activate chainxim\n</code></pre></li> <li>Run the main program in the ChainXim root directory. <pre><code>cd &lt;project_directory&gt;\npython main.py\n</code></pre></li> </ol>"},{"location":"en/#Test-Examples","title":"Test Examples","text":"<p>Pass the following parameters to the main program, which will make ChainXim randomly generate a miner network with 10 nodes, 2 of which are attackers, using the TopologyNetwork model, and the simulation will last for 3000 rounds. <pre><code>python main.py --total_round 3000 --miner_num 10 -t 2 --network_type network.TopologyNetwork --no_compact_outputfile --save_routing_graph --show_label\n</code></pre> After the simulation starts, it will output the simulation parameters and display a progress bar during the simulation. <pre><code>Network Attributes\n    miner_num: 10\n    Generate Approach: rand\n    Generate Edge Probability: 0.8\n    Diameter: 2\n    Average Shortest Path Length: 1.356\n    Degree Histogram: [0, 0, 0, 0, 3, 1, 3, 2, 0, 1]\n    Average Degree: 5.8\n    Average Cluster Coefficient: 0.689\n    Degree Assortativity: -0.251\n\n\nParameters:\nMiner Number: 10\nAdversary Miners: [8, 6]\nConsensus Protocol: PoW\nNetwork Type: TopologyNetwork\nNetwork Param:  {'show_label': True, 'save_routing_graph': True, 'ave_degree': 8.0, 'bandwidth_honest': 0.5, 'bandwidth_adv': 5.0, 'TTL': 500, 'gen_net_approach': 'rand', 'block_prop_times_statistic': [0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}\nConsensus Param: {'target': '000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF', 'q_ave': 5, 'q_distr': 'equal'}\nAttack Execute Type: execute_sample1\n</code></pre> After the simulation ends, the simulation results will be shown:</p> <p></p> <p>In addition, various data generated during the simulation will be saved in the Results folder, including each miner's blockchain records, blockchain visualization graphics, blockchain attacker logs, routing history, network topology, block propagation diagrams, etc. Note that if the command line parameters <code>--no_compact_outputfile --save_routing_graph</code> are missing, some files may not be output.</p> <p>Blockchain visualization graphic (blockchain_visualization/Blockchain Structure.gv.svg) </p> <p>  Red blocks in the figure are generated by attackers, and blue blocks are generated by honest miners.</p> <p>Blockchain visualization diagram (blockchain visualisation.svg)</p> <p></p> <p>Each point in the figure represents a block, with blue points representing blocks generated by honest miners and red points representing blocks generated by attackers. The x-coordinate of each point represents the round in which the block was generated, and the y-coordinate represents the height of the block. Note: If too many rounds are run, resulting in too many blocks, the generated image may become crowded and difficult to distinguish.</p> <p>Block generation time distribution histogram (block interval distribution.svg)</p> <p></p> <p>Network topology diagram (Network Results/network topology.svg)</p> <p></p> <p>The transmission bandwidth between adjacent nodes is marked in the figure, with the unit being MB/round.</p> <p>Block propagation diagram (taking block B2 as an example: Network Results/routing_graphB2.svg)</p> <p></p> <p>The above figure shows the entire process of block B2 propagating from node 6 to the entire network. Each solid arrow in the figure is marked with two pairs of positive numbers. The first pair identifies the source miner and target miner IDs of a certain propagation process, and the second pair identifies the start and end rounds of a certain propagation process.</p>"},{"location":"en/#Simulator-Input-Parameters","title":"Simulator Input Parameters","text":"<p>The input parameters of the simulator can be specified in two ways: command line and configuration file. Generally, you can modify the configuration file system_config.ini that comes with ChainXim to change the simulation parameters, or you can specify individual simulation parameters through the command line. The command line supports fewer parameters than the configuration file, but once specified, they take precedence over the configuration file. You can view the command line help information by using the command <code>python main.py --help</code>.</p>"},{"location":"en/#EnvironmentSettings","title":"EnvironmentSettings","text":"<p>Configure the simulation environment</p> system_config Command Line Example Type Description total_round <code>--total_round 50</code> int Total number of simulation rounds process_bar_type <code>--process_bar_type round</code> str Progress bar display style (round or height) miner_num <code>--miner_num 80</code> int Total number of miners in the network blocksize <code>--blocksize 8</code> float Block size, in MB consensus_type <code>--consensus_type consensus.PoW</code> str Consensus type, currently only <code>consensus.PoW</code> is available network_type <code>--network_type network.SynchronousNetwork</code> str Network type, should be one of <code>network.SynchronousNetwork</code>,<code>network.PropVecNetwork</code>, <code>network.BoundedDelayNetwork</code>,<code>network.TopologyNetwork</code>, <code>network.AdHocNetwork</code> show_fig <code>--show_fig</code> bool Whether to display images during the simulation compact_outputfile <code>--no_compact_outputfile</code> bool Whether to simplify log and result output to save disk spaceSet to False via <code>--no_compact_outputfile</code>"},{"location":"en/#ConsensusSettings","title":"ConsensusSettings","text":"<p>Configure consensus protocol parameters</p> system_config Command Line Example Type Description q_ave <code>--q_ave 5</code> int Average hash rate of a single miner, i.e., the number of hash calculations per round q_distr <code>--q_distr equal</code> str Hash rate distribution modeequal: All miners have the same hash rate;rand: Hash rate follows a Gaussian distribution target None str PoW target value in hexadecimal format None <code>--difficulty 12</code> int PoW difficulty represented by the length of the prefix zeros in the binary PoW target value,converted to the PoW target value in the main program"},{"location":"en/#AttackModeSettings","title":"AttackModeSettings","text":"<p>Configure attack mode parameters</p> system_config Command Line Example Type Description t <code>-t 0</code> int Total number of attackers adversary_ids None tuple[int] Attacker IDs e.g.(1,3,5) attack_execute_type <code>--attack_execute_type execute_sample1</code> str Attack typeexecute_sample0: Hash power attack;execute_sample1: Selfish mining"},{"location":"en/#DeterPropNetworkSettings","title":"DeterPropNetworkSettings","text":"<p>Configure DeterPropNetwork parameters</p> system_config Type Description prop_vector list[float] Propagation vector (in list form) e.g.[0.1, 0.2, 0.4, 0.6, 1.0] where the elements represent the proportion of miners receiving the message after (1,2,3...) rounds, the last element must be 1.0"},{"location":"en/#StochPropNetworkSettings","title":"StochPropNetworkSettings","text":"<p>Configure StochPropNetwork parameters</p> system_config Command Line Example Type Description rcvprob_start <code>--rcvprob_start 0.001</code> float Initial message reception probability rcvprob_inc <code>--rcvprob_inc 0.001</code> float Incremental message reception probability per round block_prop_times_statistic None list[float] Block propagation times corresponding to the proportion of receiving miners"},{"location":"en/#TopologyNetworkSettings","title":"TopologyNetworkSettings","text":"<p>Configure TopologyNetwork parameters</p> system_config Command Line Example Type Description init_mode <code>--init_mode rand</code> str Network initialization method, 'adj' adjacency matrix, 'coo' sparse adjacency matrix, 'rand' randomly generated. 'adj' and 'coo' network topologies are given via csv files. 'rand' requires specifying bandwidth, degree, etc. bandwidth_honest <code>--bandwidth_honest 0.5</code> float Network bandwidth between honest miners and between honest miners and attackers, in MB/round bandwidth_adv <code>--bandwidth_adv 5</code> float Bandwidth between attackers, in MB/round rand_mode <code>--rand_mode homogeneous</code> str Random network topology generation mode'homogeneous': Generate network based on ave_degree and try to keep each node's degree the same'binomial': Use Erd\u0151s-R\u00e9nyi algorithm, randomly establish links between nodes with probability <code>ave_degree/(miner_num-1)</code> ave_degree <code>--ave_degree 8</code> float When the network generation method is 'rand', set the topology average degree stat_prop_times None list[float] Block propagation times corresponding to the proportion of receiving miners outage_prob <code>--outage_prob 0.1</code> float Probability of each link outage per round, messages will be retransmitted in the next round if the link is down dynamic <code>--dynamic</code> bool Whether to make the network dynamic, if dynamic, links between nodes will be added or deleted with a certain probability avg_tp_change_interval None float When dynamic=true, set the average round interval for topology changes edge_remove_prob None float When dynamic=true, set the probability of removing existing edges during topology changes edge_add_prob None float When dynamic=true, set the probability of establishing new connections for non-existing edges during topology changes max_allowed_partitions None int When dynamic=true, set the maximum number of partitions allowed during topology changes save_routing_graph <code>--save_routing_graph</code> bool Whether to save the routing propagation graph of each message, recommended to turn off when the network scale is large show_label <code>--show_label</code> bool Whether to display labels on the topology or routing propagation graph, recommended to turn off when the network scale is large"},{"location":"en/#AdHocNetworkSettings","title":"AdHocNetworkSettings","text":"<p>Configure AdHocNetwork parameters</p> system_config Command Line Example Type Description init_mode <code>--init_mode rand</code> str Network initialization method, only 'rand' is valid for AdhocNetwork ave_degree <code>--ave_degree 3</code> float When the network generation method is 'rand', set the topology average degree segment_size <code>--ave_degree 8</code> float Message segment size; divide the complete message into several segments, each segment takes one round to propagate region_width <code>--region_width 100</code> float Width of the square region, nodes perform Gaussian random walks within this region comm_range <code>--comm_range 30</code> float Node communication range, automatically establish connections between nodes within the communication range move_variance <code>--move_variance 5</code> float Variance of the xy coordinate movement distance when nodes perform Gaussian random walks outage_prob <code>--outage_prob 0.1</code> float Probability of each link outage per round, messages will be retransmitted in the next round if the link is down stat_prop_times None list[float] Block propagation times corresponding to the proportion of receiving miners"},{"location":"en/#Simulator-Output","title":"Simulator Output","text":"<p>After the simulation ends, the global chain statistics during the simulation will be printed in the terminal. Example: <pre><code>162 blocks are generated in 26682 rounds, in which 61 are stale blocks.\nAverage chain growth in honest miners' chain: 100.013\nNumber of Forks: 54\nFork rate: 0.53465347\nStale rate: 0.37654321\nAverage block time (main chain): 264.17821782 rounds/block\nBlock throughput (main chain): 0.00378532 blocks/round\nThroughput in MB (main chain): 0.12113035 MB/round\nAverage block time (total): 164.7037037 rounds/block\nBlock throughput (total): 0.00607151 blocks/round\nThroughput in MB (total): 0.19428828 MB/round\n\n\nChain_Quality Property: {'Honest Block': 102, 'Adversary Block': 0}\nRatio of blocks contributed by malicious players: 0.0\nUpper Bound t/(n-t): 0.0\nBlock propagation times: {0.1: 60.553, 0.2: 77.534, 0.4: 105.994, 0.5: 109.826, 0.6: 113.23, 0.7: 116.522, 0.8: 120.658, 0.9: 126.447, 1.0: 148.327}\n</code></pre> The meaning of the simulation results displayed in the terminal is as follows:</p> Output Item Explanation Number of stale blocks Number of stale blocks (blocks not in the main chain) Average chain growth in honest miners' chain Average chain growth of honest nodes Number of Forks Number of forks (only counting the main chain) Fork rate Fork rate = number of heights with forks on the main chain / main chain height Stale rate Stale rate = number of stale blocks / total number of blocks Average block time (main chain) Average block time of the main chain = total rounds / main chain length (rounds/block) Block throughput (main chain) Block throughput of the main chain = main chain length / total rounds Throughput in MB (main chain) Block throughput of the main chain * block size Average block time (total) Total average block time = total rounds / total number of blocks generated Block throughput (total) Total block throughput = total number of blocks generated / total rounds Throughput in MB (total) = Total block throughput * block size common prefix pdf PDF obtained from common prefix statistics (statistics of the difference between the common prefix of all honest nodes' chains and the longest chain length at the end of each round, resulting in a probability density distribution) Consistency rate Consistency metric = common_prefix_pdf[0] Chain_Quality Property Total number of blocks generated by honest and malicious miners Ratio of blocks contributed by malicious players Proportion of blocks generated by malicious nodes Upper Bound t/(n-t) Upper bound of the proportion of blocks generated by malicious nodes (n is the total number of miners, t is the number of malicious miners) Block propagation times Block propagation times (distribution) <p>During the simulation, results, logs, and images are saved in the Results/\\&lt;date-time&gt;/ directory, where date-time is the date and time when the simulation starts. The typical file structure of this directory is as follows: <pre><code>Results/20230819-232107/\n\u251c\u2500\u2500 Attack_log.txt\n\u251c\u2500\u2500 Attack_result.txt\n\u251c\u2500\u2500 Chain Data\n\u2502   \u251c\u2500\u2500 chain_data.txt\n\u2502   \u251c\u2500\u2500 chain_data0.txt\n\u2502   \u251c\u2500\u2500 chain_data1.txt\n\u2502   \u251c\u2500\u2500 ......\n\u251c\u2500\u2500 Network Results\n\u2502   \u251c\u2500\u2500 ......\n\u251c\u2500\u2500 block interval distribution.svg\n\u251c\u2500\u2500 blockchain visualisation.svg\n\u251c\u2500\u2500 blockchain_visualization\n\u2502   \u251c\u2500\u2500 Blockchain Structure.gv\n\u2502   \u2514\u2500\u2500 Blockchain Structure.gv.svg\n\u251c\u2500\u2500 evaluation results.txt\n\u251c\u2500\u2500 events.log\n\u2514\u2500\u2500 parameters.txt\n</code></pre> The meaning of the output simulation result files is as follows:</p> File or Directory Description Attack_log.txt Attack log Attack_result.txt Attack results Chain Data/ Complete data of the global chain and local chains of each miner Network Results/ Network transmission results, such as propagation process (when each miner receives a certain block), network topology, routing process diagrams, etc. block interval distribution.svg Block interval distribution blockchain visualisation.svg Blockchain visualization blockchain_visualization/ Blockchain visualization using Graphviz evaluation results.txt Evaluation results events.log Simulation process log, recording important events such as block generation, network access, etc. parameters.txt Simulation environment parameters"},{"location":"en/#Simulation-Examples","title":"Simulation Examples","text":""},{"location":"en/#Relationship-between-the-Number-of-Miners-and-Block-Time-in-Synchronous-Network","title":"Relationship between the Number of Miners and Block Time in Synchronous Network","text":"<p>Synchronous Network: X-axis represents the number of miners, Y-axis represents the block time.</p> <p>Parameter settings:</p> <ul> <li> <p>Simulation rounds: 200000 rounds * 1 time</p> </li> <li> <p>Number of miners: 10-80</p> </li> <li> <p>Consensus type: PoW</p> </li> <li> <p>Difficulty: 0000FF...</p> </li> <li> <p>q_ave = 10</p> </li> <li> <p>Network parameters: SynchronousNetwork</p> </li> </ul> <p></p>"},{"location":"en/#Double-Spending-Attack-Success-Rate","title":"Double Spending Attack Success Rate","text":"<p>Parameter settings:</p> <ul> <li> <p>Simulation rounds: 1200000 rounds * 1 time</p> </li> <li> <p>Number of miners: 40</p> </li> <li> <p>Consensus type: PoW</p> </li> <li> <p>Difficulty: 000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>Network parameters: default for all four network types</p> </li> </ul> <p></p> <p>Advanced Performance Display</p>"},{"location":"en/#Fork-Rate-Stale-Block-Rate-Throughput-and-Consistency-under-Different-Maximum-Delays-in-Various-Networks","title":"Fork Rate, Stale Block Rate, Throughput, and Consistency under Different Maximum Delays in Various Networks","text":"<ul> <li>Rounds: 100000</li> <li>Number of miners: 100</li> <li>Consensus type: PoW</li> <li>q_ave: 10</li> <li>Difficulty: 0002FF...</li> <li>Network types: SynchronousNetwork and BoundedDelayNetwork</li> <li>Network parameters: rcvprob_start=rcvprob_inc=1/maximum rounds</li> </ul> <p>Fork rate/Stale block rate and throughput variation with maximum propagation delay</p> <p></p> <p>Consistency metrics variation with maximum propagation delay</p> <p></p> <p>In the figure, Common Prefix[0], [1], [2] represent the first three components of the common prefix PDF, where the ordinal number represents the difference between the common prefix and the main chain length (see the \"Simulator Output\" section for details).</p>"},{"location":"en/#Common-Prefix-Property-of-Blockchain-under-Topology-Network","title":"Common Prefix Property of Blockchain under Topology Network","text":"<ul> <li>Rounds: 16189</li> <li>Number of miners: 10</li> <li>Consensus type: PoW</li> <li>Difficulty: 000FFF...</li> <li>Network type: TopologyNetwork</li> <li>Network parameters: gen_net_approach=adj; bandwidth_honest=0.5</li> </ul> <p>At the end of each round, the height difference of the local chains of all nodes relative to the common prefix and its impact on the Common Prefix PDF are shown in the figure below. The time axis below is the round in which the chain tail switch event occurred, the upper x-axis is the block height/common prefix followed by the block length (suffix length), and the y-axis is the miner ID. The heat value in the figure indicates the cumulative number of times each miner's local chain tail reaches the suffix length relative to the common prefix. BXX in the figure refers to the block number, representing the state of the miner's local chain tail in the current round, and the lower x-axis indicates the height of these blocks. Click Play to start the animation, where you can observe the block being generated to extend the common prefix, then propagating to other miners, and finally causing the common prefix height to increase by 1.</p>"},{"location":"en/#Fork-Rate-Stale-Block-Rate-Throughput-and-Consistency-under-Different-Block-Sizes","title":"Fork Rate, Stale Block Rate, Throughput, and Consistency under Different Block Sizes","text":"<ul> <li>Rounds: 500000</li> <li>Number of repetitions per point on the curve: 5</li> <li>Number of miners: 20</li> <li>Consensus type: PoW</li> <li>Difficulty: 0000FF...</li> <li>Network type: TopologyNetwork</li> <li>Network parameters: TTL=500; gen_net_approach=rand; ave_degree=8; bandwidth_honest=0.5; bandwidth_adv=5; block_prop_times_statistic=[0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]</li> </ul> <p>Fork rate/Stale block rate and throughput variation with block size </p> <p>Consistency metrics variation with block size </p> <p>In the figure, Common Prefix[0], [1], [2] represent the first three components of the common prefix PDF, where the ordinal number represents the difference between the common prefix and the main chain length (see the \"Simulator Output\" section for details).</p>"},{"location":"en/#Variation-of-Propagation-Delay-with-Block-Size","title":"Variation of Propagation Delay with Block Size","text":"<ul> <li>Rounds: 100000</li> <li>Number of miners: 100</li> <li>Consensus type: PoW</li> <li>q_ave: 10</li> <li>Difficulty: 00008F...</li> <li>Network type: TopologyNetwork</li> <li>Network parameters: TTL=500; gen_net_approach=rand; ave_degree=8; bandwidth_honest=0.5; bandwidth_adv=5; block_prop_times_statistic=[0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]</li> </ul> <p>Variation of propagation delay and 90% effective throughput with block size</p> <p></p> <p>Note: X% effective throughput = block size / (X% block propagation delay)</p>"},{"location":"en/#Attackers-Block-Proportion-under-Different-Attack-Vectors","title":"Attacker's Block Proportion under Different Attack Vectors","text":""},{"location":"en/#1-Hash-Power-Attack-honest-mining","title":"1. Hash Power Attack (honest mining)","text":""},{"location":"en/#Impact-of-Four-Different-Networks-on-Hash-Power-Attack","title":"Impact of Four Different Networks on Hash Power Attack","text":"<p>Definition of a successful attack: The attacker produces a block and is accepted by the network.</p> <p>Parameter settings:</p> <ul> <li> <p>Rounds: 100000</p> </li> <li> <p>Repetitions per point on the curve: 20</p> </li> <li> <p>Number of miners: 40</p> </li> <li> <p>Consensus type: PoW</p> </li> <li> <p>Difficulty: 000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>Network parameters: default for all four network types</p> </li> </ul>"},{"location":"en/#2-Selfish-Mining-Attack","title":"2. Selfish Mining Attack","text":""},{"location":"en/#Impact-of-Four-Different-Networks-on-Selfish-Mining-Attack","title":"Impact of Four Different Networks on Selfish Mining Attack","text":"<p>The vertical axis represents the chain quality metric, i.e., the proportion of blocks produced by the attacker in the main chain.</p> <p>Parameter settings:</p> <ul> <li> <p>Simulation rounds: 100000 rounds * 20 times</p> </li> <li> <p>Number of miners: 40</p> </li> <li> <p>Consensus type: PoW</p> </li> <li> <p>Difficulty: 000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>Network parameters: default for all four network types</p> </li> </ul>"},{"location":"en/#Impact-of-Different-Miner-Chain-Selection-Strategies-on-Selfish-Mining-Attack","title":"Impact of Different Miner Chain Selection Strategies on Selfish Mining Attack","text":"<p>The theoretical region in the figure is obtained by the following formula:</p> \\[ R=\\frac{\\alpha(1-\\alpha)^{2}(4\\alpha+\\gamma(1-2\\alpha))-\\alpha^{3}}{1-\\alpha(1+(2-\\alpha)\\alpha)} \\] <p>\\(\\alpha\\) is the proportion of the attacker's hash power to the total network, \\(0\\leqslant\\alpha\\leqslant\\frac{1}{2}\\). \\(\\gamma\\) is the proportion of honest miners who choose to mine on the attack chain when there is a fork between the honest chain (the latest block is produced by an honest node) and the attack chain (all blocks from a certain block to the latest block are produced by the attacker), \\(0\\leqslant\\gamma\\leqslant1\\). Note: The chain selection strategy is an internal test functionality and is not yet available. However, this simulator follows the mining strategy of \\(\\gamma=0\\), which means all honest nodes default to continue mining on the honest chain branch. Therefore, users can use the following theoretical curve formula for verification.</p> \\[ R=\\frac{4\\alpha^{2}(1-\\alpha)^{2}-\\alpha^{3}}{1-\\alpha(1+(2-\\alpha)\\alpha)} \\] <p>Parameter settings:</p> <ul> <li> <p>Simulation rounds: 100000 rounds * 20 times</p> </li> <li> <p>Number of miners: 40</p> </li> <li> <p>Consensus type: PoW</p> </li> <li> <p>Difficulty: 000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>Network type: SynchronousNetwork</p> </li> </ul>"},{"location":"en/#3-Double-Spending-Attack","title":"3. Double Spending Attack","text":""},{"location":"en/#Impact-of-Different-Networks-on-Double-Spending-Attack","title":"Impact of Different Networks on Double Spending Attack","text":"<p>Parameter settings:</p> <ul> <li> <p>Simulation rounds: 1200000 rounds * 1 time</p> </li> <li> <p>Number of miners: 40</p> </li> <li> <p>Consensus type: PoW</p> </li> <li> <p>Difficulty: 000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>Network parameters: default for all four network types</p> </li> </ul>"},{"location":"en/#Impact-of-Different-Strategies-on-Double-Spending-Attack-and-Theoretical-Comparison","title":"Impact of Different Strategies on Double Spending Attack and Theoretical Comparison","text":"<p>The theoretical curve in the figure is obtained by the following formula:</p> \\[P(N,N_g,\\beta)=1-\\sum_{n=0}^{N}\\begin{pmatrix}n+N-1\\\\ n \\end{pmatrix}\\left(\\frac{1}{1+\\beta}\\right)^{N}\\left(\\frac{\\beta}{1+\\beta}\\right)^{n}\\left(\\frac{1-\\beta^{N-n+1}}{1-\\beta^{Ng+1}}\\right)\\] <p>\\(N\\) is the number of blocks the attacker waits for confirmation, i.e., the attacker will wait for the honest chain to grow by \\(N\\) blocks before deciding whether to publish. \\(N_g\\) indicates that the attacker abandons the current attack when it is \\(N_g\\) blocks behind the honest chain. \\(\\beta\\) is the ratio of the attacker's hash power to that of the honest miners, \\(0\\leqslant\\beta\\leqslant1\\).</p> <p>Parameter settings:</p> <ul> <li> <p>Simulation rounds: 3000000 rounds * 1 time</p> </li> <li> <p>Number of miners: 40</p> </li> <li> <p>Consensus type: PoW</p> </li> <li> <p>Difficulty: 000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>Network type: SynchronousNetwork</p> </li> </ul>"},{"location":"en/#4-Eclipse-Attack","title":"4. Eclipse Attack","text":""},{"location":"en/#Double-Spending-Attack-under-Eclipse-Attack","title":"Double Spending Attack under Eclipse Attack","text":"<p>The green curve Theory Shift 10% is obtained by shifting the Theory curve to the left by one unit.</p> <p></p> <p>Parameter settings:</p> <ul> <li> <p>Simulation rounds: 3000000 rounds * 1 time</p> </li> <li> <p>Number of miners: 20</p> </li> <li> <p>Consensus type: PoW</p> </li> <li> <p>Difficulty: 000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>Network type: TopologyNetwork</p> </li> <li> <p>Network parameters: The Full connect topology, Random connect topology, Eclipse 10% miners, and Eclipse 20% miners in the figure use fixed adjacency matrices to generate the topology network. Their adjacency matrices are \\(TP_F\\), \\(TP_R\\), \\(TP_1\\), and \\(TP_2\\), respectively, and other settings are default.</p> <ul> <li>The \\(TP_F\\) matrix has all elements as 1 except for the diagonal elements which are 0.</li> <li>The \\(TP_R\\) matrix is a randomly generated topology network.</li> <li>The \\(TP_1\\) matrix is as shown below (isolated nodes are 18, 19):     </li> <li>The \\(TP_2\\) matrix is as shown below (isolated nodes are 16, 17, 18, 19):     </li> </ul> </li> </ul> <p>Note: When setting attackers, please avoid isolated nodes and set them manually.</p>"},{"location":"en/#Developers-Document","title":"Developer's Document","text":"<p>See developer-guide for more details</p>"},{"location":"en/#Contributors","title":"Contributors","text":"<p>\u66f9\u82c7\u676d Weihang Cao</p> <ul> <li>Project leader, overall framework, coding for the consensus layer and the evaluation layer</li> </ul> <p>\u9648\u70b3\u6587 Bingwen Chen</p> <ul> <li>Coding for the network layer</li> </ul> <p>\u9648\u9633 Yang Chen</p> <ul> <li>Coding for the attack layer</li> </ul> <p>\u5d14\u81ea\u7fd4 Zixiang Cui</p> <ul> <li>Optimization of the consensus layer and the underlying frameworks</li> </ul> <p>\u9648\u559c\u5e74 Xinian Chen</p> <ul> <li>Testing and optimization</li> </ul> <p>\u51cc\u6615\u5f64 Xintong Ling</p> <ul> <li>Advisor</li> </ul>"},{"location":"en/developer-guide/","title":"ChainXim Developer Guide","text":""},{"location":"en/developer-guide/#Framework","title":"Framework","text":"<p>ChainXim is mainly composed of six components: Environment, Miner, Adversary, Network, Consensus, and Blockchain. Among them, the three major components, Consensus, Adversary, and Network, are configurable and replaceable to adapt to different types of consensus protocols, attack vectors, and network models. The relationships between the six abstract components are shown in the figure below:</p> <p></p> <p>Each abstract component is implemented by one or more corresponding classes. The Consensus class and the Network class corresponding to Consensus and Network are only abstract classes, and functional classes need to be derived to implement various consensus protocols and network models.</p> <p>Currently implemented consensus protocols (all options available for the consensus_type configuration):</p> Consensus Class (Derived from Consensus) Description consensus.PoW Proof of Work <p>Currently implemented network models (all options available for the network_type configuration):</p> Network Class (Derived from Network) Description network.SynchronousNetwork Synchronous Network Model network.DeterPropNetwork Network Model Based on Propagation Vector network.StochPropNetwork Network Model with Bounded Delay and Increasing Receiving Probability with Rounds network.TopologyNetwork Complex network model, the topology can be randomly generated. <p>Environment is the core of the simulator. Users execute the main program in main.py to start the simulation. The main program initializes the Environment object according to the simulation parameters, calls <code>exec</code> to start the simulation loop, and calls <code>view_and_write</code> to generate the simulation results and write them to the Results folder after the simulation ends.</p> <p>ChainXim discretizes time, abstracting it into \"rounds\" to simulate the behavior of each node in units of rounds. Each round sequentially activates miners to perform consensus operations. After all nodes have been activated once, the <code>diffuse</code> method in the network class is called to transmit messages between miner nodes. (See Environment &amp; Model Assumptions section for details)</p>"},{"location":"en/developer-guide/#Environment--Model-Assumptions","title":"Environment &amp; Model Assumptions","text":"<p>The Environment component is the cornerstone of the ChainXim program, supporting the architecture of the simulator system model to interface with the other five major components. It also defines some key parameters in the simulator and encapsulates some functions needed by the other components of the simulator. To facilitate understanding of this part, the model assumptions of ChainXim will be introduced first.</p>"},{"location":"en/developer-guide/#Model-Assumptions","title":"Model Assumptions","text":"<p>The system model design of ChainXim mainly refers to the following paper:</p> <ul> <li>J. A. Garay, A. Kiayias and N. Leonardos, \"The bitcoin backbone protocol: Analysis and applications\", Eurocrypt, 2015. https://eprint.iacr.org/2014/765.pdf</li> </ul> <p>ChainXim divides continuous time into discrete rounds, and all nodes in the network (including honest miners and dishonest attackers) will perform a certain number of operations in each round to compete for the accounting rights and generate and propagate new blocks. The total number of miners in the network is defined as \\(n\\), among which \\(t\\) miners belong to dishonest attackers. In each round, all miners are awakened in sequence according to their numbers and take actions based on their identities. Honest miners will strictly follow the consensus protocol to generate blocks; attackers will choose to follow the protocol or launch attacks based on the actual situation. Note that in each round, the attack module will only be triggered once, and each trigger will perform a complete attack action. In the current version, attackers will be randomly triggered when it is the turn of an attacker in each round. Although the order of awakening different miners is different, there is no actual order within the same round.</p> <p>To simulate the specific operations of the above parties in the real blockchain system, ChainXim refers to two important methods proposed in the paper, namely the Random Oracle and Diffuse methods, which are defined in ChainXim as follows:</p> <ul> <li>Random Oracle: Taking the PoW consensus as an example, each miner can perform up to \\(q\\) hash actions in each round (the \\(q\\) value may be different for different miners), i.e., \\(q\\) opportunities to perform hash calculations. Each miner will perform \\(q\\) random oracle operations, i.e., input a random number into the hash function and verify whether the result is less than the given difficulty value. If the miner successfully finds a result lower than the target value, it is considered that a block has been successfully generated. Blocks generated by different miners in the same round are considered to be generated simultaneously.</li> <li>Diffuse: When a miner generates a new block, it will upload this block to the network, and the network layer will be responsible for message propagation. The propagation logic will vary depending on the configuration of the network layer. In addition, attackers may choose not to upload the blocks they mined in the current round. Only blocks uploaded to the network layer will be propagated through this method. In the ChainXim model, it is assumed that miners controlled by attackers have a dedicated communication channel independent of the blockchain system, i.e., once any miner belonging to the attackers receives a block, all miners under the attacker's control will receive the block in the next round.</li> </ul> <p>Note that the above Diffuse method is implemented in the Network component, while the Random Oracle method is implemented in the Consensus component. The Random Oracle model was initially proposed for the PoW consensus protocol in Bitcoin. To make the simulator compatible with other consensus protocols, such as PBFT, which is a protocol based on interaction, ChainXim will consider overloading this method in the Consensus component in the future. The exec function in the Environment is set to complete the above two methods at once: In each round, all miners will be awakened in sequence and perform the Random Oracle method: if the miner is honest, the exec function will call the Consensus component to perform related operations; if the attacker is activated, the Attacker component will be called to perform related operations (the Attacker component will only be called once in each round). When all miners have completed their actions, i.e., the round ends, the exec function will execute the Diffuse method in the Network component to propagate blocks in the network. A specific example is shown in the figure below:</p> <p></p> <p>In this example, \\(n=4\\), \\(t=1\\). When the k-th round (Round \\(k\\)) begins, the four miners will be awakened in sequence according to their numbers and complete their \\(q\\) actions. Among them, only Miner 2 successfully obtained the accounting rights and propagated the generated block (Diffuse method). Due to different propagation delays, Miner 1 and Miner 3 successfully received the block in round k+1, while Miner 4 received the block in round k+2. No miner completed block generation in round k+1. In round k+2, both Miner 1 and Miner 4 completed block generation, but Miner 4, being an attacker, adopted a selfish mining attack strategy, placing the block generated by the Random Oracle on a private chain and not propagating it to other miners during the Diffuse method. In round k+3, only Miner 4 completed block generation. At this point, in its view, its private chain is longer than the main chain, so it propagates the private chain to other miners through the Diffuse method, causing a fork in the blockchain. In the view of miners who received the private chain, the attacker's chain is the longest valid chain. In round k+4, if Miner 1 or Miner 2 did not receive the private chain and continued mining on the honest main chain, their interests might be harmed.</p> <p>In summary, ChainXim effectively abstracts the generation and propagation of blocks in the blockchain network using discrete rounds and limited actions.</p>"},{"location":"en/developer-guide/#Environment","title":"Environment","text":"<p>Overall, the Environment component completes the construction of the overall model. The initialization function sets the basic parameters according to the input parameters, calls other components for their respective initialization, sets \\(n\\) miners, selects \\(t\\) attackers, configures the global blockchain, network components, attack components, etc., for subsequent operation and evaluation. The main functions in the Environment component and their respective parameters are shown in the table below:</p> Function Parameters Description select_adversary_random - Randomly select a certain number of miners as attackers select_adversary *Miner_ID:tuple Set the corresponding miners as attackers by specifying their IDs envir_create_global_chain - Create the global blockchain in the environment attack_excute round:int Execute the attack type defined in the attack module exec num_rounds:int, max_height:int, process_bar_type:str Execute the simulation for the specified number of rounds or height; num_rounds sets the total number of rounds, max_height sets the termination height assess_common_prefix - Calculate and evaluate the common prefix property of the blockchain assess_common_prefix_k - Optimized method for calculating and evaluating the common prefix view - Output the simulation results in the terminal, including the generated blockchain structure diagram, throughput, growth rate (reflecting chain growth), fork rate, and evaluation of common prefix and chain quality view_and_write - Output the simulation results and save them in a txt file process_bar - Display the current simulation progress, outputting a real-time progress bar and percentage in the terminal <p>In the table above, envir_create_global_chain initializes and generates a global blockchain. After that, this chain will serve as the global blockchain tree and the global longest valid chain from a global view. The main program initializes the Environment object according to the simulation parameters, calls <code>exec</code> to start the simulation loop, and implements the random oracle method and diffusion method described in the paper. For attackers, the corresponding attacking operations needs to be executed through <code>attack_excute</code>. After the simulation ends, <code>view_and_write</code> is called to collect and output the simulation results.</p>"},{"location":"en/developer-guide/#Miner","title":"Miner","text":"<p>The Miner component defines the miner class, which is used to create miners and perform related operations. The functions defined in it are shown in the table below:</p> Function Parameters and Types Return Type Description join_network network:Network - Miners join the network during network initialization and initialize the network interface forward msgs:list[Message], msg_source_type:str, forward_strategy:str, spec_targets:list, syncLocalChain:bool - Forward messages to other nodes through the network interface layer. <code>msgs</code> is the list of messages to be forwarded; <code>msg_source_type</code> is the message source type, <code>SELF_GEN_MSG</code> indicates generated by this miner, <code>OUTER_RCV_MSG</code> indicates received from the network; <code>forward_strategy</code> is the message forwarding strategy; <code>spec_targets</code> is the list of target nodes to forward to if <code>forward_strategy</code> is <code>SPECIFIC</code>; <code>syncLocalChain</code> indicates whether to synchronize the local chain with neighbors, preferably when a new block is generated. set_adversary isAdversary:bool - Set whether each miner is an attacker receive msg:message bool Process received messages, actually calling the <code>receive</code> method in the consensus component launch_consensus input:any Block|None, bool Start the consensus process, actually calling the <code>consensus_process</code> method in the consensus component, returning new messages <code>new_msg</code> (None if no new messages) and a flag <code>msg_available</code> indicating whether there are new messages BackboneProtocol round:int Block|None Operations performed by honest miners each round. First, receive information from the network (blockchain update), then call the mining function to try to generate a block. If the blockchain is updated (received a new block or generated a new block), return the new message to the environment component, otherwise return empty <p>Considering the scalability of the simulator, the functions defined by the miner component itself are actually very few. Most of the functions are defined in the consensus component and the environment component. This component actually serves as a bridge connecting various components. Miners can only interact with the network through the network interface <code>self.NIC:NetworkInterface</code>. The network interface calls the <code>receive</code> function to pass messages sent by other nodes to the current node, and the current node uses the <code>forward</code> function to send messages to the network interface layer, which then sends the messages to other nodes through the network layer.</p>"},{"location":"en/developer-guide/#Chain-Data","title":"Chain Data","text":"<p>This section introduces the basic data types in ChainXim. All block data generated during the simulation is described by data.BlockHead, data.Block, and data.Chain. The following figure shows the data structure of the blockchain in ChainXim. All Blocks are organized in a multi-way tree, where each pair of parent and child nodes are bidirectionally linked through the parentblock and next attributes in Block. The root and end nodes of the tree are recorded in Chain.head and Chain.last_block, respectively. The Chain object in the figure contains a blockchain with a height of 2. Except for the genesis block <code>Block 0</code>, there are three blocks, with a fork occurring at block height 1. <code>Block 0 - Block 1 - Block 3</code> forms the main chain, and <code>Block 3</code> is the tail of the main chain.</p> <p></p>"},{"location":"en/developer-guide/#Message","title":"Message","text":"<p>Message is the base class for all messages generated by miners during mining. Currently, the main message is the Block. The attributes of Message currently only include the message length size, in MB.</p>"},{"location":"en/developer-guide/#BlockHead","title":"BlockHead","text":"<p>BlockHead is used to define the data in the block header. data.BlockHead is an abstract base class, and its calculate_blockhash is an abstract method that needs to be defined in the consensus class by creating a new BlockHead and overriding calculate_blockhash. BlockHead only contains the attributes listed in the table below:</p> Attribute Type Description prehash bytes Hash of the previous block timestamp int Timestamp when the block was created content Any Data carried in the block, generally transaction information or Merkle Root in actual systems miner int ID of the miner or attacker who generated the block <p>Note: Since this simulator focuses more on the propagation of blocks in the network, the data stored in the blockchain (transactions, smart contracts, etc.) is abstracted using the content attribute.</p>"},{"location":"en/developer-guide/#Block","title":"Block","text":"<p>Block is used to define the data in the block. In addition to the block header blockhead, it also contains the attributes listed in the table below:</p> Attribute Type Description name str The friendly name of the block, formatted as the letter B + a sequence number indicating the order of block generation height int Block height blockhash bytes The block hash automatically calculated when the block is constructed isAdversaryBlock bool Whether the block is generated by an attacker isGenesis bool Whether it is a genesis block next list[Block] A list of references to child blocks parentblock Block Reference to the parent block <p>Note that the blockhead attribute is read-only and cannot be modified after the Block object is constructed. In addition, the Block class has two auxiliary methods:</p> Method Input Parameters and Types Return Type Description get_height - int Returns Block.height calculate_blockhash - bytes Calls blockhead.calculate_blockhash, saves the hash value to blockhash, and returns the value of blockhash <p>Finally, to enable the Block object to be transmitted in the Network, the Block class is derived from the Message class.</p>"},{"location":"en/developer-guide/#Chain","title":"Chain","text":"<p>Chain is mainly used to store the root and end nodes of the blockchain and defines a series of functions needed to operate the blockchain. Chain contains the attributes listed in the table below:</p> Attribute Description head Stores the genesis block of the blockchain last_block Reference to the end block of the main chain, which is the longest chain in the multi-way tree for PoW systems miner_id The ID of the miner or attacker maintaining the blockchain, or None for the global blockchain <p>The Chain class has various methods that can be used to add new blocks, merge chains, search for blocks, visualize the blockchain, save blockchain data, and more, as shown in the table below:</p> Method Input Parameters and Types Return Type Description search_block block: Block Block|None Searches for the target block in the local block tree, returns the block if found, otherwise returns None search_block_by_hash blockhash: bytes Block|None Searches for the target block by hash in the local block tree, returns the block if found, otherwise returns None get_last_block - Block Returns Chain.last_block set_last_block block: Block - Checks if the block is in the chain, then sets the block as last_block add_blocks blocks: Block | list[block], insert_point: Block Block Deep copies the block and adds it to the chain. Blocks can be of type list[Block] or Block, insert_point is the position to insert the block, starting from its back, default is last_block ShowStructure1 - - Prints the entire multi-way tree with head as the root node to stdout ShowStructure miner_num:int - Generates blockchain visualisation.svg, showing the round in which each block was generated and the parent-child relationship ShowStructureWithGraphviz - - Generates a blockchain visualization graph in the blockchain_visualization directory using Graphviz get_block_interval_distribution - - Generates a block interval distribution graph block interval distribution.svg printchain2txt chain_data_url:int - Saves the structure and information of all blocks in the chain to chain_data_url, default is 'Chain Data/chain_data.txt' CalculateStatistics rounds:int dict Generates blockchain statistics and returns the statistics through a dictionary, rounds is the total number of simulation rounds"},{"location":"en/developer-guide/#Consensus","title":"Consensus","text":"<p>This section introduces the consensus layer architecture of ChainXim, using Proof of Work (PoW) as an example to explain the implementation of consensus protocols in ChainXim. The Consensus class is an abstract class that describes the basic elements of the consensus layer in ChainXim. To implement a consensus protocol in ChainXim, a new consensus class needs to be extended from the Consensus class. The currently implemented consensus class is PoW. The following diagram shows the class diagram illustrating the relationship between PoW and Consensus.</p> <p></p> <p>Each PoW object contains the following attributes:</p> Attribute Type Description local_chain Chain The local chain, which is the blockchain from the vision of a miner, including the main chain and all forks known to the miner _receive_tape list The receive queue, where blocks are added when they arrive at the miner, and the queue is cleared after the miner's round ends target bytes The target value for the hash calculation problem in PoW, a block is valid only if its hash is less than this target value q int The number of hash calculations a single miner can perform per round <p>The PoW class simulates the block generation and validation behavior in the Proof of Work mechanism through the following methods and resolves forks using the longest chain rule:</p> Method Input Parameters and Types Return Type Description mining_consensus miner_id:int,isadversary:bool,x: Any,round: int Block, bool |None, bool Executed once per round, modifies the nonce q times to calculate the block hash, if the hash is less than the target value, returns the Block object and True, otherwise returns None and False local_state_update - Block, bool Verifies the blocks in _receive_tape one by one, merges the blocks into the local chain, finally determines the main chain using the longest chain rule, returns the tail of the main chain and a flag indicating whether the main chain has been updated if the new block is valid but cannot be merged into the local chain due to missing intermediate blocks, it is placed in the cache valid_chain lastblock: Block bool Verifies the chain ending with lastblock valid_block block: Block bool Verifies whether the block is valid, i.e., whether the block hash is less than the target value"},{"location":"en/developer-guide/#Consensus-Protocol-and-Block","title":"Consensus Protocol and Block","text":"<p>The following diagram shows the inheritance and derivation relationships related to consensus in Chainxim. As shown in the figure, the PoW.BlockHead and PoW.Block classes are subclasses of the Consensus class, derived from data.BlockHead and data.Block. The BlockHead and Block classes of the Consensus class inherit from data.BlockHead and data.Block, respectively, and redefine the initialization interfaces of BlockHead and Block.</p> <p></p> <p>Consensus.BlockHead and Consensus.Block are initialized through the following interfaces.</p> <p><pre><code># consensus/consensus_abc.py\nclass Consensus(metaclass=ABCMeta):\n    class BlockHead(data.BlockHead):\n        def __init__(self, preblock:data.Block=None, timestamp=0, content=0, miner_id=-1):\n\n    class Block(data.Block):\n        def __init__(self, blockhead: data.BlockHead, preblock: data.Block = None, isadversary=False, blocksize_MB=2):\n</code></pre> Compared to data.Blockhead and data.Block, the input parameters have changed to some extent, such as replacing prehash with preblock and removing height and blockhash. This hides the underlying details of data.Block and data.BlockHead. Taking PoW as an example, when constructing a new Block object, you need to derive the block header of the specific consensus protocol, PoW.BlockHead, and then use the block header blockhead, the previous block preblock, and adversary information isadversary to construct PoW.Block (if necessary, you can add some other parameters, such as block size blocksize_MB). The interface is as follows.</p> <pre><code># consensus/pow.py\nclass PoW(Consensus):\n    class BlockHead(Consensus.BlockHead):\n        def __init__(self, preblock: Consensus.Block = None, timestamp=0, content=0, miner_id=-1,target = bytes(),nonce = 0):\n            super().__init__(preblock, timestamp, content, miner_id)\n            self.target = target  # Difficulty target\n            self.nonce = nonce  # Random number\n\n        def calculate_blockhash(self) -&gt; bytes:\n</code></pre> <p>As you can see, when initializing PoW.BlockHead, in addition to the input parameters of Consensus.BlockHead, target and nonce are also added. The input parameters inherited from Consensus.BlockHead also inherit default values, and the newly added parameters also need to specify default values. These default values will be useful when generating the genesis block. In addition, the calculate_blockhash method needs to be rewritten according to the block definitions in various consensus protocols.</p>"},{"location":"en/developer-guide/#Initialization-of-the-Consensus-Class","title":"Initialization of the Consensus Class","text":"<p>When initializing the Consensus class, a miner ID is required as a parameter. However, when initializing a consensus class derived from Consensus, additional consensus parameters are generally needed. These parameters are carried by consensus_param, which is specified when constructing the Environment object (refer to the source code) and passed to the consensus object during the initialization of the Miner class. In PoW, consensus_param includes the following three items:</p> Attribute Type Description target str The hexadecimal target value for the hash calculation problem in PoW. A block is valid only if its hash value is less than this target value. q_ave int The average number of hash calculations a single miner can perform per round. q_distr str The distribution of the number of hash calculations a single miner can perform per round. <p>Note: The parameter q specifies the maximum number of hash calculations each miner can perform per round, determined by q_distr and q_ave. When q_distr is <code>equal</code>, all miners' q equals q_ave; when q_distr is a stringified array, the element at the index corresponding to miner_id in q_distr is chosen as q (i.e., computing power distribution is assigned according to this array).</p> <p>When initializing the consensus class, it is necessary to initialize the local chain Blockchain and generate a genesis block for the local chain. The genesis block is generated by calling the Consensus.create_genesis_block method, with the following interface:</p> <pre><code># consensus/consensus_abc.py\ndef create_genesis_block(self, chain:Chain, blockheadextra:dict = None, blockextra:dict = None):\n</code></pre> <p>The first parameter is an empty chain generated by Chain(), and the latter two dictionary-type parameters can specify additional parameters for the genesis block. The genesis_blockheadextra and genesis_blockextra passed in when constructing the Environment will be passed to this interface. If certain special consensus protocols require specifying parameters for the genesis block, dictionary-type genesis_blockheadextra and genesis_blockextra need to be passed in when constructing the Environment object.</p> <p>When generating the genesis block through create_genesis_block, the method first calls self.BlockHead to generate the block header of the genesis block, updates the block header through blockheadextra, generates the genesis block through self.Block, assigns it to self.head, and finally updates the block through blockextra.</p>"},{"location":"en/developer-guide/#Lifecycle-of-Message-Objects","title":"Lifecycle of Message Objects","text":"<p>In the current architecture, ChainXim theoretically supports Message and its derived objects being generated by the consensus object (consensus), transmitted in the network, and processed by the consensus object of the target miner. This section uses PoW as an example to explain how a typical message object\u2014a block\u2014is generated, transmitted, received, verified, and updated to the target miner's local chain in ChainXim.</p> <p>The following diagram shows the call relationships between different modules and methods in ChainXim:</p> <p></p> <p>Notably, the six bold methods are worth attention. consensus_process calls mining_consensus to generate a block. The new block is added to the miner's forwarding queue via launch_consensus calling forward. When diffuse is called each round, Miner.NIC.nic_forward is called to send the block into the simulated network to start the simulation. When a miner receives a new block, diffuse calls the miner's receive method to receive the block (the received block is temporarily stored in the reception buffer _receive_tape). At the beginning of each round, local_state_update verifies the blocks in _receive_tape one by one and updates them to the target miner's local chain. Note that the specific forwarding and receiving process of messages may vary slightly for different network types (see the Network section for details).</p>"},{"location":"en/developer-guide/#Block-Generation-and-Propagation","title":"Block Generation and Propagation","text":"<p>When PoW.consensus_process is called, it will call PoW.mining_consensus to perform the so-called \"mining\" operation. Since each miner's PoW consensus object only has q chances to calculate the hash in one round, each call to mining_consensus generates a block and produces a PoW.Block object with a certain probability. If mining_consensus returns a Block object, PoW.consensus_process adds the Block object to the local chain and then returns a list containing the Block object.</p> <p>This list will be passed to the main loop in Environment.exec and then enter the network model for propagation through the network class's access_network. Since the Block class is derived from the Message class, its instances can be propagated in the network class.</p>"},{"location":"en/developer-guide/#Block-Reception","title":"Block Reception","text":"<p>The diffuse method of the network class is called once at the end of each round, and each call advances the propagation progress of the packets in the network. After a certain number of rounds, the Block objects in the network model reach other miners, at which point the Miner.receive method is called, which in turn calls the receive_filter method. This method will route the messages based on their type and call receive_block for the received Block objects to add them to _receive_tape.</p>"},{"location":"en/developer-guide/#Updating-the-Local-Chain","title":"Updating the Local Chain","text":"<p>Before BackboneProtocal calls launch_consensus, local_state_update will be called. For PoW consensus, this function's purpose is to verify the blocks cached in _receive_tape one by one and merge them into the local chain. If the merged chain is longer than the current main chain, it will be set as the main chain. The verification process is divided into two steps: the first step verifies the block itself, i.e., whether the block hash is less than the target value; the second step checks whether the parent block of the block can be retrieved from the local chain. If it can be retrieved, the valid new block is added to the local chain; otherwise, it is placed in _block_buffer to wait for its parent block to be received. When the parent block in _block_buffer is processed in local_state_update, synthesis_fork is called to merge the branch after this parent block into the local chain.</p>"},{"location":"en/developer-guide/#How-to-Implement-a-New-Consensus-Protocol","title":"How to Implement a New Consensus Protocol","text":"<pre><code>class MyConsensus(Consensus):\n</code></pre> <p>To implement a consensus protocol in ChainXim, you need to derive a consensus class from the Consensus class (taking MyConsensus as an example in this section) and at least override the following subclasses and functions to implement its basic functionality:</p> <ul> <li>BlockHead: Derived from Consensus.BlockHead, defines the data items related to the consensus protocol in the block header, and needs to override the calculate_blockhash method.</li> <li>mining_consensus: Generates new blocks according to the consensus protocol.</li> <li>local_state_update: Updates the local chain based on the received blocks.</li> <li>valid_chain: Verifies whether the entire blockchain complies with the consensus protocol.</li> <li>valid_block: Verifies whether a single block complies with the consensus protocol.</li> </ul> <p>MyConsensus.BlockHead can refer to the implementation of PoW.BlockHead, reimplementing __init__ and calculate_blockhash to support the new consensus protocol. The Block can directly use the subclass Block inherited from Consensus, or you can derive a new Block subclass in MyConsensus. PoW uses the first method, but if there is data that needs to be passed in the Block but is not directly related to hash calculation, you can use the second method to carry this part of the data through the new Block subclass.</p> <pre><code>    class Block(Consensus.Block):\n        def __init__(self, blockhead: chain.BlockHead, preblock: chain.Block = None, isadversary=False, blocksize_MB=2, other_params):\n            super().__init__(blockhead, preblock, isadversary, blocksize_MB)\n            ...\n</code></pre> <p>The construction process of the Block object can refer to the \"Consensus Protocol and Block\" section.</p> <p>For consensus mechanisms similar to PoW, since they are relatively simple, you only need to consider the block implementation. However, many consensus protocols are far more complex than proof-of-work. This complexity is reflected in the fact that their consensus process needs to generate messages other than blocks and propagate them in the network, and each miner may have other state variables besides the local chain. To implement such a consensus protocol, you need to extend the objects that can be processed by the consensus layer and the network layer. In ChainXim, this can be achieved by deriving the data.Message class, such as adding ExtraMessage as a subclass of MyConsensus:</p> <pre><code>    class ExtraMessage(network.Message):\n        def __init__(self,size,...):\n</code></pre> <p>Then you can directly construct such objects where ExtraMessage is needed, and these objects can be correctly propagated in the network layer. To ensure that ExtraMessage is correctly received by the consensus object, you need to override the receive method in the MyConsensus class and add the receive_extra_message method, as shown in the following example:</p> <pre><code>    def receive(self,msg: Message):\n        if isinstance(msg,Block):\n            return self.receive_block(msg)\n        elif isinstance(msg,ExtraMessage):\n            return self.receive_extra_message(msg)\n    def receive_extra_message(self,extra_msg: ExtraMessage):\n        if extra_msg_not_received_yet:\n            self._receive_tape.append(extra_msg)\n            random.shuffle(self._receive_tape) # Shuffle the receiving order\n            return True\n        else:\n            return False\n</code></pre> <p>If the consensus protocol is similar to the proof-of-work mechanism, you can implement the block generation algorithm in the consensus mechanism by referring to PoW.mining_consensus and using MyConsensus.mining_consensus. The interface is as follows:</p> <pre><code>    def mining_consensus(self, Miner_ID, isadversary, x, round):\n</code></pre> <p>A more specific implementation can refer to PoW.mining_consensus.</p> <p>However, if it is a more complex consensus protocol that needs to generate messages other than blocks in different states, you need to override the Consensus.consensus_process method with MyConsensus.consensus_process to implement a finite state machine, as shown in the example:</p> <pre><code>    def consensus_process(self, Miner_ID, isadversary, x, round):\n        if self.state == STATE1:\n            newblock, mine_success = self.mining_consensus(Miner_ID, isadversary, x, round)\n            if mine_success is True:\n                self.local_chain.add_blocks(newblock)\n                self.local_chain.set_last_block(newblock)\n                self.state = NEXT_STATE\n                return [newblock], True # Return the mined block\n            else:\n                return None, False\n        elif self.state == STATE2:\n            DO_SOMETHING_TO_PRODUCE_EXTRA_MESSAGE\n            self.state = NEXT_STATE\n            if len(list_of_extra_messages) &gt; 0:\n                return list_of_extra_messages, True\n            else:\n                return None, False\n</code></pre> <p>Where self.state controls the state of the consensus class instance. In STATE2, if consensus_process generates new messages, it returns a list of ExtraMessage and True; if not, it returns None and False. self.state can be initialized in __init__, as shown in the example:</p> <pre><code>    def __init__(self, miner_id, consensus_param):\n        super().__init__(miner_id)\n        self.state = INITIAL_STATE\n        ...\n</code></pre> <p>MyConsensus.local_state_update needs to update the state of the consensus object based on the Message objects cached in _receive_tape, typically updating the local chain based on the incoming blocks. The logic can refer to the following code snippet:</p> <p><pre><code>    def local_state_update(self):\n        for incoming_block in self._receive_tape:\n            if isinstance(incoming_block, Consensus.Block):# Handle Block\n                if not self.valid_block(incoming_block):\n                    continue\n                prehash = incoming_block.blockhead.prehash\n                if insert_point := self.local_chain.search_block_by_hash(prehash):\n                    conj_block = self.local_chain.add_blocks(blocks=[incoming_block], insert_point=insert_point)\n                    fork_tip, _ = self.synthesize_fork(conj_block)\n                    depthself = self.local_chain.get_height()\n                    depth_incoming_block = fork_tip.get_height()\n                    if depthself &lt; depth_incoming_block:\n                        self.local_chain.set_last_block(fork_tip)\n                        new_update = True\n                        self.state = NEXT_STATE # State transition upon receiving a new block\n                else:\n                    self._block_buffer.setdefault(prehash, [])\n                    self._block_buffer[prehash].append(incoming_block)\n\n            elif isinstance(message, ExtraMessage): # Handle ExtraMessage\n                DEAL_WITH_OTHER_INCOMING_MESSAGES\n                self.state = NEXT_STATE # State transition upon receiving other messages\n            elif ...:\n                ...\n</code></pre> The above code processes messages in <code>_receive_tape</code> based on their type. If the input is a block, it attempts to verify and merge it into the local chain. Generally, <code>local_state_update</code> needs to call the <code>valid_chain</code> method to verify the chain containing the input block, so you need to implement <code>valid_chain</code> and <code>valid_block</code> methods in <code>MyConsensus</code>. Typically, the <code>valid_chain</code> method checks the <code>prehash</code> of the blocks in the chain to ensure they correctly form a hash chain and calls <code>valid_block</code> to verify each block. You can refer to <code>PoW.valid_chain</code> for writing <code>valid_chain</code>.</p> <p>Finally, if you need to make the consensus class <code>MyConsensus</code> configurable, you need to modify the <code>__init__</code> method and add configuration items in <code>system_config.ini</code>. The <code>__init__</code> method can refer to the following example:</p> <pre><code>    def __init__(self, miner_id, consensus_param):\n        super().__init__(miner_id)\n        self.state = INITIAL_STATE # State initialization\n        self.a = consensus_param['param_a']\n        self.b = int(consensus_param['param_b']) # Type conversion\n</code></pre> <p>After modifying <code>__init__</code>, you can add configuration items <code>param_a</code> and <code>param_b</code> in the <code>ConsensusSettings</code> section of <code>system_config.ini</code>. Note that for consensus classes other than <code>consensus.PoW</code>, all configuration items under <code>ConsensusSettings</code> will be passed to <code>MyConsensus</code> as a dictionary through <code>consensus_param</code>. If configured in <code>system_config.ini</code> as follows:</p> <pre><code>[ConsensusSettings]\nparam_a=value_a\nparam_b=100\n</code></pre> <p>Then the <code>consensus_param</code> passed to <code>MyConsensus.__init__</code> will be <code>{'param_a':'value_a','param_b':'100'}</code>.</p> <p>Currently, ChainXim dynamically imports the consensus class based on the value of the <code>consensus_type</code> configuration item during initialization. If you need to use the <code>MyConsensus</code> class in the simulation, configure <code>system_config.ini</code> as follows: <pre><code>consensus_type=consensus.MyConsensus\n</code></pre> and add a line in <code>consensus/__init__.py</code> (assuming the <code>MyConsensus</code> class is defined in <code>consensus/myconsensus.py</code>): <pre><code>from .myconsensus import MyConsensus\n</code></pre></p>"},{"location":"en/developer-guide/#Network-Interface","title":"Network Interface","text":"<p>Before introducing the network module, let's first introduce the network interface, defined in <code>./miner/network_interface</code>, which simulates the behavior of a Network Interface Card (NIC) and serves as a communication channel between miners and the network. When a miner is initialized and joins the network, an NIC instance is initialized in the miner based on the network type. <pre><code>def join_network(self, network):\n    \"\"\"Initialize the network interface\"\"\"\n    if (isinstance(network, TopologyNetwork) or \n        isinstance(network, AdHocNetwork)):\n        self.NIC = NICWithTp(self)\n    else:\n        self.NIC = NICWithoutTp(self)\n    if isinstance(network, AdHocNetwork):\n        self.NIC.withSegments = True\n    self.NIC.nic_join_network(network)\n</code></pre> The miner sends messages generated during the consensus process (currently only blocks) to the network through this NIC instance; the network also sends blocks being propagated to the target miner through this NIC instance. Depending on the type of network, networks can be divided into two categories: abstract networks without topology information (SynchronousNetwork, StochPropNetwork, DeterPropNetwork) and realistic networks with topology information (TopologyNetwork, AdHocNetwork). Correspondingly, Network Interfaces are divided into two categories: <code>NICWithoutTp</code> and <code>NICWithTp</code>. Both types of network interfaces inherit from the abstract base class <code>NetworkInterface</code>. Before specifically introducing the network interfaces, let's first introduce some constants predefined in <code>./miner/_consts.py</code>.</p>"},{"location":"en/developer-guide/#Constants-related-to-NetworkInterface","title":"Constants related to NetworkInterface","text":"<p>Network interfaces use some constants, which are predefined in the file <code>./miner/_consts.py</code> and mainly divided into the following categories:</p>"},{"location":"en/developer-guide/#1-Forwarding-Strategies","title":"1. Forwarding Strategies","text":"<p>In TopologyNetwork and AdHocNetwork, miners need to specify forwarding strategies for the generated messages. Currently, three strategies are defined:</p> Constant Value Description FLOODING \"flooding\" Flooding, i.e., forwarding to all neighboring nodes SELFISH \"selfish\" Selfish forwarding, i.e., no forwarding operation SPEC_TARGETS \"spec_targets\" Specified forwarding targets"},{"location":"en/developer-guide/#2-Message-Source","title":"2. Message Source","text":"<p>The source of the message indicates whether the message is self-generated or received from the external network. This constant is set mainly because different networks handle messages from different sources differently: abstract networks without topology (SynchronousNetwork, StochPropNetwork, DeterPropNetwork) only forward self-generated messages; while realistic networks with topology (TopologyNetwork, AdHocNetwork) forward messages from both sources.</p> Constant Value Description SELF \"self_generated_msg\" The message is self-generated OUTER \"msg_from_outer\" The message is received from the external network"},{"location":"en/developer-guide/#3-Channel-Status","title":"3. Channel Status","text":"<p>Used to mark the channel status in TopologyNetwork and AdHocNetwork.</p> Constant Value Description _IDLE \"idle\" The channel is idle _BUSY \"busy\" The channel is busy with a message being transmitted"},{"location":"en/developer-guide/#NetworkInterface","title":"NetworkInterface","text":""},{"location":"en/developer-guide/#Network-Interface-Abstract-Base-Class","title":"Network Interface Abstract Base Class","text":"<p>The abstract base class for network interfaces, defining the abstract interfaces that should be implemented. Located in <code>.\\network\\nic_abc.py</code>. First, it defines the member variables common to all network interfaces, as well as the abstract methods that each network interface needs to implement.</p> Member Variable Type Description miner Miner The miner holding this network interface miner_id int The ID of the miner holding this network interface _network Network The network instance in the environment _receive_buffer list[Packet] Buffer for packets received from the network in the current round _forward_buffer dict[str, list[Block]] Queue of messages to be sent to the network (currently only Block); the key indicates the source of the message, OUTER and SELF Member Method Input Parameters Description append_forward_buffer msg:Message, type:str, strategy: str, spec_target:list Adds the message msg to be forwarded to _forward_buffer, specifying the message type type (OUTER/SELF), forwarding strategy strategy (default FLOODING), and specific target spec_target only effective in SPEC_TARGETS strategy. nic_join_network network:Network Abstract method. Initializes the network interface when the miner is initialized and joins the network. nic_receive packet: Packet Abstract method. Receives packets from the network and passes them to the miner. nic_forward list[Packet] Abstract method. Sends messages in _forward_buffer to the network according to the rules. <p>The following methods need to be implemented only by TopologyNetwork and AdHocNetwork:</p> Member Method Input Parameters Description remove_neighbor remove_id:int Abstract method. Removes the specified neighbor. add_neighbor add_id:int Abstract method. Adds the specified neighbor. getdata inv:INVMsg Abstract method. Responds to inv messages, requesting missing blocks. get_reply msg_name, target:int, err:str, round Abstract method. The original miner gets the result of the message sent to the target miner, whether it was successful or failed."},{"location":"en/developer-guide/#NICWithoutTp","title":"NICWithoutTp","text":"<p>The general process of interaction between miners and the network through the network interface is as follows: 1. When a miner has a message to propagate (generated by its own consensus or received from the external network), it writes the message to be forwarded into the corresponding message queue of the NIC's <code>_forward_buffer</code> through the <code>forward</code> function; 2. At the end of each round, the network calls the <code>nic_forward</code> function of each miner's NIC during <code>diffuse</code>, sending the messages in <code>_forward_buffer</code> into the network and propagating them according to network rules; 3. When the network delivers the message to the target miner, it calls the <code>nic_receive</code> function of the target miner's NIC, which is responsible for passing the message to the miner through the <code>receive</code> interface for processing by the consensus layer.</p> <p>For network interfaces without topology information, <code>NICWithoutTp</code>, in the above process 2, only the messages generated by itself, i.e., the contents of the <code>SELF</code> message queue in <code>_forward_buffer</code>, are forwarded. The main member methods are as follows:</p> Member Method Input Parameters Description nic_receive packet: Packet Receives packets from the network and passes them to the miner. nic_forward list[Packet] Sends the contents of the <code>SELF</code> message queue in <code>_forward_buffer</code> to the network through <code>access_network</code>."},{"location":"en/developer-guide/#NICWithTp","title":"NICWithTp","text":"Member Method Input Parameters Description nic_receive packet: Packet Receives packets from the network and passes them to the miner. nic_forward list[Packet] Sends the messages in <code>_forward_buffer</code> to the network according to rules, the specific process is introduced later. remove_neighbor remove_id:int Removes the specified neighbor. add_neighbor add_id:int Adds the specified neighbor. getdata inv:INVMsg Responds to <code>inv</code> messages, requesting missing blocks. get_reply msg_name, target:int, err:str, round The original miner gets the result of the message sent to the target miner, whether it was successful or failed."},{"location":"en/developer-guide/#Network","title":"Network","text":"<p>The main function of the network layer is to receive new blocks generated in the environment and transmit them to other miners through certain propagation rules, serving as a communication channel between miners. The network layer is derived from the abstract base class Network to create different types of networks. Currently, the implemented networks include the abstract concept of Synchronous Network, Stochastic Propagation Network, Deterministic Propagation Network, and relatively realistic Topology P2P Network.</p>"},{"location":"en/developer-guide/#Network-Base-Class","title":"Network Base Class","text":"<p>The Network base class defines three interfaces, and external modules can only interact with the network module through these three interfaces. It also specifies the input parameters, which derived classes cannot change.</p> Function Parameters Description set_net_param *args, **kargs Sets network parameters. The environment class sets network parameters during initialization. The main program loads network parameter information into the environment from the configuration file. access_network new_msg:list[Message], minerid:int,round:int Receives all newly generated message objects into the network, waiting for propagation. It also encapsulates each message object and propagation-related information into a Packet. diffuse round:int The main function. It is called at the end of each round in exec to implement the network's propagation rules. <p>Before introducing the specific four types of networks, let's first introduce the message data packet Packet.</p>"},{"location":"en/developer-guide/#Packet","title":"Packet","text":"<p>After message objects enter the network through access_network, they are encapsulated into Packets, which include propagation-related information in addition to the message objects. Message objects propagate in the network in the form of Packets, and the Packets to be propagated are stored in the network's network_tape attribute. Packets have different specific implementations in different network classes. For example: - In SynchronousNetwork, it only includes the message object and the miner ID that generated the message; - In StochPropNetwork, it also includes the current reception probability; - In DeterPropNetwork, it records the propagation vector; - In TopologyNetwork, it records the source and target of the message.</p> <p>Taking PacketPVNet in TopologyNetwork as an example:</p> <pre><code># network/propvec.py\nclass PacketPVNet(Packet):\n    '''propagation vector network packet, including routing-related information'''\n    def __init__(self, payload: Message, source_id: int, round: int, prop_vector:list, outnetobj):\n        super().__init__(source_id, payload)\n        self.payload = payload\n        self.source = source_id\n        self.round = round\n        self.outnetobj = outnetobj  # External network class instance\n        # Propagation process related\n        self.received_miners:list[int] = [source_id]\n        self.trans_process_dict = {\n            f'miner {source_id}': round\n        }\n        # Pop the first element each round, recording the remaining propagation vector\n        self.remain_prop_vector = copy.deepcopy(prop_vector)\n</code></pre> <p>Next, we introduce how various networks implement the three interfaces.</p>"},{"location":"en/developer-guide/#SynchronousNetwork","title":"SynchronousNetwork","text":"<p>All miners receive newly generated messages at the beginning of the next round, except for the miner who generated the message.</p> Function Parameters Description set_net_param *args, **kargs No parameters needed for synchronous network access_network new_msg:list[Message], minerid:int,round:int Encapsulate the message object, miner id, and current round into PacketSyncNet and add it to network_tape. diffuse - At the beginning of the next round, all miners receive the packets in network_tape"},{"location":"en/developer-guide/#StochPropNetwork","title":"StochPropNetwork","text":"<p>After new messages enter the network, they are received by miners with an increasing probability each round (delay), and at most, all miners receive the message after the reception probability reaches 1 (bounded).</p> <p>Network Parameters:</p> Attribute Description rcvprob_start\uff08float\uff09 Initial reception probability. That is, the probability that a miner will receive the message in the next round after it enters the network. rcvprob_inc\uff08float\uff09 The increase in reception probability each round after the message enters the network. <p>For example, with rcvprob_start=rcvprob_inc=0.2, all other miners will definitely receive the message within 5 rounds after it enters the network.</p> <p>Interface Functions:</p> Function Parameters Description set_net_param *args, **kargs Set rcvprob_start, rcvprob_inc access_network new_msg:list[Message], minerid:int,round:int Encapsulate the message object, miner id, and current round into PacketBDNet and add it to network_tape. Initialize the reception probability of the packet and record the propagation process. diffuse round:int Each Packet in network_tape is received by miners with an increasing probability, and the current reception probability is updated in PacketBDNet. When all miners have received it, remove it from network_tape and save the propagation process in network log.txt.Note: When sent to an attacker, the other attackers also receive it immediately <p>Important Functions</p> Function Parameters Description record_block_propagation_time - Record message propagation time save_trans_process - Save propagation process"},{"location":"en/developer-guide/#DeterPropNetwork","title":"DeterPropNetwork","text":"<p>Given a propagation vector, the network sends message objects to a fixed proportion of miners at the beginning of each round.</p> <p>Network Parameters:</p> Attribute Description prop_vector (list) Propagation vector. For example, prop_vector=[0.1, 0.2, 0.4, 0.6, 0.8, 1.0] means that the proportion of miners receiving the message before the next round starts is 0.1, then 0.2 after another round, until all miners receive the message after five rounds. <p>Interface Functions:</p> Function Parameters Description set_net_param *args, **kargs Set prop_vector access_network new_msg:list[Message], minerid:int,round:int Encapsulate all new messages, miner id, and current round into data packets (PacketPVNet) and add them to network_tape. Initialize the propagation vector of the data packet and record the propagation process. diffuse round:int According to the propagation vector, propagate the data packet to a fixed proportion of miners in each round.Note: When sent to an attacker, the other attackers also receive it immediately, which may result in an inconsistent receiving proportion at some rounds. <p>Important Functions</p> Function Parameters Description record_block_propagation_time - Record message propagation time save_trans_process - Save the propagation process"},{"location":"en/developer-guide/#TopologyNetwork","title":"TopologyNetwork","text":"<p>Generate network topology and bandwidth between miners through a CSV file or randomly. After the message enters the network through the miner's network interface, a link is established between the specified source and target for propagation. The transmission time (rounds) of each link is determined by the link bandwidth and block size. The link may be interrupted with a preset outage_prob probability, in which case the sender will resend the message.</p> <p>Network Parameters:</p> Attribute Description init_mode (str) Network initialization method, 'adj' adjacency matrix, 'coo' sparse adjacency matrix, 'rand' randomly generated. The network topology of 'adj' and 'coo' is given by CSV files. 'rand' requires specifying bandwidth, degree, and other parameters. outage_prob (float) Outage probability of each link dynamic (bool) Whether the network topology changes dynamically avg_tp_change_interval (int) When dynamic=true, set the average rounds of topology changes edge_remove_prob (float) When dynamic=true, set the probability of removing each existing edge during topology changes edge_add_prob (float) When dynamic=true, set the probability of establishing a new connection for each non-existing edge during topology changes max_allowed_partitions (int) When dynamic=true, set the maximum number of partitions allowed during topology changes ave_degree (int) When the network generation method is 'rand', set the average degree of the topology bandwidth_adv (float) Bandwidth between attackers, in MB/round save_routing_graph (bool) Whether to save the routing propagation graph of each message. It is recommended to turn it off when the network scale is large <p>Interface Functions:</p> Function Parameters Description set_net_param *args, **kargs Set the above network parameters access_network new_msg:list[Message], minerid:int,round:int Encapsulate new messages, miner id, and current round into Packet and add them to network_tape diffuse round:int Diffuse is divided into receive_process and forward_process parts <ul> <li><code>receive_process</code> sends the propagated msg to the receiver;</li> </ul> <pre><code>def receive_process(self,round):\n    \"\"\"Receive process\"\"\"\n    if len(self._active_links)==0:\n        return\n    dead_links = []\n    for i, link in enumerate(self._active_links):\n        # Update link delay\n        if link.delay &gt; 0:\n            link.delay -= 1\n        # Determine if the link is interrupted\n        if self.link_outage(round, link):\n            dead_links.append(i)\n            continue\n        if link.delay &gt; 0:\n            continue\n        # Link propagation completed, target receives the packet\n        link.target_miner().NIC.nic_receive(link.packet)\n        link.source_miner().NIC.get_reply(\n            link.get_block_msg_name(),link.target_id(), None, round)\n        dead_links.append(i)\n    # Clean up links that have finished propagation\n    if len(dead_links) == 0:\n        return\n    self._active_links = [link for i, link in enumerate(self._active_links) \n                        if i not in dead_links]\n    dead_links.clear()\n</code></pre> <ul> <li><code>forward_process</code> takes the msg to be propagated from the miner NIC into the network;</li> </ul> <pre><code>def forward_process(self, round):\n    \"\"\"Forward process\"\"\"\n    for m in self._miners:\n        m.NIC.nic_forward(round)\n</code></pre> <p>Other Important Functions:</p> Function Parameters Description cal_delay msg:Message, sourceid:int, targetid:int Calculate the delay between two miners, including transmission delay and processing delay. The calculation formula is: <code>delay=trans_delay+process_delay, trans_delay=(blocksize*8)/bandwidth</code> generate_network - Generate the network according to network parameters. write_routing_to_json - Whenever a block finishes propagation, record its routing result in a JSON file, including origin_miner and routing_history information. gen_routing_gragh_from_json - Read the routing_history.json file and convert it into a routing_graph.svg image, saved in the Network Routing folder. record_block_propagation_time - Record message propagation time."},{"location":"en/developer-guide/#AdHocNetwork","title":"AdHocNetwork","text":"<p>Randomly generate node positions in a given square area, set the communication range between nodes, and nodes within the communication range will automatically establish connections and can transmit messages to each other. Each round, nodes perform Gaussian random walks, i.e., adding a zero-mean Gaussian random variable with a given variance to the x and y coordinates, and based on the node communication range, disconnect old connections or establish new connections. Each message will be segmented before transmission, and each segment's transmission time is one round. The receiving NIC will only pass the complete message to the consensus layer after receiving all segments.</p> <p>Network Parameters:</p> Attribute Description init_mode (str) Network initialization method, currently only supports random generation outage_prob(float) Outage probability of each link segment_size(float) Message segment size region_width(int) Width of the square area, nodes perform Gaussian random walks within this area comm_range(int) Node communication distance, nodes within this distance automatically establish connections move_variance(float) Variance of the xy coordinate movement distance when nodes perform Gaussian random walks outage_prob(float) Link outage probability <p>Interface Functions:</p> Function Parameters Description set_net_param *args, **kargs Set the above network parameters access_network new_msg:list[Message], minerid:int,round:int Encapsulate new messages, miner id, and current round into Packet and add them to network_tape diffuse round:int Diffuse is divided into receive_process and forward_process"},{"location":"en/developer-guide/#Attack","title":"Attack","text":"<p>Attackers perceive the environment, judge the current situation, and make attack decisions to execute the optimal attack strategy. Currently, the attacker part has not yet implemented dynamic decision-making, and the parameters in system_config.ini need to be modified before running the simulator to set different attack strategies. (Content will be updated after the eclipse attack is fully implemented)</p>"},{"location":"en/developer-guide/#Interaction-Logic-Between-Attack-Layer-and-Overall-System","title":"Interaction Logic Between Attack Layer and Overall System","text":"<p>The following figure shows an example of the operation of the attack module in a certain round. The actual part of the attack module is shown within the dashed box. The t attackers are distributed among the miners (the numbers can be specified in system_config.ini). In each round, the attack module will only be triggered once, and each trigger will perform a complete attack action (for example, in PoW where all miners have the same number of hash calculations q per round, each attack action can perform tq hash calculations). In the current version, attackers will be triggered at random positions each round to prevent attackers from being triggered at fixed positions, which could affect fairness.* The attack module mainly interacts with the network and the environment. The main content of interaction with the environment is to perceive the current \"situation\" and upload blocks to the global chain; the content of interaction with the network is mainly to send blocks to the network. </p> <p></p>"},{"location":"en/developer-guide/#Implemented-Attack-Types","title":"Implemented Attack Types","text":"<ul> <li>Honest Mining</li> <li>Selfish Mining</li> <li>Double Spending</li> <li>Eclipse Attack</li> </ul>"},{"location":"en/developer-guide/#Attack-Layer-Code-Structure","title":"Attack Layer Code Structure","text":"<pre><code>\u251c\u2500 attack\n\u2502  \u251c\u2500 adversary.py\n\u2502  \u251c\u2500 attack_type\n\u2502  \u2502  \u251c\u2500 atomization_behavior.py\n\u2502  \u2502  \u251c\u2500 attack_type.py\n\u2502  \u2502  \u251c\u2500 double_spending.py\n\u2502  \u2502  \u251c\u2500 eclipse.py\n\u2502  \u2502  \u251c\u2500 honest_mining.py\n\u2502  \u2502  \u251c\u2500 selfish_mining.py\n\u2502  \u2502  \u2514\u2500 _atomization_behavior.py\n\u2502  \u2514\u2500 _adversary.py\n</code></pre>"},{"location":"en/developer-guide/#_adversarypy--adversarypy","title":"_adversary.py &amp; adversary.py","text":"<p>_adversary.py provides the abstract parent class Adversary, which is inherited by the Adversary provided in adversary.py. The environment creates an Adversary object, then initializes all Adversary settings based on the environment parameters. This Adversary object acts as the abstraction of all attackers and executes attacks.</p>"},{"location":"en/developer-guide/#-_adversarypy--adversarypy-Member-Variables","title":"&gt;&gt;&gt; _adversary.py &amp; adversary.py Member Variables","text":""},{"location":"en/developer-guide/#Internal-Member-Variables","title":"Internal Member Variables","text":"Member Variable Type Explanation __Miner_ID int Value is -1, unchanged. During initialization, similar to ordinary miners, Adversary also needs to initialize consensus, so a unique ID is required. __adver_num int Records the number of attackers. __attack_type class: AttackType Creates an attack type object based on the settings, defaults to HonestMining if not set. __eclipse bool Records whether to execute an eclipse attack. __eclipse_attack class: AttackType If executing an eclipse attack, creates an Eclipse object; otherwise, it is None. When creating an eclipse attack, the internal initialization will record the above attack type object to implement the eclipse attack with a specific attack type. __adver_ids list[int] Records the list of attacker IDs. __miner_list list[class: Miner] Records the list of all miners. __network_type class: Network Records the current network type object, created by the environment and passed to Adversary. __global_chain class: Chain Records the current global chain object, created by the environment and passed to Adversary. __adver_consensus_param dict Records the parameters required by the attackers' consensus object in the form of a dict. __consensus_type class: Consensus Creates a consensus object based on the settings. __attack_arg dict Records the attack parameters. (Currently, only DoubleSpending requires this parameter.)"},{"location":"en/developer-guide/#-_adversarypy--adversarypy-Member-Methods","title":"&gt;&gt;&gt; _adversary.py &amp; adversary.py Member Methods","text":""},{"location":"en/developer-guide/#Internal-Methods","title":"Internal Methods","text":"Member Method Input Parameters (Type) Return Value (Type) Description __adver_setter() **args: any None Member method automatically executed during the initialization phase when the environment creates the Adversary object, setting all member variables based on the passed parameters. __adver_gener() None __adver_list: list[class: Miner] Generates random or specified attackers among all miners based on the settings. __consensus_q_init() None None Recalculates the computing power q of the attacker group abstract object Adversary (accumulating the computing power of all attackers). __attack_type_init() None None Initializes the member variables of the attack type object, determined by the above member variables."},{"location":"en/developer-guide/#External-Methods","title":"External Methods","text":"Member Method Input Parameters (Type) Return Value (Type) Description get_adver_ids() None __adver_ids: list[int] Returns the list of attacker IDs. get_adver_num() None __adver_num: int Returns the number of attackers. get_attack_type_name() None attack_type.__class.name: str Returns the name of the attack type. get_attack_type() None __attack_type: AttackType Returns the attack type object. get_eclipse() None __eclipse: bool Returns whether the eclipse attack is enabled. get_adver_q() None __consensus_type.q: int Returns the computing power q of the attacker group. excute_per_round(round) round: int None The main method of Adversary, executing the attack, will call the corresponding attack type object's member methods. get_info() None None or __attack_type.info_getter() Calls the corresponding attack type object's member method to get the current information, usually including success rate (or main chain quality) and the corresponding theoretical value."},{"location":"en/developer-guide/#_atomization_behaviorpy--atomization_behaviorpy","title":"_atomization_behavior.py &amp; atomization_behavior.py","text":"<p>_atomization_behavior.py is the parent class, and atomization_behavior.py inherits from it, implementing specific Atomization Behavior (AB). The parent class is defined because AB has behaviors that must be implemented, providing a behavior standard that forms the basis of the attack. Additional functionalities can be added directly in the inheriting class. Since this inheriting class is a method class without member variables, the following paragraphs details the methods of AB (not in table form).</p>"},{"location":"en/developer-guide/#Atomization-Behavior","title":"Atomization Behavior","text":""},{"location":"en/developer-guide/#-1-renew","title":"&gt;&gt;&gt; 1. renew()","text":"<p>The purpose of renew is to update all blockchain states of the attacker: the reference chain, the attack chain, the miner state (including input and its own chain), etc. In the current version, renew only has round as an input parameter, which can be seen as an environmental state. The attacker's _receive_tape contains the latest blocks that can be received from the attacker's perspective each round.</p> <p>In renew, the attacker iterates through each miner it controls. All miners perform local_state_update like honest miners (see Consensus Section). The dictionary is updated based on the results of local_state_update.</p> <p>If there is an update, the newly generated block is updated to the reference chain and the global chain. The former serves as the reference for the attack (the latest chain from the attacker's perspective), and the latter is recorded in the global chain.</p> <p>Summary: renew requires at least the following three parts:</p> <ul> <li> <p>Perform local_state_update for each attacker miner.</p> </li> <li> <p>Update the reference chain and global chain based on the update results.</p> </li> <li> <p>Record the update results of each round as needed.</p> </li> </ul> <p>If developers want to develop new attack modes, they can adjust the specific content of these three parts or add other functionalities as needed, but these three parts are essential.</p>"},{"location":"en/developer-guide/#-2-mine","title":"&gt;&gt;&gt; 2. mine()","text":"<p>mine calls the current consensus method and performs the mining function corresponding to the consensus method (i.e., honest mining). In the current version, mine randomly selects one attacker as the \"representative\" for mining in the current round. Additionally, the source code provides the functionality to specify miners for mining by ID.</p> <p>If a block is generated, the attack chain (adver_chain) and the global chain are updated.</p> <p>All attackers are iterated to update the block to the attacker's _receive_tape. The purpose is twofold: to allow attackers to share the block directly (received in the next round) and to update the block to the reference chain in the next round.</p> <p>The content of the mine module generally does not change significantly because its main function is to call the consensus mining function and update the corresponding blockchain based on the results.</p>"},{"location":"en/developer-guide/#-3-upload","title":"&gt;&gt;&gt; 3. upload()","text":"<p>Upload Adversary's block to the network.</p>"},{"location":"en/developer-guide/#-4-adopt","title":"&gt;&gt;&gt; 4. adopt()","text":"<p>adopt is used to update the results of the reference chain (honest_chain) to the attack chain (adver_chain). The attack chain can be seen as a chain jointly maintained by the attack group, rather than the individual chains of each malicious miner, so each malicious miner's local chain needs to be updated.</p>"},{"location":"en/developer-guide/#-5-clear","title":"&gt;&gt;&gt; 5. clear()","text":"<p>Clear the input and communication content of all miners in the attacker. The purpose of designing clear is to eliminate the impact of the current round's input on the next round, so clear should be placed after a series of behaviors.</p>"},{"location":"en/developer-guide/#-6-wait","title":"&gt;&gt;&gt; 6. wait()","text":"<p>wait allows the attack module to wait until the next round to continue running. Therefore, no specific behavior is designed for the wait part, and no actual action will be taken when the attack instance executes these operations.</p>"},{"location":"en/developer-guide/#-Member-Variables-in-attack_typepy","title":"&gt;&gt;&gt; Member Variables in attack_type.py","text":""},{"location":"en/developer-guide/#External-Variables","title":"External Variables","text":"<p>Unspecified member variables have the same meaning as previously described.</p> Member Variable Type Description behavior class: AtomizationBehavior Records the AtomizationBehavior type method class object. global_chain class: Chain -------- honest_chain class: Chain The honest chain updated from the Adversary's perspective. The Adversary generally does not perform additional operations on it other than updating the blocks of honest nodes. It is also the reference for updating adver_chain when the Adversary gives up the attack. adver_chain class: Chain The local chain of the Adversary, which is generally inconsistent with the honest_chain. miner_list list[class: Miner] -------- adver_list list[class: Miner] -------- network_type class: Network -------- adver_consensus class: Consensus -------- attack_arg dict --------"},{"location":"en/developer-guide/#-Member-Methods-in-attack_typepy","title":"&gt;&gt;&gt; Member Methods in attack_type.py","text":""},{"location":"en/developer-guide/#Internal-Methods_1","title":"Internal Methods","text":"Member Method Input Parameters: Type Return Parameters: Type Description __set_behavior_init() None None Creates an AtomizationBehavior type method class object."},{"location":"en/developer-guide/#External-Methods_1","title":"External Methods","text":"Member Method Input Parameters: Type Return Parameters: Type Description set_init() global_chain: Chain, adver_list:list[Miner], miner_list:list[Miner], network_type: Network, adver_consensus: Consensus, attack_arg:dict None Assigns values to all member variables of the attack type object."},{"location":"en/developer-guide/#Abstract-Methods","title":"Abstract Methods","text":"Member Method Input Parameters: Type Return Parameters: Type Description renew_stage(round) round: int newest_block: Block, mine_input: any Executes the update stage. attack_stage(round,mine_input) round: int None Executes the attack stage. clear_record_stage(round) round: int None Executes the clear and record stage. excute_this_attack_per_round(round) round: int None Executes the current attack. info_getter() None None Returns the current attack information."},{"location":"en/developer-guide/#Example-of-HonestMining","title":"Example of HonestMining","text":"<p>The attack is mainly divided into three stages: the renew stage, the attack stage, and the clear and record stage.</p>"},{"location":"en/developer-guide/#-Renew-Stage","title":"&gt;&gt;&gt; Renew Stage:","text":"<p><pre><code>def renew_stage(self,round):\n    ## 1. renew stage\n    newest_block, mine_input = self.behavior.renew(miner_list = self.adver_list, \\\n                 honest_chain = self.honest_chain,round = round)\n    return newest_block, mine_input\n</code></pre> As shown in the source code of the renew stage above, the renew stage needs to return two parameters: one is <code>newest_block</code> and the other is <code>mine_input</code>. The renew stage is mainly completed in the <code>renew()</code> method.</p>"},{"location":"en/developer-guide/#-Attack-Stage","title":"&gt;&gt;&gt; Attack Stage:","text":"<pre><code>def attack_stage(self,round,mine_input):\n    ## 2. attack stage\n    current_miner = random.choice(self.adver_list)       \n    self.behavior.adopt(adver_chain = self.adver_chain, honest_chain = self.honest_chain)\n    attack_mine = self.behavior.mine(miner_list = self.adver_list, current_miner = current_miner \\\n                  , miner_input = mine_input,\\\n                  adver_chain = self.adver_chain, \\\n                global_chain = self.global_chain, consensus = self.adver_consensus)\n    if attack_mine:\n    self.behavior.upload(network_type = self.network_type, adver_chain = self.adver_chain, \\\n          current_miner = current_miner, round = round)\n    else:\n    self.behavior.wait()\n</code></pre> <p>In the attack stage, Adversary needs to execute <code>adopt()</code>, <code>mine()</code>, <code>upload()</code>, and <code>wait()</code> based on conditions. The specific attack strategy determines how to combine these methods. The HonestMining strategy is very simple: if a block is mined, it is published; otherwise, it waits. Note that even the simplest HonestMining may not interact with the network every round. For more complex strategies like Selfish Mining and Double Spending, the source code is more complex, and you can refer to the source code if needed.</p>"},{"location":"en/developer-guide/#-Clear-and-Record-Stage","title":"&gt;&gt;&gt; Clear and Record Stage:","text":"<pre><code>def clear_record_stage(self,round):\n    ## 3. clear and record stage\n    self.behavior.clear(miner_list = self.adver_list)\n    self.__log['round'] = round\n    self.__log['honest_chain'] = self.honest_chain.lastblock.name + ' Height:' + str(self.honest_chain.lastblock.height)\n    self.__log['adver_chain'] = self.adver_chain.lastblock.name + ' Height:' + str(self.adver_chain.lastblock.height)\n    self.resultlog2txt()\n</code></pre> <p>This stage is relatively simple, mainly calling the <code>clear()</code> method to clear redundant data inside the miners and recording some necessary information in the log dictionary.</p>"},{"location":"en/developer-guide/#eclipsepy","title":"eclipse.py","text":"<p>Eclipse attacks are different from HonestMining and other attacks, as they need to rely on the previous three types of attacks to be effective.</p>"},{"location":"en/developer-guide/#Evaluation","title":"Evaluation","text":"<p>After <code>Environment.exec</code> is completed, <code>Environment.view_and_write</code> will be executed to evaluate and output the simulation results.</p> <ul> <li> <p><code>view_and_write</code> first calls <code>view</code> to obtain statistical data and output the results to the command line.</p> </li> <li> <p><code>view</code> will call the <code>CalculateStatistics</code> function in the <code>global_chain</code> to perform data statistics on the global blockchain tree structure and update the results to the dictionary variable <code>stat</code>.</p> </li> <li> <p>Then, the global blockchain will be statistically analyzed from three dimensions: common prefix, chain quality, and chain growth. These three parts are implemented by the corresponding functions in <code>external.py</code>.</p> </li> <li> <p>Secondly, the <code>cal_block_propagation_times</code> function in the network is called to obtain network-related statistical parameters.</p> </li> <li> <p>Finally, <code>view_and_write</code> outputs the evaluation results to a file.</p> </li> </ul> <p>The following is an explanation of the statistical parameters in <code>stat</code>, which correspond to the final output results of the simulator (see the user manual for details):</p> Dictionary Entry Explanation/Calculation Method num_of_generated_blocks Total number of generated blocks num_of_valid_blocks Total number of blocks in the main chain (main chain length) num_of_stale_blocks Number of stale blocks (blocks not in the main chain) stale_rate Stale block rate = number of stale blocks / total number of blocks num_of_forks Number of forks (on the main chain) fork_rate Fork rate = number of heights with forks on the main chain / main chain height average_block_time_main Average block time on the main chain = total rounds / main chain length block_throughput_main Block throughput on the main chain = main chain length / total rounds throughput_main_MB = block throughput on the main chain * block size average_block_time_total Total average block time = total rounds / total number of generated blocks block_throughput_total Total block throughput = total number of generated blocks / total rounds throughput_total_MB = total block throughput * block size total_round Total number of rounds run common_prefix_pdf PDF obtained by statistically analyzing the common prefix (probability density distribution obtained by counting the difference between the common prefix of the chains of all honest nodes and the length of the longest chain at the end of each round) consistency_rate Consistency index = common_prefix_pdf[0] average_chain_growth_in_honest_miners'_chain Average increase in the length of the chains of honest miners chain_quality_property Chain quality dictionary, recording the number of blocks produced by honest nodes and malicious nodes ratio_of_blocks_contributed_by_malicious_players Proportion of blocks produced by malicious nodes upper_bound t/(n-t) Upper bound of the proportion of blocks produced by malicious nodes (n is the total number of miners, t is the number of malicious miners) block_propagation_times Block propagation time (distribution) <p>Regarding the explanation of the three indicators of common prefix, chain quality, and chain growth:</p> Property Explanation Common Prefix When the computing power of malicious nodes does not exceed a certain proportion, the blockchain maintained by honest miners always has a long common prefix (the remaining part (prefix) after truncating any two honest miners' chains is always the same) Chain Quality In any sufficiently long segment of the chain of honest miners, the proportion of blocks produced by malicious miners will not exceed t/(n-t) (n is the total number of miners, t is the number of malicious miners) Chain Growth The chain of honest miners always grows at least at a certain rate <p>The corresponding function implementations in <code>external.py</code> are as follows:</p> Function Input Parameters Output Parameters Description common_prefix prefix1:Block, prefix2:Chain Common prefix prefix1 Calculate the common prefix of two blockchains chain_quality blockchain:Chain Dictionary cq_dict; index chain_quality_property Statistics on the proportion of blocks produced by malicious nodes chain_growth blockchain:Chain Blockchain height Obtain the growth rate  of the blockchain (i.e., blockchain height) <p>Note that both <code>common_prefix</code> and <code>chain_growth</code> only implement part of the corresponding properties: <code>common_prefix</code> only calculates the common prefix of two blockchains, while the consistency rate is calculated with the log generated during the simulation, and <code>chain_growth</code> only returns the blockchain height, while the calculation of the chain growth rate is completed in the <code>CalculateStatistics</code> function. </p> <p>For more detailed explanations of the above three indicators, refer to:</p> <ul> <li>J. A. Garay, A. Kiayias and N. Leonardos, \"The bitcoin backbone protocol: Analysis and applications\", Eurocrypt, 2015. https://eprint.iacr.org/2014/765.pdf</li> </ul>"},{"location":"","title":"ChainXim \u7528\u6237\u6307\u5357 User Guide","text":""},{"location":"#\u7b80\u4ecb-Introduction","title":"\u7b80\u4ecb Introduction","text":"<p>ChainXim\u662f\u4e00\u6b3e\u7531XinLab\u5f00\u53d1\u7684\u533a\u5757\u94fe\u4eff\u771f\u5668\uff0c\u7528\u4e8e\u5bf9\u4e0d\u540c\u53c2\u6570\u8bbe\u7f6e\u4e0b\u7684\u533a\u5757\u94fe\u7cfb\u7edf\u8fdb\u884c\u4eff\u771f\u9a8c\u8bc1\u3002\u6211\u4eec\u5e0c\u671bChainXim\u80fd\u591f\u517c\u5bb9\u4e0d\u540c\u7684\u5171\u8bc6\u534f\u8bae\u3001\u7f51\u7edc\u6a21\u578b\uff0c\u5e76\u53ef\u4ee5\u8bbe\u8ba1\u4e0d\u540c\u7684\u653b\u51fb\u8005\uff0c\u4ece\u591a\u4e2a\u7ef4\u5ea6\u5168\u65b9\u4f4d\u8bc4\u4f30\u533a\u5757\u94fe\u7684\u5b89\u5168\u3001\u541e\u5410\u7b49\u6027\u80fd\u6307\u6807\u3002</p> <p>ChainXim is a blockchain simulator developed by XinLab to simulate and verify blockchain systems under different parameter settings. We hope that ChainXim can be compatible with different consensus protocols, network models, and can design different attackers to comprehensively evaluate the blockchain's security, throughput, and other performance metrics.</p>"},{"location":"#Quick-Start","title":"Quick Start","text":""},{"location":"#\u4e0b\u8f7d-Download","title":"\u4e0b\u8f7d Download","text":"<p>\u4ee3\u7801\u4ed3\u5e93\u5730\u5740\uff1ahttps://github.com/XinLab-SEU/ChainXim</p> <p>\u53ef\u4ee5\u4e0b\u8f7dChainXim\u7684\u538b\u7f29\u5305\u540e\u89e3\u538b\uff0c\u6216\u8005\u514b\u9686\u4f4d\u4e8eGitee\u4e0a\u7684\u8f6f\u4ef6\u4ed3\u5e93</p> <p>\u53ef\u5728ChainXim\u7684\u4ee3\u7801\u4ed3\u5e93\u4e0b\u8f7dmaster\u5206\u652f\u7684\u538b\u7f29\u5305\uff1amaster.zip</p> <p>git\u514b\u9686\u547d\u4ee4\uff1a<code>git clone https://github.com/XinLab-SEU/ChainXim.git</code></p>"},{"location":"#\u6587\u4ef6\u7ed3\u6784-File-Structure","title":"\u6587\u4ef6\u7ed3\u6784 File Structure","text":"<p>\u538b\u7f29\u5305\u89e3\u538b\u540e\u6216\u8f6f\u4ef6\u4ed3\u5e93\u514b\u9686\u540e\u7684\u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\uff1a <pre><code>chain-xim\n    \u251c\u2500\u2500 Attack.py\n    \u251c\u2500\u2500 Environment.py\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 data\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 block.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 chain.py\n    \u2502   \u2514\u2500\u2500 message.py\n    \u251c\u2500\u2500 consensus\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 consensus_abc.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 pow.py\n    \u251c\u2500\u2500 errors.py\n    \u251c\u2500\u2500 external.py\n    \u251c\u2500\u2500 functions.py\n    \u251c\u2500\u2500 global_var.py\n    \u251c\u2500\u2500 main.py\n    \u251c\u2500\u2500 miner\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 _consts.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 miner.py.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 network_interface\n    \u2502       \u251c\u2500\u2500 nic_abc.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 nic_with_tp.py\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 nic_without_tp.py\n    \u251c\u2500\u2500 network\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 adhoc.py\n    \u2502   \u251c\u2500\u2500 deterprop.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 network_abc.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 stochprop.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 synchronous.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 topology.py\n    \u2502   \u251c\u2500\u2500 topolpgy.csv\n    \u2502   \u251c\u2500\u2500 topolpgy_coo.csv\n    \u2502   \u2514\u2500\u2500 topology_eclipse_sample.csv\n    \u2514\u2500\u2500 system_config.ini\n</code></pre></p> \u6587\u4ef6\u6216\u76ee\u5f55 \u529f\u80fd\u63cf\u8ff0 main.py \u4eff\u771f\u5668\u4e3b\u7a0b\u5e8f system_config.ini \u914d\u7f6e\u6587\u4ef6 README.md \u7528\u6237\u6587\u6863 Environment.py \u73af\u5883\u7c7b\u4e0e\u76f8\u5173\u51fd\u6570 miner/ \u5b58\u653e\u77ff\u5de5\u7c7b\u4e0e\u7f51\u7edc\u63a5\u53e3 data/ \u5b58\u653eMesage\u3001BlockHead\u3001Block\u3001Chain\u7c7b\u4e0e\u76f8\u5173\u51fd\u6570 consensus/ \u5b58\u653e\u62bd\u8c61\u5171\u8bc6\u7c7b\u3001PoW\u7c7b\u4e0e\u76f8\u5173\u51fd\u6570\u7684\u76ee\u5f55 network/ \u5b58\u653e\u591a\u79cd\u7f51\u7edc\u7c7b\u7684\u76ee\u5f55 Attack.py \u653b\u51fb\u8005\u7c7b\u4e0e\u76f8\u5173\u51fd\u6570 functions.py \u5305\u542b\u8ba1\u7b97\u54c8\u5e0c\uff08SHA256\uff09\u5728\u5185\u7684\u4e00\u4e9b\u51fd\u6570 external.py \u4e00\u4e9b\u7528\u4e8e\u7edf\u8ba1\u533a\u5757\u94fe\u6307\u6807\u7684\u5916\u90e8\u51fd\u6570 errors.py \u9519\u8bef\u7c7b\uff0c\u7528\u4e8e\u5728\u4eff\u771f\u5668\u4e2d\u629b\u51fa\u9519\u8bef global_var.py \u5b58\u653e\u5168\u5c40\u53d8\u91cf"},{"location":"#\u914d\u7f6e\u73af\u5883-Configuration","title":"\u914d\u7f6e\u73af\u5883 Configuration","text":"<ol> <li>\u5b89\u88c5Anaconda\u3002Anaconda\u4e0b\u8f7d\u94fe\u63a5</li> <li>\u4ece\u5f00\u59cb\u83dc\u5355\u6253\u5f00Anaconda Prompt\u3002</li> <li>\u751f\u6210\u4e00\u4e2aconda\u73af\u5883\u5e76\u6fc0\u6d3b\uff0cPython\u7248\u672c\u9009\u62e93.10\u3002 <pre><code>conda create -n chainxim python=3.10 python-graphviz\nactivate chainxim\n</code></pre></li> <li>\u5728ChainXim\u7684\u6839\u76ee\u5f55\u4e0b\u901a\u8fc7pip\u5b89\u88c5\u6240\u9700\u8981\u7684\u5305\u3002 <pre><code>cd &lt;project_directory&gt;\npip install -r requirements.txt\n</code></pre></li> </ol>"},{"location":"#\u7b80\u5355\u8fd0\u884c-Simple-Startup","title":"\u7b80\u5355\u8fd0\u884c Simple Startup","text":"<ol> <li>\u4ece\u5f00\u59cb\u83dc\u5355\u6253\u5f00Anaconda Prompt\uff0c\u8fd0\u884c\u524d\u9700\u8981\u6fc0\u6d3bconda\u73af\u5883\u3002 <pre><code>activate chainxim\n</code></pre></li> <li>\u5728ChainXim\u7684\u6839\u76ee\u5f55\u4e0b\u8fd0\u884c\u4e3b\u7a0b\u5e8f\u3002 <pre><code>cd &lt;project_directory&gt;\npython main.py\n</code></pre></li> </ol>"},{"location":"#\u6d4b\u8bd5\u7528\u4f8b-Test-Examples","title":"\u6d4b\u8bd5\u7528\u4f8b Test Examples","text":"<p>\u5c06\u4ee5\u4e0b\u53c2\u6570\u4f20\u9012\u7ed9\u4e3b\u7a0b\u5e8f\uff0c\u5c06\u4f1a\u4f7fChainXim\u968f\u673a\u751f\u6210\u4e00\u4e2a\u5305\u542b10\u4e2a\u8282\u70b9\u7684\u77ff\u5de5\u7f51\u7edc\uff0c\u5176\u4e2d2\u4e2a\u8282\u70b9\u4e3a\u653b\u51fb\u8005\uff0c\u91c7\u7528\u7684\u7f51\u7edc\u6a21\u578b\u4e3aTopologyNetwork\uff0c\u4eff\u771f\u603b\u5171\u6301\u7eed3000\u8f6e\u6b21\u3002 <pre><code>python main.py --total_round 3000 --miner_num 10 -t 2 --network_type network.TopologyNetwork --no_compact_outputfile --save_routing_graph --show_label\n</code></pre> \u4eff\u771f\u5f00\u59cb\u540e\u4f1a\u8f93\u51fa\u4eff\u771f\u53c2\u6570\uff0c\u5e76\u5728\u4eff\u771f\u8fdb\u884c\u65f6\u663e\u793a\u8fdb\u5ea6\u6761\u3002 <pre><code>Network Attributes\n    miner_num: 10\n    Generate Approach: rand\n    Generate Edge Probability: 0.8\n    Diameter: 2\n    Average Shortest Path Length: 1.356\n    Degree Histogram: [0, 0, 0, 0, 3, 1, 3, 2, 0, 1]\n    Average Degree: 5.8\n    Average Cluster Coefficient: 0.689\n    Degree Assortativity: -0.251\n\n\nParameters:\nMiner Number: 10\nAdversary Miners: [8, 6]\nConsensus Protocol: PoW\nNetwork Type: TopologyNetwork\nNetwork Param:  {'show_label': True, 'save_routing_graph': True, 'ave_degree': 8.0, 'bandwidth_honest': 0.5, 'bandwidth_adv': 5.0, 'TTL': 500, 'gen_net_approach': 'rand', 'block_prop_times_statistic': [0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}\nConsensus Param: {'target': '000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF', 'q_ave': 5, 'q_distr': 'equal'}\nAttack Execute Type: execute_sample1\n</code></pre> \u4eff\u771f\u7ed3\u675f\u540e\u5c06\u8f93\u51fa\u4eff\u771f\u7ed3\u679c\uff1a</p> <p></p> <p>\u6b64\u5916\uff0c\u4eff\u771f\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5404\u7c7b\u6570\u636e\u5c06\u4fdd\u5b58\u5728Results\u6587\u4ef6\u5939\uff0c\u5305\u62ec\u6bcf\u4e2a\u77ff\u5de5\u7684\u533a\u5757\u94fe\u8bb0\u5f55\u3001\u533a\u5757\u94fe\u53ef\u89c6\u5316\u77e2\u91cf\u56fe\u3001\u533a\u5757\u94fe\u653b\u51fb\u8005\u65e5\u5fd7\u3001\u8def\u7531\u5386\u53f2\u3001\u7f51\u7edc\u62d3\u6251\u56fe\u3001\u533a\u5757\u4f20\u64ad\u793a\u610f\u56fe\u7b49\u3002\u6ce8\u610f\u5982\u679c\u7f3a\u5931\u547d\u4ee4\u884c\u53c2\u6570<code>--no_compact_outputfile --save_routing_graph</code>\uff0c\u90e8\u5206\u6587\u4ef6\u53ef\u80fd\u7f3a\u5931\u3002</p> <p>\u533a\u5757\u94fe\u53ef\u89c6\u5316\u77e2\u91cf\u56fe\uff08blockchain_visualization/Blockchain Structure.gv.svg\uff09 </p> <p> </p> <p>\u56fe\u4e2d\u7ea2\u8272\u533a\u5757\u7531\u653b\u51fb\u8005\u4ea7\u751f\uff0c\u84dd\u8272\u533a\u5757\u7531\u8bda\u5b9e\u77ff\u5de5\u4ea7\u751f\u3002</p> <p>\u533a\u5757\u94fe\u53ef\u89c6\u5316\u56fe\uff08blockchain visualisation.svg\uff09</p> <p></p> <p>\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u4ee3\u8868\u4e00\u4e2a\u533a\u5757\uff0c\u84dd\u70b9\u4ee3\u8868\u8bda\u5b9e\u77ff\u5de5\u4ea7\u751f\u7684\u533a\u5757\uff0c\u7ea2\u70b9\u4ee3\u8868\u653b\u51fb\u8005\u4ea7\u751f\u7684\u533a\u5757\u3002\u6bcf\u4e2a\u70b9\u7684\u6a2a\u5750\u6807\u8868\u793a\u533a\u5757\u4ea7\u751f\u7684\u8f6e\u6b21\uff0c\u7eb5\u5750\u6807\u8868\u793a\u533a\u5757\u6240\u5728\u9ad8\u5ea6\u3002\u6ce8\u610f\uff0c\u5982\u679c\u8fd0\u884c\u8f6e\u6570\u8fc7\u591a\uff0c\u4ea7\u751f\u7684\u533a\u5757\u6570\u8fc7\u591a\uff0c\u4f1a\u5bfc\u81f4\u751f\u6210\u7684\u56fe\u7247\u6324\u6210\u4e00\u56e2\uff0c\u96be\u4ee5\u5206\u8fa8</p> <p>\u533a\u5757\u4ea7\u751f\u65f6\u95f4\u5206\u5e03\u76f4\u65b9\u56fe\uff08block interval distribution.svg\uff09</p> <p></p> <p>\u7f51\u7edc\u62d3\u6251\u56fe\uff08Network Results/network topology.svg\uff09</p> <p></p> <p>\u56fe\u4e2d\u76f8\u90bb\u8282\u70b9\u4e4b\u95f4\u6807\u8bb0\u4e86\u4f20\u8f93\u5e26\u5bbd\uff0c\u5355\u4f4d\u4e3aMB/round\u3002</p> <p>\u533a\u5757\u4f20\u64ad\u793a\u610f\u56fe\uff08\u4ee5\u533a\u5757B2\u4e3a\u4f8b\uff1aNetwork Results/routing_graphB2.svg\uff09</p> <p></p> <p>\u4e0a\u56fe\u5c55\u793a\u4e86\u533a\u5757B2\u4ece\u8282\u70b96\u4f20\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\u7684\u5168\u8fc7\u7a0b\uff0c\u56fe\u4e2d\u6bcf\u4e2a\u5b9e\u5fc3\u7bad\u5934\u90fd\u5e26\u6709\u542b\u4e24\u5bf9\u6b63\u6570\u7684\u6807\u8bb0\uff0c\u7b2c\u4e00\u5bf9\u6807\u8bc6\u67d0\u4e00\u4f20\u64ad\u8fc7\u7a0b\u6e90\u77ff\u5de5\u4e0e\u76ee\u6807\u77ff\u5de5\u7684ID\uff0c\u7b2c\u4e8c\u5bf9\u6807\u8bc6\u67d0\u4e00\u4f20\u64ad\u8fc7\u7a0b\u7684\u8d77\u59cb\u8f6e\u6b21\u4e0e\u7ed3\u675f\u8f6e\u6b21\u3002</p>"},{"location":"#\u4eff\u771f\u5668\u8f93\u5165\u53c2\u6570-Input","title":"\u4eff\u771f\u5668\u8f93\u5165\u53c2\u6570 Input","text":"<p>\u4eff\u771f\u5668\u7684\u8f93\u5165\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u6307\u5b9a\uff1a\u547d\u4ee4\u884c\u4ee5\u53ca\u914d\u7f6e\u6587\u4ef6\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4fee\u6539ChainXim\u9644\u5e26\u7684\u914d\u7f6e\u6587\u4ef6system_config.ini\u4ee5\u6539\u53d8\u4eff\u771f\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u6307\u5b9a\u4e2a\u522b\u4eff\u771f\u53c2\u6570\u3002\u547d\u4ee4\u884c\u652f\u6301\u7684\u53c2\u6570\u5c11\u4e8e\u914d\u7f6e\u6587\u4ef6\uff0c\u4f46\u662f\u4e00\u65e6\u88ab\u6307\u5b9a\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7<code>python main.py --help</code>\u547d\u4ee4\u67e5\u770b\u547d\u4ee4\u884c\u5e2e\u52a9\u4fe1\u606f\u3002</p>"},{"location":"#EnvironmentSettings","title":"EnvironmentSettings","text":"<p>\u914d\u7f6e\u4eff\u771f\u73af\u5883</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e total_round <code>--total_round 50</code> int \u4eff\u771f\u603b\u8f6e\u6b21\u6570 process_bar_type <code>--process_bar_type round</code> str \u8fdb\u5ea6\u6761\u663e\u793a\u98ce\u683c\uff08round\u6216height\uff09 miner_num <code>--miner_num 80</code> int \u7f51\u7edc\u4e2d\u7684\u77ff\u5de5\u603b\u6570 blocksize <code>--blocksize 8</code> float \u533a\u5757\u5927\u5c0f\uff0c\u5355\u4f4dMB consensus_type <code>--consensus_type consensus.PoW</code> str \u5171\u8bc6\u7c7b\u578b\uff0c\u76ee\u524d\u4ec5<code>consensus.PoW</code>\u53ef\u9009 network_type <code>--network_type network.SynchronousNetwork</code> str \u7f51\u7edc\u7c7b\u578b\uff0c<code>network.SynchronousNetwork</code>\u3001<code>network.PropVecNetwork</code>\u3001<code>network.BoundedDelayNetwork</code>\u3001<code>network.TopologyNetwork</code>\u56db\u9009\u4e00 show_fig <code>--show_fig</code> bool \u662f\u5426\u663e\u793a\u4eff\u771f\u8fc7\u7a0b\u4e2d\u7684\u56fe\u50cf compact_outputfile <code>--no_compact_outputfile</code> bool \u662f\u5426\u7b80\u5316log\u548cresult\u8f93\u51fa\u4ee5\u8282\u7701\u78c1\u76d8\u7a7a\u95f4\u901a\u8fc7<code>--no_compact_outputfile</code>\u8bbe\u7f6e\u4e3aFalse"},{"location":"#ConsensusSettings","title":"ConsensusSettings","text":"<p>\u914d\u7f6e\u5171\u8bc6\u534f\u8bae\u53c2\u6570</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e q_ave <code>--q_ave 5</code> int \u5355\u4e2a\u77ff\u5de5\u7684\u5e73\u5747\u54c8\u5e0c\u7387\uff0c\u5373\u6bcf\u8f6e\u80fd\u8ba1\u7b97\u54c8\u5e0c\u7684\u6b21\u6570 q_distr <code>--q_distr equal</code> str \u54c8\u5e0c\u7387\u7684\u5206\u5e03\u6a21\u5f0fequal\uff1a\u6240\u6709\u77ff\u5de5\u54c8\u5e0c\u7387\u76f8\u540c\uff1brand\uff1a\u54c8\u5e0c\u7387\u6ee1\u8db3\u9ad8\u65af\u5206\u5e03 target \u65e0 str 16\u8fdb\u5236\u683c\u5f0f\u7684PoW\u76ee\u6807\u503c \u65e0 <code>--difficulty 12</code> int \u7528\u4e8c\u8fdb\u5236PoW\u76ee\u6807\u503c\u524d\u7f00\u96f6\u7684\u957f\u5ea6\u8868\u793a\u7684PoW\u96be\u5ea6\uff0c\u5728\u4e3b\u7a0b\u5e8f\u8f6c\u6362\u4e3aPoW\u76ee\u6807\u503c"},{"location":"#AttackModeSettings","title":"AttackModeSettings","text":"<p>\u914d\u7f6e\u653b\u51fb\u6a21\u5f0f\u53c2\u6570</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e t <code>-t 0</code> int \u653b\u51fb\u8005\u603b\u6570 adversary_ids \u65e0 tuple[int] \u653b\u51fb\u8005id e.g.(1,3,5) attack_execute_type <code>--attack_execute_type execute_sample1</code> str \u653b\u51fb\u7c7b\u578bexecute_sample0\uff1a\u7b97\u529b\u653b\u51fb\uff1bexecute_sample1\uff1a\u81ea\u79c1\u6316\u77ff"},{"location":"#DeterPropNetworkSettings","title":"DeterPropNetworkSettings","text":"<p>\u914d\u7f6eDeterPropNetwork\u53c2\u6570</p> system_config \u7c7b\u578b \u8bf4\u660e prop_vector list[float] \u4f20\u64ad\u5411\u91cf\uff08\u4ee5\u5217\u8868\u5f62\u5f0f\uff09e.g.[0.1, 0.2, 0.4, 0.6, 1.0]\u5176\u4e2d\u7684\u5143\u7d20\u4ee3\u8868\u4e86\u5f53(1,2,3...)\u8f6e\u8fc7\u540e\u63a5\u6536\u5230\u6d88\u606f\u7684\u77ff\u5de5\u6bd4\u4f8b\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5fc5\u987b\u4e3a1.0"},{"location":"#StochPropNetworkSettings","title":"StochPropNetworkSettings","text":"<p>\u914d\u7f6eStochPropNetwork\u53c2\u6570</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e rcvprob_start <code>--rcvprob_start 0.001</code> float \u6d88\u606f\u7684\u521d\u59cb\u63a5\u6536\u6982\u7387 rcvprob_inc <code>--rcvprob_inc 0.001</code> float \u6bcf\u8f6e\u589e\u52a0\u7684\u6d88\u606f\u63a5\u6536\u6982\u7387 block_prop_times_statistic \u65e0 list[float] \u9700\u7edf\u8ba1\u7684\u533a\u5757\u4f20\u64ad\u65f6\u95f4\u5bf9\u5e94\u7684\u63a5\u6536\u77ff\u5de5\u6bd4\u4f8b"},{"location":"#TopologyNetworkSettings","title":"TopologyNetworkSettings","text":"<p>\u914d\u7f6eTopologyNetwork\u53c2\u6570</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e init_mode <code>--init_mode rand</code> str \u7f51\u7edc\u521d\u59cb\u5316\u65b9\u6cd5, 'adj'\u90bb\u63a5\u77e9\u9635, 'coo'\u7a00\u758f\u7684\u90bb\u63a5\u77e9\u9635, 'rand'\u968f\u673a\u751f\u6210\u3002'adj'\u548c'coo'\u7684\u7f51\u7edc\u62d3\u6251\u901a\u8fc7csv\u6587\u4ef6\u7ed9\u5b9a\u3002'rand'\u9700\u8981\u6307\u5b9a\u5e26\u5bbd\u3001\u5ea6\u7b49\u53c2\u6570 bandwidth_honest <code>--bandwidth_honest 0.5</code> float \u8bda\u5b9e\u77ff\u5de5\u4e4b\u95f4\u4ee5\u53ca\u8bda\u5b9e\u77ff\u5de5\u548c\u653b\u51fb\u8005\u4e4b\u95f4\u7684\u7f51\u7edc\u5e26\u5bbd\uff0c\u5355\u4f4dMB/round bandwidth_adv <code>--bandwidth_adv 5</code> float \u653b\u51fb\u8005\u4e4b\u95f4\u7684\u5e26\u5bbd\uff0c\u5355\u4f4dMB/round rand_mode <code>--rand_mode homogeneous</code> str \u968f\u673a\u7f51\u7edc\u62d3\u6251\u7684\u751f\u6210\u6a21\u5f0f'homogeneous'\uff1a\u6839\u636eave_degree\u751f\u6210\u7f51\u7edc\u5e76\u5c3d\u53ef\u80fd\u4fdd\u6301\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u76f8\u540c'binomial'\uff1a\u91c7\u7528Erd\u0151s-R\u00e9nyi\u7b97\u6cd5\uff0c\u4ee5<code>ave_degree/(miner_num-1)</code>\u6982\u7387\u5728\u8282\u70b9\u4e4b\u95f4\u968f\u673a\u5efa\u7acb\u94fe\u63a5 ave_degree <code>--ave_degree 8</code> float \u7f51\u7edc\u751f\u6210\u65b9\u5f0f\u4e3a'rand'\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u5e73\u5747\u5ea6 stat_prop_times \u65e0 list[float] \u9700\u7edf\u8ba1\u7684\u533a\u5757\u4f20\u64ad\u65f6\u95f4\u5bf9\u5e94\u7684\u63a5\u6536\u77ff\u5de5\u6bd4\u4f8b outage_prob <code>--outage_prob 0.1</code> float \u6bcf\u6761\u94fe\u8def\u6bcf\u8f6e\u7684\u4e2d\u65ad\u6982\u7387\uff0c\u94fe\u8def\u4e2d\u65ad\u540e\u6d88\u606f\u5c06\u5728\u4e0b\u4e00\u8f6e\u91cd\u53d1 dynamic <code>--dynamic</code> bool \u662f\u5426\u4f7f\u7f51\u7edc\u52a8\u6001\u53d8\u5316\uff0c\u5982\u679c\u52a8\u6001\u53d8\u5316\uff0c\u4f1a\u4ee5\u4e00\u5b9a\u6982\u7387\u6dfb\u52a0\u6216\u8005\u5220\u9664\u8282\u70b9\u4e4b\u95f4\u7684\u94fe\u63a5 avg_tp_change_interval \u65e0 float dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u7684\u5e73\u5747\u8f6e\u6b21 edge_remove_prob \u65e0 float dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u5df2\u5b58\u5728\u7684\u6bcf\u6761\u8fb9\u79fb\u9664\u7684\u6982\u7387 edge_add_prob \u65e0 float dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u672a\u5b58\u5728\u7684\u6761\u8fb9\u65b0\u5efa\u7acb\u8fde\u63a5\u7684\u6982\u7387 max_allowed_partitions \u65e0 int dynamic=true\u65f6,\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u6700\u5927\u53ef\u5b58\u5728\u7684\u5206\u533a\u6570\u91cf save_routing_graph <code>--save_routing_graph</code> bool \u662f\u5426\u4fdd\u5b58\u5404\u6d88\u606f\u7684\u8def\u7531\u4f20\u64ad\u56fe\uff0c\u5efa\u8bae\u7f51\u7edc\u89c4\u6a21\u8f83\u5927\u65f6\u5173\u95ed show_label <code>--show_label</code> bool \u662f\u5426\u663e\u793a\u62d3\u6251\u56fe\u6216\u8def\u7531\u4f20\u64ad\u56fe\u4e0a\u7684\u6807\u7b7e\uff0c\u5efa\u8bae\u7f51\u7edc\u89c4\u6a21\u8f83\u5927\u65f6\u5173\u95ed"},{"location":"#AdHocNetworkSettings","title":"AdHocNetworkSettings","text":"<p>\u914d\u7f6eAdHocNetwork\u53c2\u6570</p> system_config \u547d\u4ee4\u884c\u793a\u4f8b \u7c7b\u578b \u8bf4\u660e init_mode <code>--init_mode rand</code> str \u7f51\u7edc\u521d\u59cb\u5316\u65b9\u6cd5, 'adj'\u90bb\u63a5\u77e9\u9635, 'coo'\u7a00\u758f\u7684\u90bb\u63a5\u77e9\u9635, 'rand'\u968f\u673a\u751f\u6210\u3002'adj'\u548c'coo'\u7684\u7f51\u7edc\u62d3\u6251\u901a\u8fc7csv\u6587\u4ef6\u7ed9\u5b9a\u3002'rand'\u9700\u8981\u6307\u5b9a\u5e26\u5bbd\u3001\u5ea6\u7b49\u53c2\u6570 ave_degree <code>--ave_degree 3</code> float \u7f51\u7edc\u751f\u6210\u65b9\u5f0f\u4e3a'rand'\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u5e73\u5747\u5ea6 segment_size <code>--ave_degree 8</code> float \u6d88\u606f\u5206\u6bb5\u5927\u5c0f \uff1b\u5c06\u5b8c\u6574\u6d88\u606f\u5206\u82e5\u5e72\u6bb5\uff0c\u6bcf\u6bb5\u6d88\u606f\u4f20\u64ad\u65f6\u95f4\u4e3a\u4e00\u8f6e region_width <code>--region_width 100</code> float \u6b63\u65b9\u5f62\u533a\u57df\u7684\u5bbd\u5ea6\uff0c\u8282\u70b9\u5728\u8be5\u533a\u57df\u4e2d\u8fdb\u884c\u9ad8\u65af\u968f\u673a\u6e38\u8d70 comm_range <code>--comm_range 30</code> float \u8282\u70b9\u901a\u4fe1\u8ddd\u79bb\uff0c\u5728\u901a\u4fe1\u8ddd\u79bb\u5185\u7684\u4e24\u8282\u70b9\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 move_variance <code>--move_variance 5</code> float \u8282\u70b9\u8fdb\u884c\u9ad8\u65af\u968f\u673a\u6e38\u8d70\u65f6\uff0c\u6307\u5b9axy\u5750\u6807\u79fb\u52a8\u8ddd\u79bb\u7684\u65b9\u5dee outage_prob <code>--outage_prob 0.1</code> float \u6bcf\u6761\u94fe\u8def\u6bcf\u8f6e\u7684\u4e2d\u65ad\u6982\u7387\uff0c\u94fe\u8def\u4e2d\u65ad\u540e\u6d88\u606f\u5c06\u5728\u4e0b\u4e00\u8f6e\u91cd\u53d1 stat_prop_times \u65e0 list[float] \u9700\u7edf\u8ba1\u7684\u533a\u5757\u4f20\u64ad\u65f6\u95f4\u5bf9\u5e94\u7684\u63a5\u6536\u77ff\u5de5\u6bd4\u4f8b"},{"location":"#\u4eff\u771f\u5668\u8f93\u51fa-Output","title":"\u4eff\u771f\u5668\u8f93\u51fa Output","text":"<p>\u4eff\u771f\u7ed3\u675f\u540e\u4f1a\u5728\u7ec8\u7aef\u6253\u5370\u4eff\u771f\u8fc7\u7a0b\u4e2d\u5168\u5c40\u94fe\u7684\u7edf\u8ba1\u6570\u636e\u3002\u4f8b\uff1a <pre><code>162 blocks are generated in 26682 rounds, in which 61 are stale blocks.\nAverage chain growth in honest miners' chain: 100.013\nNumber of Forks: 54\nFork rate: 0.53465347\nStale rate: 0.37654321\nAverage block time (main chain): 264.17821782 rounds/block\nBlock throughput (main chain): 0.00378532 blocks/round\nThroughput in MB (main chain): 0.12113035 MB/round\nAverage block time (total): 164.7037037 rounds/block\nBlock throughput (total): 0.00607151 blocks/round\nThroughput in MB (total): 0.19428828 MB/round\n\n\nChain_Quality Property: {'Honest Block': 102, 'Adversary Block': 0}\nRatio of blocks contributed by malicious players: 0.0\nUpper Bound t/(n-t): 0.0\nBlock propagation times: {0.1: 60.553, 0.2: 77.534, 0.4: 105.994, 0.5: 109.826, 0.6: 113.23, 0.7: 116.522, 0.8: 120.658, 0.9: 126.447, 1.0: 148.327}\n</code></pre></p> <p>\u7ec8\u7aef\u663e\u793a\u7684\u4eff\u771f\u7ed3\u679c\u542b\u4e49\u5982\u4e0b\uff1a</p> \u8f93\u51fa\u9879\u76ee \u89e3\u91ca Number of stale blocks \u5b64\u7acb\u533a\u5757\u6570\uff08\u4e0d\u5728\u4e3b\u94fe\u4e2d\u7684\u533a\u5757\u6570\uff09 Average chain growth in honest miners' chain \u8bda\u5b9e\u8282\u70b9\u5e73\u5747\u94fe\u957f\u589e\u957f Number of Forks \u5206\u53c9\u6570\u76ee\uff08\u53ea\u7b97\u4e3b\u94fe\uff09 Fork rate \u5206\u53c9\u7387=\u4e3b\u94fe\u4e0a\u6709\u5206\u53c9\u7684\u9ad8\u5ea6\u6570/\u4e3b\u94fe\u9ad8\u5ea6 Stale rate \u5b64\u5757\u7387=\u5b64\u5757\u6570/\u533a\u5757\u603b\u6570 Average block time (main chain) \u4e3b\u94fe\u5e73\u5747\u51fa\u5757\u65f6\u95f4=\u603b\u8f6e\u6570/\u4e3b\u94fe\u957f\u5ea6(\u8f6e/\u5757) Block throughput (main chain) \u4e3b\u94fe\u533a\u5757\u541e\u5410\u91cf=\u4e3b\u94fe\u957f\u5ea6/\u603b\u8f6e\u6570 Throughput in MB (main chain) \u4e3b\u94fe\u533a\u5757\u541e\u5410\u91cf*\u533a\u5757\u5927\u5c0f Average block time (total) \u603b\u5e73\u5747\u51fa\u5757\u65f6\u95f4=\u603b\u8f6e\u6570/\u751f\u6210\u7684\u533a\u5757\u603b\u6570 Block throughput (total) \u603b\u533a\u5757\u541e\u5410\u91cf=\u751f\u6210\u7684\u533a\u5757\u603b\u6570/\u603b\u8f6e\u6570 Throughput in MB (total) =\u603b\u533a\u5757\u541e\u5410\u91cf*\u533a\u5757\u5927\u5c0f common prefix pdf \u7edf\u8ba1\u5171\u540c\u524d\u7f00\u5f97\u5230\u7684pdf\uff08\u7edf\u8ba1\u6bcf\u8f6e\u7ed3\u675f\u65f6\uff0c\u6240\u6709\u8bda\u5b9e\u8282\u70b9\u7684\u94fe\u7684\u5171\u540c\u524d\u7f00\u4e0e\u6700\u957f\u94fe\u957f\u5ea6\u7684\u5dee\u503c\u5f97\u5230\u7684\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\uff09 Consistency rate \u4e00\u81f4\u6027\u6307\u6807=common_prefix_pdf[0] Chain_Quality Property \u8bda\u5b9e\u77ff\u5de5\u548c\u6076\u610f\u77ff\u5de5\u7684\u51fa\u5757\u603b\u6570 Ratio of blocks contributed by malicious players \u6076\u610f\u8282\u70b9\u51fa\u5757\u6bd4\u4f8b Upper Bound t/(n-t) \u6076\u610f\u8282\u70b9\u51fa\u5757\u5360\u6bd4\u7684\u4e0a\u754c(n\u4e3a\u77ff\u5de5\u603b\u6570\uff0ct\u4e3a\u6076\u610f\u77ff\u5de5\u6570\u76ee) Block propagation times \u533a\u5757\u4f20\u64ad\u65f6\u95f4\uff08\u5206\u5e03\uff09 <p>\u4eff\u771f\u8fc7\u7a0b\u4e2d\u7ed3\u679c\u3001\u65e5\u5fd7\u3001\u56fe\u50cf\u90fd\u4fdd\u5b58\u5728Results/\\&lt;date-time&gt;/\u76ee\u5f55\u4e0b\uff0cdate-time\u662f\u4eff\u771f\u5f00\u59cb\u7684\u65e5\u671f\u65f6\u95f4\u3002\u8be5\u76ee\u5f55\u7684\u5178\u578b\u6587\u4ef6\u7ed3\u6784\uff1a <pre><code>Results/20230819-232107/\n\u251c\u2500\u2500 Attack_log.txt\n\u251c\u2500\u2500 Attack_result.txt\n\u251c\u2500\u2500 Chain Data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 chain_data.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 chain_data0.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 chain_data1.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ......\n\u251c\u2500\u2500 Network Results\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ......\n\u251c\u2500\u2500 block interval distribution.svg\n\u251c\u2500\u2500 blockchain visualisation.svg\n\u251c\u2500\u2500 blockchain_visualization\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Blockchain Structure.gv\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Blockchain Structure.gv.svg\n\u251c\u2500\u2500 evaluation results.txt\n\u251c\u2500\u2500 events.log\n\u2514\u2500\u2500 parameters.txt\n</code></pre></p> <p>\u8f93\u51fa\u7684\u4eff\u771f\u7ed3\u679c\u6587\u4ef6\u542b\u4e49\u5982\u4e0b\uff1a</p> \u6587\u4ef6\u6216\u76ee\u5f55 \u529f\u80fd\u63cf\u8ff0 Attack_log.txt \u653b\u51fb\u65e5\u5fd7 Attack_result.txt \u653b\u51fb\u7ed3\u679c Chain Data/ \u5168\u5c40\u94fe\u548c\u5404\u77ff\u5de5\u672c\u5730\u94fe\u7684\u5b8c\u6574\u6570\u636e Network Results/ \u7f51\u7edc\u4f20\u8f93\u7ed3\u679c\uff0c\u5982\u4f20\u64ad\u8fc7\u7a0b\uff08\u5404\u77ff\u5de5\u4f55\u65f6\u6536\u5230\u67d0\u533a\u5757\uff09\u53ca\u7f51\u7edc\u62d3\u6251\u3001\u8def\u7531\u8fc7\u7a0b\u56fe\u7b49 block interval distribution.svg \u533a\u5757\u65f6\u95f4\u5206\u5e03 blockchain visualisation.svg \u533a\u5757\u94fe\u53ef\u89c6\u5316 blockchain_visualization/ \u501f\u52a9Graphviz\u7684\u533a\u5757\u94fe\u53ef\u89c6\u5316 evaluation results.txt \u8bc4\u4f30\u7ed3\u679c events.log \u4eff\u771f\u8fc7\u7a0b\u65e5\u5fd7\uff0c\u8bb0\u5f55\u91cd\u8981\u4e8b\u4ef6\u5982\u4ea7\u751f\u533a\u5757\u3001\u63a5\u5165\u7f51\u7edc\u7b49 parameters.txt \u4eff\u771f\u73af\u5883\u53c2\u6570"},{"location":"#\u4eff\u771f\u5b9e\u4f8b-Simulation-Examples","title":"\u4eff\u771f\u5b9e\u4f8b Simulation Examples","text":""},{"location":"#\u540c\u6b65\u7f51\u7edc\u4e2d\u77ff\u5de5\u6570\u91cf\u4e0e\u51fa\u5757\u65f6\u95f4\u7684\u5173\u7cfb","title":"\u540c\u6b65\u7f51\u7edc\u4e2d\u77ff\u5de5\u6570\u91cf\u4e0e\u51fa\u5757\u65f6\u95f4\u7684\u5173\u7cfb","text":"<p>\u540c\u6b65\u7f51\u7edc \u6a2a\u5750\u6807\u77ff\u5de5\u6570\u76ee \u7eb5\u5750\u6807\u51fa\u5757\u65f6\u95f4</p> <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u4eff\u771f\u6b21\u6570\uff1a200000\u8f6e*1\u6b21</p> </li> <li> <p>\u77ff\u5de5\u6570\uff1a10-80</p> </li> <li> <p>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</p> </li> <li> <p>\u96be\u5ea6\uff1a0000FF...</p> </li> <li> <p>q_ave = 10</p> </li> <li> <p>\u7f51\u7edc\u53c2\u6570\uff1aSynchronousNetwork</p> </li> </ul> <p></p>"},{"location":"#\u53cc\u82b1\u653b\u51fb\u6210\u529f\u7387","title":"\u53cc\u82b1\u653b\u51fb\u6210\u529f\u7387","text":"<p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u4eff\u771f\u6b21\u6570\uff1a1200000\u8f6e*1\u6b21</p> </li> <li> <p>\u77ff\u5de5\u6570\uff1a40</p> </li> <li> <p>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</p> </li> <li> <p>\u96be\u5ea6\uff1a000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>\u7f51\u7edc\u53c2\u6570\uff1a\u56db\u79cd\u7f51\u7edc\u53c2\u6570\u5747\u4e3a\u9ed8\u8ba4</p> </li> </ul> <p></p> <p>\u8fdb\u9636\u6027\u80fd\u5c55\u793a</p>"},{"location":"#\u4e0d\u540c\u7f51\u7edc\u6700\u5927\u65f6\u5ef6\u4e0b\u7684\u5206\u53c9\u7387\u5b64\u5757\u7387\u541e\u5410\u91cf\u4e0e\u4e00\u81f4\u6027","title":"\u4e0d\u540c\u7f51\u7edc\u6700\u5927\u65f6\u5ef6\u4e0b\u7684\u5206\u53c9\u7387\u3001\u5b64\u5757\u7387\u3001\u541e\u5410\u91cf\u4e0e\u4e00\u81f4\u6027","text":"<ul> <li> <p>\u8f6e\u6570\uff1a100000</p> </li> <li> <p>\u77ff\u5de5\u6570\uff1a100</p> </li> <li> <p>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</p> </li> <li> <p>q_ave:10</p> </li> <li> <p>\u96be\u5ea6\uff1a0002FF...</p> </li> <li> <p>\u7f51\u7edc\u7c7b\u578b\uff1aSynchronousNetwork\u548cBoundedDelayNetwork</p> </li> <li> <p>\u7f51\u7edc\u53c2\u6570\uff1arcvprob_start=rcvprob_inc=1/\u6700\u5927\u8f6e\u6570</p> </li> </ul> <p>\u5206\u53c9\u7387/\u5b64\u5757\u7387\u4e0e\u541e\u5410\u91cf\u968f\u6700\u5927\u4f20\u64ad\u65f6\u5ef6\u7684\u53d8\u5316\u793a\u610f\u56fe</p> <p></p> <p>\u4e00\u81f4\u6027\u6307\u6807\u968f\u6700\u5927\u4f20\u64ad\u65f6\u5ef6\u7684\u53d8\u5316\u793a\u610f\u56fe</p> <p></p> <p>\u56fe\u4e2d\uff0cCommon Prefix[0]\u3001[1]\u3001[2]\u5206\u522b\u4ee3\u8868\u5171\u540c\u524d\u7f00PDF\u7684\u524d\u4e09\u4e2a\u5206\u91cf,\u5176\u4e2d\u5e8f\u6570\u4ee3\u8868\u5171\u540c\u524d\u7f00\u4e0e\u4e3b\u94fe\u957f\u5ea6\u7684\u5dee\u503c\uff08\u8be6\u89c1\u201c\u4eff\u771f\u5668\u8f93\u51fa\u201d\u4e00\u8282\uff09\u3002</p>"},{"location":"#\u62d3\u6251\u7f51\u7edc\u4e0b\u533a\u5757\u94fe\u7684\u5171\u540c\u524d\u7f00\u6027\u8d28","title":"\u62d3\u6251\u7f51\u7edc\u4e0b\u533a\u5757\u94fe\u7684\u5171\u540c\u524d\u7f00\u6027\u8d28","text":"<ul> <li>\u8f6e\u6570\uff1a16189</li> <li>\u77ff\u5de5\u6570\uff1a10</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aTopologyNetwork</li> <li>\u7f51\u7edc\u53c2\u6570\uff1agen_net_approach=adj\uff1bgen_net_approach=adj\uff1bbandwidth_honest=0.5</li> </ul> <p>\u6bcf\u8f6e\u7ed3\u675f\u65f6\uff0c\u6240\u6709\u8282\u70b9\u7684\u672c\u5730\u94fe\u76f8\u5bf9\u5171\u540c\u524d\u7f00\u7684\u9ad8\u5ea6\u5dee\u4ee5\u53ca\u5176\u5bf9Common Prefix PDF\u7684\u5f71\u54cd\u5982\u4e0b\u56fe\u6240\u793a\u3002\u4e0b\u65b9\u65f6\u95f4\u8f74\u662f\u53d1\u751f\u94fe\u5c3e\u5207\u6362\u4e8b\u4ef6\u7684\u8f6e\u6b21\uff0c\u4e0ax\u8f74\u662f\u533a\u5757\u9ad8\u5ea6/common prefix\u540e\u7684\u533a\u5757\u957f\u5ea6\uff08suffix length\uff09\uff0cy\u8f74\u662f\u77ff\u5de5ID\u3002\u56fe\u4e2d\u7684\u70ed\u5ea6\u503c\u6307\u4ee3\u7684\u662f\u6bcf\u4e2a\u77ff\u5de5\u672c\u5730\u94fe\u94fe\u5c3e\u4e0e\u5171\u540c\u524d\u7f00\u7684\u8ddd\u79bb\u8fbe\u5230Suffix Length\u7684\u7d2f\u79ef\u6b21\u6570\u3002\u56fe\u4e2dBXX\u6307\u4ee3\u533a\u5757\u7f16\u53f7\uff0c\u4ee3\u8868\u77ff\u5de5\u5728\u5f53\u524d\u8f6e\u6b21\u672c\u5730\u94fe\u94fe\u5c3e\u7684\u72b6\u6001\uff0c\u4e0bx\u8f74\u6307\u4ee3\u8fd9\u4e9b\u533a\u5757\u6240\u5728\u7684\u9ad8\u5ea6\u3002\u70b9\u51fbPlay\u5f00\u59cb\u64ad\u653e\u52a8\u753b\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u533a\u5757\u5728\u5171\u540c\u524d\u7f00\u7684\u4e0b\u4e00\u9ad8\u5ea6\u4ea7\u751f\uff0c\u7136\u540e\u6269\u6563\u5230\u5176\u4ed6\u77ff\u5de5\uff0c\u6700\u540e\u5bfc\u81f4\u5171\u540c\u524d\u7f00\u9ad8\u5ea6+1\u3002</p>"},{"location":"#\u4e0d\u540c\u533a\u5757\u5927\u5c0f\u4e0b\u7684\u5206\u53c9\u7387\u5b64\u5757\u7387\u541e\u5410\u91cf\u4e0e\u4e00\u81f4\u6027","title":"\u4e0d\u540c\u533a\u5757\u5927\u5c0f\u4e0b\u7684\u5206\u53c9\u7387\u3001\u5b64\u5757\u7387\u3001\u541e\u5410\u91cf\u4e0e\u4e00\u81f4\u6027","text":"<ul> <li>\u8f6e\u6570\uff1a500000</li> <li>\u66f2\u7ebf\u4e0a\u5355\u70b9\u91cd\u590d\u6b21\u6570\uff1a5</li> <li>\u77ff\u5de5\u6570\uff1a20</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a0000FF...</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aTopologyNetwork</li> <li>\u7f51\u7edc\u53c2\u6570\uff1aTTL=500\uff1bgen_net_approach=rand\uff1bave_degree=8\uff1bbandwidth_honest=0.5; bandwidth_adv=5\uff1bblock_prop_times_statistic=[0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]</li> </ul> <p>\u5206\u53c9\u7387/\u5b64\u5757\u7387\u4e0e\u541e\u5410\u91cf\u968f\u533a\u5757\u5927\u5c0f\u7684\u53d8\u5316\u793a\u610f\u56fe </p> <p>\u4e00\u81f4\u6027\u6307\u6807\u968f\u533a\u5757\u5927\u5c0f\u7684\u53d8\u5316\u793a\u610f\u56fe </p> <p>\u56fe\u4e2d\uff0cCommon Prefix[0]\u3001[1]\u3001[2]\u5206\u522b\u4ee3\u8868\u5171\u540c\u524d\u7f00PDF\u7684\u524d\u4e09\u4e2a\u5206\u91cf\uff0c\u5176\u4e2d\u5e8f\u6570\u4ee3\u8868\u5171\u540c\u524d\u7f00\u4e0e\u4e3b\u94fe\u957f\u5ea6\u7684\u5dee\u503c\uff08\u8be6\u89c1\u201c\u4eff\u771f\u5668\u8f93\u51fa\u201d\u4e00\u8282\uff09\u3002</p>"},{"location":"#\u4f20\u64ad\u65f6\u5ef6\u968f\u533a\u5757\u5927\u5c0f\u7684\u53d8\u5316","title":"\u4f20\u64ad\u65f6\u5ef6\u968f\u533a\u5757\u5927\u5c0f\u7684\u53d8\u5316","text":"<ul> <li> <p>\u8f6e\u6570\uff1a100000</p> </li> <li> <p>\u77ff\u5de5\u6570\uff1a100</p> </li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>q_ave:10</li> <li>\u96be\u5ea6\uff1a00008F...</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aTopologyNetwork</li> <li>\u7f51\u7edc\u53c2\u6570\uff1aTTL=500\uff1bgen_net_approach=rand\uff1bave_degree=8\uff1bbandwidth_honest=0.5; bandwidth_adv=5\uff1bblock_prop_times_statistic=[0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]</li> </ul> <p>\u4f20\u64ad\u65f6\u5ef6\u4e0e90%\u6709\u6548\u541e\u5410\u91cf\u968f\u533a\u5757\u5927\u5c0f\u7684\u53d8\u5316\u793a\u610f\u56fe</p> <p></p> <p>\u6ce8\uff1aX%\u6709\u6548\u541e\u5410\u91cf=\u533a\u5757\u5927\u5c0f/(X%\u533a\u5757\u4f20\u64ad\u65f6\u5ef6)</p>"},{"location":"#\u4e0d\u540c\u653b\u51fb\u5411\u91cf\u4e0b\u7684\u653b\u51fb\u8005\u51fa\u5757\u5360\u6bd4\u793a\u610f\u56fe","title":"\u4e0d\u540c\u653b\u51fb\u5411\u91cf\u4e0b\u7684\u653b\u51fb\u8005\u51fa\u5757\u5360\u6bd4\u793a\u610f\u56fe","text":""},{"location":"#1-\u7b97\u529b\u653b\u51fbhonest-mining","title":"1. \u7b97\u529b\u653b\u51fb\uff08honest mining\uff09","text":""},{"location":"#\u56db\u79cd\u4e0d\u540c\u7f51\u7edc\u5bf9\u7b97\u529b\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","title":"\u56db\u79cd\u4e0d\u540c\u7f51\u7edc\u5bf9\u7b97\u529b\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","text":"<p>\u4e00\u6b21\u653b\u51fb\u6210\u529f\u7684\u5b9a\u4e49\uff1a\u653b\u51fb\u8005\u4ea7\u51fa\u533a\u5757\uff0c\u5e76\u88ab\u7f51\u7edc\u63a5\u53d7\u3002</p> <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u8f6e\u6570\uff1a100000</p> </li> <li> <p>\u66f2\u7ebf\u4e0a\u5355\u70b9\u91cd\u590d\u6b21\u6570\uff1a20</p> </li> <li> <p>\u77ff\u5de5\u6570\uff1a40</p> </li> <li> <p>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</p> </li> <li> <p>\u96be\u5ea6\uff1a000FFF...</p> </li> <li> <p>q_ave = 1</p> </li> <li> <p>\u7f51\u7edc\u53c2\u6570\uff1a\u56db\u79cd\u7f51\u7edc\u53c2\u6570\u5747\u4e3a\u9ed8\u8ba4</p> </li> </ul>"},{"location":"#2-\u533a\u5757\u622a\u7559\u653b\u51fbselfish-mining","title":"2. \u533a\u5757\u622a\u7559\u653b\u51fb\uff08selfish mining\uff09","text":""},{"location":"#\u56db\u79cd\u4e0d\u540c\u7f51\u7edc\u5bf9\u533a\u5757\u622a\u7559\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","title":"\u56db\u79cd\u4e0d\u540c\u7f51\u7edc\u5bf9\u533a\u5757\u622a\u7559\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","text":"<p>\u7eb5\u5750\u6807\u4e3a\u94fe\u8d28\u91cf\u6307\u6807\uff0c\u5373\u6700\u7ec8\u653b\u51fb\u8005\u4ea7\u51fa\u533a\u5757\u5728\u4e3b\u94fe\u4e2d\u7684\u5360\u6bd4\u3002</p> <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li>\u4eff\u771f\u6b21\u6570\uff1a100000\u8f6e*20\u6b21</li> <li>\u77ff\u5de5\u6570\uff1a40</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>q_ave = 1</li> <li>\u7f51\u7edc\u53c2\u6570\uff1a\u56db\u79cd\u7f51\u7edc\u53c2\u6570\u5747\u4e3a\u9ed8\u8ba4</li> </ul>"},{"location":"#\u77ff\u5de5\u4e0d\u540c\u62e9\u94fe\u7b56\u7565\u5bf9\u533a\u5757\u622a\u7559\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","title":"\u77ff\u5de5\u4e0d\u540c\u62e9\u94fe\u7b56\u7565\u5bf9\u533a\u5757\u622a\u7559\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","text":"<p>\u56fe\u4e2d\u7684\u7406\u8bba\u533a\u57df\u7531\u4ee5\u4e0b\u516c\u5f0f\u5f97\u5230\uff1a</p> \\[ R=\\frac{\\alpha(1-\\alpha)^{2}(4\\alpha+\\gamma(1-2\\alpha))-\\alpha^{3}}{1-\\alpha(1+(2-\\alpha)\\alpha)} \\] <p>\\(\\alpha\\)\u4e3a\u653b\u51fb\u8005\u7b97\u529b\u5360\u5168\u7f51\u6bd4\u4f8b\uff0c\\(0\\leqslant\\alpha\\leqslant\\frac{1}{2}\\)\u3002 \\(\\gamma\\)\u4e3a\u5f53\u7f51\u7edc\u4e2d\u5b58\u5728\u8bda\u5b9e\u94fe\uff08\u6700\u65b0\u7684\u533a\u5757\u7531\u8bda\u5b9e\u8282\u70b9\u4ea7\u51fa\uff09\u4e0e\u653b\u51fb\u94fe\uff08\u4ece\u67d0\u4e00\u4e2a\u533a\u5757\u5f00\u59cb\u5230\u6700\u65b0\u7684\u533a\u5757\u5747\u4e3a\u653b\u51fb\u8005\u4ea7\u751f\uff09\u5206\u53c9\u65f6\uff0c\u9009\u62e9\u5728\u653b\u51fb\u94fe\u4e0a\u7ee7\u7eed\u6316\u77ff\u7684\u8bda\u5b9e\u77ff\u5de5\u5360\u5176\u81ea\u8eab\u7684\u6bd4\u4f8b\uff0c\\(0\\leqslant\\gamma\\leqslant1\\)\u3002 \u6ce8\uff1a\u77ff\u5de5\u62e9\u94fe\u7b56\u7565\u4e3a\u5185\u90e8\u6d4b\u8bd5\u529f\u80fd\uff0c\u6682\u672a\u5f00\u653e\u3002\u4f46\u672c\u4eff\u771f\u5668\u9075\u5faa\u7740\\(\\gamma=0\\)\u7684\u6316\u77ff\u7b56\u7565\uff0c\u5373\u6240\u6709\u8bda\u5b9e\u8282\u70b9\u9ed8\u8ba4\u5728\u8bda\u5b9e\u94fe\u5206\u652f\u4e0a\u7ee7\u7eed\u6316\u77ff\u3002\u56e0\u6b64\u4f7f\u7528\u8005\u53ef\u4ee5\u5229\u7528\u4ee5\u4e0b\u7406\u8bba\u66f2\u7ebf\u516c\u5f0f\u9a8c\u8bc1\u3002</p> \\[ R=\\frac{4\\alpha^{2}(1-\\alpha)^{2}-\\alpha^{3}}{1-\\alpha(1+(2-\\alpha)\\alpha)} \\] <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li>\u4eff\u771f\u6b21\u6570\uff1a100000\u8f6e*20\u6b21</li> <li>\u77ff\u5de5\u6570\uff1a40</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>q_ave = 1</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aSynchronousNetwork</li> </ul>"},{"location":"#3-\u53cc\u82b1\u653b\u51fbdouble-spending","title":"3. \u53cc\u82b1\u653b\u51fb\uff08double spending\uff09","text":""},{"location":"#\u4e0d\u540c\u7f51\u7edc\u5bf9\u53cc\u82b1\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","title":"\u4e0d\u540c\u7f51\u7edc\u5bf9\u53cc\u82b1\u653b\u51fb\u7684\u5f71\u54cd\u793a\u610f\u56fe","text":"<p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li>\u4eff\u771f\u6b21\u6570\uff1a1200000\u8f6e*1\u6b21</li> <li>\u77ff\u5de5\u6570\uff1a40</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>q_ave = 1</li> <li>\u7f51\u7edc\u53c2\u6570\uff1a\u56db\u79cd\u7f51\u7edc\u53c2\u6570\u5747\u4e3a\u9ed8\u8ba4</li> </ul>"},{"location":"#\u4e0d\u540c\u7b56\u7565\u5bf9\u53cc\u82b1\u653b\u51fb\u7684\u5f71\u54cd\u4e0e\u7406\u8bba\u5bf9\u6bd4\u793a\u610f\u56fe","title":"\u4e0d\u540c\u7b56\u7565\u5bf9\u53cc\u82b1\u653b\u51fb\u7684\u5f71\u54cd\u4e0e\u7406\u8bba\u5bf9\u6bd4\u793a\u610f\u56fe","text":"<p>\u56fe\u4e2d\u7684\u7406\u8bba\u66f2\u7ebf\u7531\u4ee5\u4e0b\u516c\u5f0f\u5f97\u5230\uff1a</p> \\[P(N,N_g,\\beta)=1-\\sum_{n=0}^{N}\\begin{pmatrix}n+N-1\\\\ n \\end{pmatrix}\\left(\\frac{1}{1+\\beta}\\right)^{N}\\left(\\frac{\\beta}{1+\\beta}\\right)^{n}\\left(\\frac{1-\\beta^{N-n+1}}{1-\\beta^{Ng+1}}\\right)\\] <p>\\(N\\)\u4e3a\u653b\u51fb\u8005\u7b49\u5f85\u786e\u8ba4\u533a\u5757\u7684\u6570\u91cf\uff0c\u5373\u653b\u51fb\u8005\u4f1a\u7b49\u5f85\u8bda\u5b9e\u94fe\u9ad8\u5ea6\u589e\u957f\\(N\\)\u4e2a\u533a\u5757\u540e\u624d\u4f1a\u9009\u62e9\u53d1\u5e03\u4e0e\u5426\u3002 \\(N_g\\)\u8868\u793a\u5f53\u653b\u51fb\u8005\u843d\u540e\u8bda\u5b9e\u94fe\\(N_g\\)\u4e2a\u533a\u5757\u65f6\u653e\u5f03\u5f53\u524d\u653b\u51fb\u3002 \\(\\beta\\)\u4e3a\u653b\u51fb\u8005\u4e0e\u8bda\u5b9e\u77ff\u5de5\u7b97\u529b\u4e4b\u6bd4\uff0c\\(0\\leqslant\\beta\\leqslant1\\)\u3002</p> <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li>\u4eff\u771f\u6b21\u6570\uff1a3000000\u8f6e*1\u6b21</li> <li>\u77ff\u5de5\u6570\uff1a40</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>q_ave = 1</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aSynchronousNetwork</li> </ul>"},{"location":"#4-\u65e5\u8680\u653b\u51fbeclipse-attack","title":"4. \u65e5\u8680\u653b\u51fb\uff08eclipse attack\uff09","text":""},{"location":"#\u53d7\u65e5\u8680\u653b\u51fb\u5f71\u54cd\u4e0b\u7684\u53cc\u82b1\u653b\u51fb\u793a\u610f\u56fe","title":"\u53d7\u65e5\u8680\u653b\u51fb\u5f71\u54cd\u4e0b\u7684\u53cc\u82b1\u653b\u51fb\u793a\u610f\u56fe","text":"<p>\u56fe\u4e2d\u7eff\u8272\u66f2\u7ebf Theory Shift 10% \u4e3a\u66f2\u7ebf Theory\u5411\u5de6\u5e73\u79fb\u4e00\u4e2a\u5355\u4f4d\u5f97\u5230\u3002</p> <p></p> <p>\u53c2\u6570\u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li>\u4eff\u771f\u6b21\u6570\uff1a3000000\u8f6e*1\u6b21</li> <li>\u77ff\u5de5\u6570\uff1a20</li> <li>\u5171\u8bc6\u7c7b\u578b\uff1aPoW</li> <li>\u96be\u5ea6\uff1a000FFF...</li> <li>q_ave = 1</li> <li>\u7f51\u7edc\u7c7b\u578b\uff1aTopologyNetwork</li> <li>\u7f51\u7edc\u53c2\u6570\uff1a\u56fe\u4e2d\u7684Full connect topolog\u3001Random connect topolog\u3001Eclipse 10% miners \u4ee5\u53ca Eclipse 20% miners\u4f7f\u7528\u56fa\u5b9a\u7684\u90bb\u63a5\u77e9\u9635\u751f\u6210\u62d3\u6251\u7f51\u7edc\uff0c\u5176\u90bb\u63a5\u77e9\u9635\u5206\u522b\u4e3a\\(TP_F\\)\u3001\\(TP_R\\)\u3001\\(TP_1\\)\u548c\\(TP_2\\)\uff0c\u6b64\u5916\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4<ul> <li>\\(TP_F\\)\u77e9\u9635\u4e3a\u9664\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a0\u5916\u5747\u4e3a1\u3002</li> <li>\\(TP_R\\)\u77e9\u9635\u4e3a\u968f\u673a\u751f\u6210\u7684\u62d3\u6251\u7f51\u7edc\u3002</li> <li>\\(TP_1\\)\u77e9\u9635\u5982\u56feTP1\uff08\u5b64\u7acb\u8282\u70b9\u4e3a18\uff0c19\uff09</li> <li>\\(TP_2\\)\u77e9\u9635\u5982\u56feTP2\uff08\u5b64\u7acb\u8282\u70b9\u4e3a16\uff0c17\uff0c18\uff0c19\uff09</li> </ul> </li> </ul> <p>TP1\u90bb\u63a5\u77e9\u9635\uff1a</p> <p></p> <p>TP2\u90bb\u63a5\u77e9\u9635\uff1a</p> <p></p> <p>\u6ce8\uff1a\u5728\u8bbe\u7f6e\u653b\u51fb\u8005\u65f6\u8bf7\u7ed5\u5f00\u5b64\u7acb\u8282\u70b9\uff0c\u624b\u52a8\u8bbe\u7f6e\u3002</p>"},{"location":"#\u5f00\u53d1\u8005\u6587\u6863-Developers-Document","title":"\u5f00\u53d1\u8005\u6587\u6863 Developer's Document","text":"<p>\u8be6\u89c1developer-guide</p>"},{"location":"#\u8d21\u732e\u8005-Contributors","title":"\u8d21\u732e\u8005 Contributors","text":"<p>\u66f9\u82c7\u676d Weihang Cao</p> <ul> <li>\u4e3b\u8981\u8d1f\u8d23\u6574\u4f53\u6846\u67b6\uff0c\u5171\u8bc6\u5c42\u3001\u8bc4\u4f30\u5c42\u7684\u4ee3\u7801\u7f16\u5199\uff0c\u7edf\u7b79\u9879\u76ee\u8fdb\u5ea6   </li> </ul> <p>\u9648\u70b3\u6587 Bingwen Chen</p> <ul> <li>\u4e3b\u8981\u8d1f\u8d23\u7f51\u7edc\u5c42\u90e8\u5206\u7684\u4ee3\u7801\u7f16\u5199  </li> </ul> <p>\u9648\u9633 Yang Chen</p> <ul> <li>\u4e3b\u8981\u8d1f\u8d23\u653b\u51fb\u8005\u90e8\u5206\u7684\u4ee3\u7801\u7f16\u5199  </li> </ul> <p>\u5d14\u81ea\u7fd4 Zixiang Cui</p> <ul> <li>\u4e3b\u8981\u8d1f\u8d23\u5bf9\u5171\u8bc6\u5c42\u548c\u57fa\u7840\u6846\u67b6\u8fdb\u884c\u4f18\u5316   </li> </ul> <p>\u9648\u559c\u5e74 Xinian Chen</p> <ul> <li>\u4e3b\u8981\u8d1f\u8d23\u4eff\u771f\u5668\u7684\u6d4b\u8bd5\u4e0e\u4f18\u5316   </li> </ul> <p>\u51cc\u6615\u5f64 Xintong Ling</p> <ul> <li>\u6307\u5bfc\u8001\u5e08</li> </ul>"},{"location":"developer-guide/","title":"ChainXim \u5f00\u53d1\u8005\u6587\u6863 Developer Guide","text":""},{"location":"developer-guide/#\u603b\u4f53\u67b6\u6784-Framework","title":"\u603b\u4f53\u67b6\u6784 Framework","text":"<p>ChainXim\u4e3b\u8981\u7531Environment\u3001Miner\u3001Adversary\u3001Network\u3001Consensus\u3001Blockchain\u516d\u4e2a\u7ec4\u4ef6\u7ec4\u6210\uff0c\u5176\u4e2dConsensus\u3001Adversary\u4e0eNetwork\u4e09\u5927\u7ec4\u4ef6\u53ef\u914d\u7f6e\u3001\u53ef\u66ff\u6362\uff0c\u4ece\u800c\u9002\u5e94\u4e0d\u540c\u7c7b\u578b\u7684\u5171\u8bc6\u534f\u8bae\u3001\u653b\u51fb\u5411\u91cf\u4e0e\u7f51\u7edc\u6a21\u578b\u3002\u516d\u4e2a\u62bd\u8c61\u7ec4\u4ef6\u4e4b\u95f4\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u6bcf\u4e2a\u62bd\u8c61\u7ec4\u4ef6\u7531\u5bf9\u5e94\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u5b9e\u73b0\uff0c\u5176\u4e2dConsensus\u5bf9\u5e94\u7684Consensus\u7c7b\u4ee5\u53caNetwork\u5bf9\u5e94\u7684Network\u7c7b\u4ec5\u4e3a\u62bd\u8c61\u7c7b\uff0c\u8fd8\u9700\u8981\u6d3e\u751f\u51fa\u6709\u5b9e\u9645\u529f\u80fd\u7684\u7c7b\uff0c\u4ee5\u5b9e\u73b0\u5404\u7c7b\u5171\u8bc6\u534f\u8bae\u4e0e\u7f51\u7edc\u6a21\u578b\u3002</p> <p>\u76ee\u524d\u5df2\u5b9e\u73b0\u7684\u5171\u8bc6\u534f\u8bae\uff08\u76ee\u524dconsensus_type\u914d\u7f6e\u7684\u6240\u6709\u53ef\u9009\u9879\uff09\uff1a</p> \u5171\u8bc6\u7c7b(\u6d3e\u751f\u81eaConsensus) \u8bf4\u660e consensus.PoW \u5de5\u4f5c\u91cf\u8bc1\u660e\u673a\u5236 <p>\u76ee\u524d\u5df2\u5b9e\u73b0\u7684\u7f51\u7edc\u6a21\u578b\uff08\u76ee\u524dnetwork_type\u914d\u7f6e\u7684\u6240\u6709\u53ef\u9009\u9879\uff09\uff1a</p> \u7f51\u7edc\u7c7b(\u6d3e\u751f\u81eaNetwork) \u8bf4\u660e network.SynchronousNetwork \u540c\u6b65\u7f51\u7edc\u6a21\u578b network.DeterPropNetwork \u57fa\u4e8e\u4f20\u64ad\u5411\u91cf\u7684\u7f51\u7edc\u6a21\u578b network.StochPropNetwork \u5ef6\u8fdf\u6709\u754c\u3001\u63a5\u6536\u6982\u7387\u968f\u8f6e\u6b21\u589e\u52a0\u9012\u589e\u7684\u7f51\u7edc\u6a21\u578b network.TopologyNetwork \u590d\u6742\u62d3\u6251\u7f51\u7edc\u6a21\u578b\uff0c\u53ef\u4ee5\u751f\u6210\u968f\u673a\u7f51\u7edc <p>Environment\u662f\u4eff\u771f\u5668\u7684\u6838\u5fc3\u3002\u7528\u6237\u6267\u884cmain.py\u4e2d\u7684\u4e3b\u7a0b\u5e8f\u5f00\u59cb\u4eff\u771f\u3002\u4e3b\u7a0b\u5e8f\u6839\u636e\u4eff\u771f\u53c2\u6570\u521d\u59cb\u5316Environment\u5bf9\u8c61\uff0c\u8c03\u7528<code>exec</code>\u542f\u52a8\u4eff\u771f\u5faa\u73af\uff0c\u4eff\u771f\u7ed3\u675f\u540e\u8c03\u7528<code>view_and_write</code>\u751f\u6210\u4eff\u771f\u7ed3\u679c\u5e76\u5199\u5165Results\u6587\u4ef6\u5939\u3002</p> <p>ChainXim\u5c06\u65f6\u95f4\u79bb\u6563\u5316\u5904\u7406\uff0c\u62bd\u8c61\u4e3a\u201c\u8f6e\u6b21\u201d\uff08round\uff09\uff0c\u4ee5\u8f6e\u6b21\u4e3a\u5355\u4f4d\u6a21\u62df\u6bcf\u4e2a\u8282\u70b9\u7684\u884c\u4e3a\u3002\u6bcf\u4e2a\u8f6e\u6b21\u4f9d\u6b21\u6fc0\u6d3b\u77ff\u5de5\u8282\u70b9\u6267\u884c\u5171\u8bc6\u64cd\u4f5c\uff0c\u6240\u6709\u8282\u70b9\u90fd\u88ab\u6fc0\u6d3b\u4e00\u904d\u4e4b\u540e\uff0c\u8c03\u7528\u7f51\u7edc\u7c7b\u4e2d\u7684<code>diffuse</code>\u65b9\u6cd5\u5728\u77ff\u5de5\u8282\u70b9\u95f4\u8fdb\u884c\u6d88\u606f\u4f20\u8f93\u3002(\u8be6\u89c1\u73af\u5883\u4e0e\u6a21\u578b\u5047\u8bbe\u7ae0\u8282)</p>"},{"location":"developer-guide/#\u73af\u5883\u4e0e\u6a21\u578b\u5047\u8bbe-Environment--Model-Assumptions","title":"\u73af\u5883\u4e0e\u6a21\u578b\u5047\u8bbe Environment &amp; Model Assumptions","text":"<p>Environment\u7ec4\u4ef6\u662fChainXim\u7a0b\u5e8f\u8fd0\u884c\u7684\u57fa\u77f3\uff0c\u5176\u4e3b\u8981\u5b8c\u6210\u4e86\u4eff\u771f\u5668\u7cfb\u7edf\u6a21\u578b\u7684\u67b6\u6784\uff0c\u4ee5\u4fbf\u4e0e\u5176\u5b83\u4e94\u5927\u7ec4\u4ef6\u8fdb\u884c\u5bf9\u63a5\u3002\u540c\u65f6\u4e5f\u5b9a\u4e49\u4e86\u4eff\u771f\u5668\u4e2d\u4e3b\u8981\u7684\u4e00\u4e9b\u53c2\u91cf\uff0c\u5e76\u5c01\u88c5\u4e86\u4eff\u771f\u5668\u5404\u7ec4\u4ef6\u4e2d\u9700\u8981\u8fd0\u7528\u7684\u90e8\u5206\u51fd\u6570\u3002\u4e3a\u4fbf\u4e8e\u7406\u89e3\u8be5\u90e8\u5206\u5185\u5bb9\uff0c\u4e0b\u9762\u5c06\u9996\u5148\u4ecb\u7ecdChainXim\u7684\u6a21\u578b\u5047\u8bbe\u3002</p>"},{"location":"developer-guide/#\u6a21\u578b\u5047\u8bbe","title":"\u6a21\u578b\u5047\u8bbe","text":"<p>ChainXim\u7684\u7cfb\u7edf\u6a21\u578b\u8bbe\u8ba1\u4e3b\u8981\u53c2\u8003\u4e86\u4e0b\u9762\u7684\u8bba\u6587\uff1a</p> <ul> <li>J. A. Garay, A. Kiayias and N. Leonardos, \"The bitcoin backbone protocol: Analysis and applications\", Eurocrypt, 2015. https://eprint.iacr.org/2014/765.pdf</li> </ul> <p>ChainXim\u5c06\u8fde\u7eed\u7684\u65f6\u95f4\u5212\u5206\u4e3a\u4e00\u4e2a\u4e2a\u79bb\u6563\u7684\u8f6e\u6b21\uff0c\u4e14\u7f51\u7edc\u4e2d\u7684\u5168\u90e8\u8282\u70b9\uff08\u5305\u542b\u8bda\u5b9e\u77ff\u5de5\u4e0e\u975e\u8bda\u5b9e\u653b\u51fb\u8005\uff09\u90fd\u5c06\u5728\u6bcf\u4e2a\u8f6e\u6b21\u5185\u8fdb\u884c\u4e00\u5b9a\u6570\u76ee\u7684\u64cd\u4f5c\uff0c\u4ee5\u5b8c\u6210\u8bb0\u8d26\u6743\u7684\u7ade\u4e89\u4e0e\u65b0\u533a\u5757\u7684\u751f\u6210\u4e0e\u4f20\u64ad\u3002\u5b9a\u4e49\u7f51\u7edc\u4e2d\u77ff\u5de5\u603b\u6570\u4e3an\uff0c\u5176\u4e2d\u6709t\u4e2a\u77ff\u5de5\u96b6\u5c5e\u4e8e\u975e\u8bda\u5b9e\u7684\u653b\u51fb\u8005\u3002\u6bcf\u4e2a\u8f6e\u6b21\u4e2d\uff0c\u5168\u4f53\u77ff\u5de5\u6839\u636e\u5404\u81ea\u7684\u7f16\u53f7\u88ab\u4f9d\u6b21\u5524\u9192\uff0c\u5e76\u6839\u636e\u81ea\u5df1\u7684\u8eab\u4efd\u91c7\u53d6\u884c\u52a8\uff0c\u8bda\u5b9e\u77ff\u5de5\u5c06\u4e25\u683c\u4f9d\u7167\u5171\u8bc6\u534f\u8bae\u7684\u89c4\u5219\u4ea7\u751f\u533a\u5757\uff1b\u653b\u51fb\u8005\u5219\u4f1a\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u9075\u5b88\u534f\u8bae\u6216\u53d1\u8d77\u653b\u51fb\u3002\u6ce8\u610f\uff0c\u6bcf\u4e2a\u8f6e\u6b21\u4e2d\uff0c\u653b\u51fb\u6a21\u5757\u53ea\u4f1a\u88ab\u89e6\u53d1\u4e00\u6b21\uff0c\u6bcf\u6b21\u89e6\u53d1\u90fd\u4f1a\u8fdb\u884c\u4e00\u6b21\u5b8c\u6574\u7684\u653b\u51fb\u884c\u4e3a\u3002\u5f53\u524d\u7248\u672c\u4e2d\uff0c\u653b\u51fb\u8005\u6bcf\u8f6e\u6b21\u4e2d\u4f1a\u968f\u673a\u5728\u8f6e\u5230\u67d0\u4e00\u4e2a\u96b6\u5c5e\u4e8e\u653b\u51fb\u8005\u7684\u77ff\u5de5\u65f6\u89e6\u53d1\u3002\u867d\u7136\u4e0d\u540c\u77ff\u5de5\u88ab\u5524\u9192\u7684\u6b21\u5e8f\u4e0d\u540c\uff0c\u4f46\u540c\u4e00\u8f6e\u6b21\u5185\u5b9e\u9645\u4e0a\u4e0d\u5b58\u5728\u5148\u540e\u987a\u5e8f\u3002 </p> <p>\u4e3a\u6a21\u62df\u4e0a\u8ff0\u5404\u65b9\u5728\u73b0\u5b9e\u533a\u5757\u94fe\u7cfb\u7edf\u4e2d\u7684\u5177\u4f53\u64cd\u4f5c\uff0cChainXim\u53c2\u8003\u4e86\u8bba\u6587\u4e2d\u63d0\u51fa\u7684\u4e24\u79cd\u91cd\u8981\u65b9\u6cd5\uff0c\u5b83\u4eec\u5206\u522b\u4e3a\u968f\u673a\u9884\u8a00\uff08Random Oracle\uff09\u548c\u6269\u6563\uff08Diffuse\uff09\u65b9\u6cd5\uff0c\u5176\u5728ChainXim\u4e2d\u7684\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <ul> <li>\u968f\u673a\u9884\u8a00\uff08Random Oracle\uff09\uff1a\u4ee5PoW\u5171\u8bc6\u4e3a\u4f8b\uff0c\u5404\u77ff\u5de5\u5728\u6bcf\u4e00\u8f6e\u6b21\u6700\u591a\u53ef\u6267\u884cq\u6b21\u884c\u52a8\uff08\u4e0d\u540c\u77ff\u5de5\u7684q\u53ef\u80fd\u4e3a\u4e0d\u540c\u503c\uff09\uff0c\u5373q\u6b21\u8fdb\u884c\u54c8\u5e0c\u8ba1\u7b97\u7684\u673a\u4f1a\u3002\u6bcf\u4e2a\u77ff\u5de5\u90fd\u5c06\u8fdb\u884cq\u6b21\u968f\u673a\u67e5\u8be2\u64cd\u4f5c\uff0c\u5373\u5c06\u67d0\u4e00\u968f\u673a\u6570\u8f93\u5165\u54c8\u5e0c\u51fd\u6570\uff0c\u9a8c\u8bc1\u5176\u7ed3\u679c\u662f\u5426\u5c0f\u4e8e\u7ed9\u5b9a\u96be\u5ea6\u503c\u3002\u82e5\u77ff\u5de5\u6210\u529f\u627e\u5230\u4e86\u4f4e\u4e8e\u96be\u5ea6\u503c\u7684\u7ed3\u679c\uff0c\u5219\u89c6\u4e3a\u5176\u6210\u529f\u4ea7\u751f\u4e86\u4e00\u4e2a\u533a\u5757\u3002\u540c\u4e00\u8f6e\u6b21\u4e2d\u4e0d\u540c\u77ff\u5de5\u4ea7\u751f\u7684\u533a\u5757\u89c6\u4f5c\u662f\u540c\u65f6\u4ea7\u751f\u7684\u3002</li> <li>\u6269\u6563\uff08Diffuse\uff09\uff1a\u5f53\u77ff\u5de5\u4ea7\u751f\u4e86\u65b0\u7684\u533a\u5757\uff0c\u5b83\u4f1a\u5c06\u8fd9\u4e2a\u533a\u5757\u4e0a\u4f20\u5230\u7f51\u7edc\uff0c\u7531\u7f51\u7edc\u5c42\u8d1f\u8d23\u6d88\u606f\u4f20\u64ad\u3002\u6839\u636e\u7f51\u7edc\u5c42\u914d\u7f6e\u7684\u4e0d\u540c\uff0c\u4f20\u64ad\u903b\u8f91\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u6b64\u5916\uff0c\u653b\u51fb\u8005\u4e5f\u53ef\u80fd\u9009\u62e9\u4e0d\u4e0a\u4f20\u81ea\u5df1\u672c\u8f6e\u6b21\u6316\u5230\u7684\u533a\u5757\uff0c\u53ea\u6709\u4e0a\u4f20\u5230\u7f51\u7edc\u5c42\u7684\u533a\u5757\u624d\u4f1a\u7ecf\u7531\u8be5\u65b9\u6cd5\u8fdb\u884c\u4f20\u64ad\u3002\u5728ChainXim\u7684\u6a21\u578b\u4e2d\uff0c\u8ba4\u4e3a\u653b\u51fb\u8005\u6240\u63a7\u5236\u7684\u77ff\u5de5\u62e5\u6709\u72ec\u7acb\u4e8e\u533a\u5757\u94fe\u7cfb\u7edf\u7684\u4e13\u7528\u901a\u4fe1\u901a\u9053\uff0c\u5373\u4efb\u4e00\u96b6\u5c5e\u4e8e\u653b\u51fb\u8005\u7684\u77ff\u5de5\u4e00\u65e6\u63a5\u6536\u5230\u67d0\u4e2a\u533a\u5757\uff0c\u5219\u653b\u51fb\u8005\u9ebe\u4e0b\u7684\u6240\u6709\u77ff\u5de5\u5747\u4f1a\u5728\u4e0b\u4e00\u8f6e\u6b21\u6536\u5230\u8be5\u533a\u5757\u3002</li> </ul> <p>\u6ce8\u610f\uff0c\u4e0a\u8ff0\u7684\u6269\u6563\u65b9\u6cd5\u4e3b\u8981\u4e0eNetwork\u7ec4\u4ef6\u5bf9\u63a5\uff0c\u800c\u968f\u673a\u9884\u8a00\u65b9\u6cd5\u5219\u4e0eConsensus\u7ec4\u4ef6\u5bf9\u63a5\u3002\u968f\u5373\u9884\u8a00\u5efa\u6a21\u6700\u521d\u662f\u9488\u5bf9\u6bd4\u7279\u5e01\u4e2d\u7684\u7684PoW\u5171\u8bc6\u534f\u8bae\u63d0\u51fa\u7684\u3002\u4e3a\u4f7f\u4eff\u771f\u5668\u80fd\u591f\u517c\u5bb9\u5176\u5b83\u5171\u8bc6\uff0c\u4f8b\u5982PBFT\u8fd9\u7c7b\u57fa\u4e8e\u4ea4\u4e92\u7684\u5171\u8bc6\uff0cChainXim\u540e\u7eed\u5c06\u8003\u8651\u5728Consensus\u7ec4\u4ef6\u4e2d\u5bf9\u8fd9\u4e00\u65b9\u6cd5\u8fdb\u884c\u91cd\u8f7d\u3002 Environment\u4e2d\u8bbe\u7f6e\u4e86exec\u51fd\u6570\u6765\u4e00\u6b21\u6027\u5b8c\u6210\u4e0a\u8ff0\u4e24\u79cd\u65b9\u6cd5\uff1a\u6bcf\u4e00\u8f6e\u6b21\u4e2d\uff0c\u6240\u6709\u77ff\u5de5\u5c06\u4f9d\u6b21\u88ab\u5524\u9192\uff0c\u5e76\u5404\u81ea\u6267\u884c\u968f\u673a\u9884\u8a00\u65b9\u6cd5\uff1a\u5982\u679c\u77ff\u5de5\u4e3a\u8bda\u5b9e\u65b9\uff0c\u90a3\u4e48exec\u51fd\u6570\u5c06\u8c03\u7528Consensus\u7ec4\u4ef6\u6267\u884c\u8fdb\u884c\u76f8\u5173\u64cd\u4f5c\uff1b\u5982\u679c\u6fc0\u6d3b\u4e86\u653b\u51fb\u8005\uff0c\u5219\u8c03\u7528Attacker\u7ec4\u4ef6\u8fdb\u884c\u76f8\u5173\u64cd\u4f5c\u3002\uff08\u6bcf\u4e00\u8f6e\u6b21\u4e2d\u53ea\u4f1a\u8c03\u7528\u4e00\u6b21Attacker\u7ec4\u4ef6\uff09 \u5f53\u6240\u6709\u77ff\u5de5\u90fd\u5b8c\u6210\u81ea\u5df1\u7684\u884c\u52a8\uff0c\u5373\u56de\u5408\u7ed3\u675f\u65f6\uff0cexec\u51fd\u6570\u4e2d\u5c06\u6267\u884cNetwork\u7ec4\u4ef6\u4e2d\u7684\u6269\u6563\u65b9\u6cd5\uff0c\u5728\u7f51\u7edc\u4e2d\u4f20\u64ad\u533a\u5757\u3002\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u4f8b\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u8be5\u5b9e\u4f8b\u4e2dn=4\uff0ct=1\u3002\u5f53\u7b2ck\u8f6e\u6b21\uff08Round k\uff09\u5f00\u59cb\u65f6\uff0c\u56db\u4e2a\u77ff\u5de5\u5c06\u4f9d\u7167\u5e8f\u53f7\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u88ab\u4f9d\u6b21\u5524\u9192\uff0c\u4e14\u5404\u81ea\u5b8c\u6210\u81ea\u5df1\u7684q\u6b21\u884c\u52a8\u3002\u5176\u4e2d\uff0c\u4ec5\u67092\u53f7\u77ff\u5de5\uff08Miner 2\uff09\u6210\u529f\u83b7\u5f97\u4e86\u8bb0\u8d26\u6743\uff0c\u5e76\u5c06\u4ea7\u751f\u7684\u533a\u5757\u8fdb\u884c\u4f20\u64ad\uff08Diffuse\u65b9\u6cd5\uff09\u3002\u7531\u4e8e\u5404\u81ea\u7684\u4f20\u64ad\u65f6\u5ef6\u4e0d\u5c3d\u76f8\u540c\uff0c1\u53f7\u77ff\u5de5\u4e0e3\u53f7\u77ff\u5de5\u5728\u7b2ck+1\u8f6e\u6b21\u4fbf\u5df2\u6210\u529f\u63a5\u6536\u5230\u4e86\u8be5\u533a\u5757\uff0c\u800c4\u53f7\u77ff\u5de5\u5219\u5230\u7b2ck+2\u8f6e\u6b21\u624d\u6536\u5230\u6b64\u533a\u5757\u3002\u7b2ck+1\u8f6e\u6b21\u6ca1\u6709\u77ff\u5de5\u5b8c\u6210\u51fa\u5757\uff0c\u7b2ck+2\u8f6e\u6b21\u4e2d1\u53f7\u4e0e4\u53f7\u77ff\u5de5\u5219\u90fd\u5b8c\u6210\u4e86\u51fa\u5757\uff0c\u4f46\u8fd9\u91cc4\u53f7\u77ff\u5de5\u4e3a\u653b\u51fb\u8005\uff0c\u5b83\u91c7\u53d6\u4e86\u81ea\u79c1\u6316\u77ff\u7684\u653b\u51fb\u624b\u6bb5\uff0c\u5c06\u968f\u673a\u9884\u8a00\u4e2d\u4ea7\u751f\u7684\u533a\u5757\u7f6e\u4e8e\u79c1\u94fe\u4e0a\uff0c\u5728\u6269\u6563\u4e2d\u4e5f\u6682\u4e0d\u4f20\u64ad\u7ed9\u5176\u5b83\u77ff\u5de5\u3002\u7b2ck+3\u8f6e\u6b21\u4e2d\u53ea\u67094\u53f7\u653b\u51fb\u8005\u77ff\u5de5\u5b8c\u6210\u51fa\u5757\uff0c\u8fd9\u65f6\u5728\u5b83\u7684\u89c6\u91ce\u4e2d\uff0c\u81ea\u5df1\u7684\u79c1\u94fe\u5df2\u7ecf\u957f\u4e8e\u4e3b\u94fe\uff0c\u6545\u5b83\u4f1a\u5c06\u79c1\u94fe\u901a\u8fc7\u6269\u6563\u65b9\u6cd5\u4f20\u64ad\u7ed9\u5176\u5b83\u77ff\u5de5\uff0c\u533a\u5757\u94fe\u81f3\u6b64\u53d1\u751f\u5206\u53c9\uff0c\u4e14\u5728\u6536\u5230\u8be5\u79c1\u94fe\u77ff\u5de5\u7684\u89c6\u91ce\u4e2d\uff0c\u653b\u51fb\u8005\u7684\u94fe\u4e3a\u6700\u957f\u5408\u6cd5\u94fe\u3002\u7b2ck+4\u8f6e\u6b21\u4e2d\uff0c\u5982\u679c1\u53f7\u62162\u53f7\u77ff\u5de5\u6ca1\u6709\u6536\u5230\u79c1\u94fe\uff0c\u5e76\u7ee7\u7eed\u5728\u8bda\u5b9e\u4e3b\u94fe\u4e0a\u6316\u77ff\uff0c\u5219\u5b83\u4eec\u7684\u5229\u76ca\u5c06\u53ef\u80fd\u53d7\u5230\u635f\u5bb3\u3002</p> <p>\u7efc\u4e0a\u6240\u8ff0\uff0cChainXim\u5229\u7528\u79bb\u6563\u7684\u8f6e\u6b21\u4e0e\u53d7\u9650\u7684\u884c\u52a8\u6b21\u6570\u6709\u6548\u62bd\u8c61\u4e86\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u533a\u5757\u7684\u4ea7\u751f\u4e0e\u4f20\u64ad\u3002</p>"},{"location":"developer-guide/#\u4eff\u771f\u5668\u73af\u5883","title":"\u4eff\u771f\u5668\u73af\u5883","text":"<p>\u603b\u4f53\u6765\u8bf4\uff0c\u73af\u5883\u7ec4\u4ef6\u5b8c\u6210\u4e86\u6574\u4f53\u6a21\u578b\u7684\u642d\u5efa\u3002\u521d\u59cb\u5316\u51fd\u6570\u6839\u636e\u8f93\u5165\u53c2\u6570\u8bbe\u7f6e\u57fa\u7840\u53c2\u6570\uff0c\u8c03\u7528\u4e86\u5176\u5b83\u7ec4\u4ef6\u8fdb\u884c\u5404\u81ea\u7684\u521d\u59cb\u5316\uff0c\u8bbe\u7f6en\u4e2a\u77ff\u5de5\u3001\u9009\u5b9at\u4e2a\u653b\u51fb\u8005\u3001\u914d\u7f6e\u5168\u5c40\u533a\u5757\u94fe\u3001\u7f51\u7edc\u7ec4\u4ef6\u3001\u653b\u51fb\u7ec4\u4ef6\u7b49\uff0c\u7528\u4e8e\u540e\u7eed\u8fd0\u884c\u4e0e\u8bc4\u4f30\u3002\u73af\u5883\u7ec4\u4ef6\u4e2d\u7684\u4e3b\u8981\u51fd\u6570\u53ca\u5176\u5404\u81ea\u7684\u53c2\u6570\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e select_adversary_random - \u968f\u673a\u9009\u53d6\u4e00\u5b9a\u6570\u91cf\u7684\u77ff\u5de5\u4f5c\u4e3a\u653b\u51fb\u8005 select_adversary *Miner_ID:tuple \u901a\u8fc7\u8f93\u5165\u6307\u5b9aID\uff0c\u8bbe\u7f6e\u76f8\u5e94\u77ff\u5de5\u4e3a\u653b\u51fb\u8005 envir_create_global_chain - \u521b\u5efa\u73af\u5883\u4e2d\u7684\u5168\u5c40\u533a\u5757\u94fe attack_excute round:int \u6267\u884cattack\u4e2d\u5b9a\u4e49\u7684\u653b\u51fb\u7c7b\u578b exec num_rounds:int, max_height:int, process_bar_type:str \u6267\u884c\u6307\u5b9a\u8f6e\u6570\u6216\u6307\u5b9a\u9ad8\u5ea6\u7684\u4eff\u771f\uff0c\u901a\u8fc7num_rounds\u8bbe\u7f6e\u4eff\u771f\u8fd0\u884c\u7684\u603b\u8f6e\u6570\uff0c\u901a\u8fc7max_height\u8bbe\u7f6e\u4eff\u771f\u7ec8\u6b62\u7684\u9ad8\u5ea6 assess_common_prefix - \u8ba1\u7b97\u8bc4\u4f30\u533a\u5757\u94fe\u7684\u5171\u540c\u524d\u7f00\u7279\u6027 assess_common_prefix_k - \u4f18\u5316\u7684\u8ba1\u7b97\u8bc4\u4f30\u5171\u540c\u524d\u7f00\u7684\u65b9\u6cd5 view - \u5728\u7ec8\u7aef\u7a97\u53e3\u8f93\u51fa\u4eff\u771f\u7ed3\u679c\uff0c\u5305\u542b\u4eff\u771f\u751f\u6210\u7684\u533a\u5757\u94fe\u7ed3\u6784\u56fe\u3001\u541e\u5410\u91cf\u3001\u589e\u957f\u7387(\u53cd\u6620\u94fe\u589e\u957f)\u3001\u5206\u53c9\u7387\u53ca\u5171\u540c\u524d\u7f00\u4e0e\u94fe\u8d28\u91cf\u8bc4\u4f30 view_and_write - \u8f93\u51fa\u4eff\u771f\u7ed3\u679c\u5e76\u4fdd\u5b58\u5728txt\u6587\u4ef6\u4e2d process_bar - \u663e\u793a\u5f53\u524d\u4eff\u771f\u7684\u8fdb\u5ea6\uff0c\u5728\u7ec8\u7aef\u8f93\u51fa\u5b9e\u65f6\u53d8\u52a8\u7684\u8fdb\u5ea6\u6761\u4e0e\u767e\u5206\u6bd4 <p>\u4e0a\u8868\u4e2d\uff0cenvir_create_global_chain\u521d\u59cb\u5316\u751f\u6210\u4e86\u4e00\u6761\u5168\u5c40\u533a\u5757\u94fe\u3002\u6b64\u540e\uff0c\u8be5\u94fe\u5c06\u4f5c\u4e3a\u4e0a\u5e1d\u89c6\u89d2\u4e0b\u7684\u5168\u5c40\u533a\u5757\u94fe\u6811\u4e0e\u5168\u5c40\u6700\u957f\u5408\u6cd5\u94fe\u3002 \u4e3b\u7a0b\u5e8f\u6839\u636e\u4eff\u771f\u53c2\u6570\u521d\u59cb\u5316Environment\u5bf9\u8c61\uff0c\u8c03\u7528<code>exec</code>\u542f\u52a8\u4eff\u771f\u5faa\u73af\uff0c\u5b9e\u73b0\u4e86\u8bba\u6587\u4e2d\u6240\u8ff0\u7684\u968f\u673a\u9884\u8a00\u65b9\u6cd5\u4e0e\u6269\u6563\u65b9\u6cd5,\u5bf9\u4e8e\u653b\u51fb\u8005\u5219\u9700\u901a\u8fc7<code>attack_excute</code>\u8c03\u7528\u76f8\u5e94\u63a5\u53e3\u3002\u4eff\u771f\u7ed3\u675f\u540e\u8c03\u7528<code>view_and_write</code>\u7edf\u8ba1\u5e76\u8f93\u51fa\u4eff\u771f\u7ed3\u679c\u3002</p>"},{"location":"developer-guide/#\u77ff\u5de5-Miner","title":"\u77ff\u5de5 Miner","text":"<p>Miner\u7ec4\u4ef6\u5b9a\u4e49\u4e86\u77ff\u5de5\u7c7b\uff0c\u7528\u4e8e\u521b\u5efa\u77ff\u5de5\u5e76\u8fdb\u884c\u76f8\u5173\u7684\u64cd\u4f5c\u3002\u5176\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> \u51fd\u6570 \u8f93\u5165\u53c2\u6570\u4e0e\u7c7b\u578b \u8fd4\u56de\u503c\u7c7b\u578b \u8bf4\u660e join_network network:Network - \u5728\u7f51\u7edc\u521d\u59cb\u5316\u65f6\u77ff\u5de5\u52a0\u5165\u7f51\u7edc\uff0c\u521d\u59cb\u5316\u7f51\u7edc\u63a5\u53e3 forward msgs:list[Message], msg_source_type:str, forward_strategy:str, spec_targets:list, syncLocalChain:bool - \u901a\u8fc7\u7f51\u7edc\u63a5\u53e3\u5c42\u5c06\u6d88\u606f\u8f6c\u53d1\u7ed9\u5176\u4ed6\u8282\u70b9\u3002 msgs\u9700\u8981\u8f6c\u53d1\u7684\u6d88\u606f\u5217\u8868; msg_source_type\u6d88\u606f\u6765\u6e90\u7c7b\u578b, SELF_GEN_MSG\u8868\u793a\u7531\u672c\u77ff\u5de5\u4ea7\u751f, OUTER_RCV_MSG\u8868\u793a\u7531\u7f51\u7edc\u63a5\u6536; forward_strategy \u6d88\u606f\u8f6c\u53d1\u7b56\u7565; spec_targets \u5982\u679cforward_strategy\u4e3aSPECIFIC, \u5219spec_targets\u4e3a\u8f6c\u53d1\u7684\u76ee\u6807\u8282\u70b9\u5217\u8868; syncLocalChain \u662f\u5426\u5411\u90bb\u5c45\u540c\u6b65\u672c\u5730\u94fe\uff0c\u5c3d\u91cf\u5728\u4ea7\u751f\u65b0\u533a\u5757\u65f6\u540c\u6b65. set_adversary isAdversary:bool - \u8bbe\u7f6e\u5404\u77ff\u5de5\u662f\u5426\u4e3a\u653b\u51fb\u8005 receive msg:message bool \u5904\u7406\u63a5\u6536\u7684\u4fe1\u606f\uff0c\u5b9e\u9645\u4e3a\u8c03\u7528consensus\u7ec4\u4ef6\u4e2d\u7684receive\u65b9\u6cd5 launch_consensus input:any Block|None, bool \u5f00\u59cb\u5171\u8bc6\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e3a\u8c03\u7528consensus\u7ec4\u4ef6\u4e2d\u7684consensus_process\u65b9\u6cd5\uff0c\u8fd4\u56de\u65b0\u6d88\u606fnew_msg\uff08\u6ca1\u6709\u65b0\u6d88\u606f\u5219\u4e3aNone\uff09\u4ee5\u53ca\u662f\u5426\u6709\u65b0\u6d88\u606f\u7684\u6807\u8bc6\u7b26msg_available BackboneProtocol round:int Block|None \u8bda\u5b9e\u77ff\u5de5\u6bcf\u8f6e\u6b21\u6267\u884c\u7684\u64cd\u4f5c\u3002\u9996\u5148\u4ece\u7f51\u7edc\u4e2d\u63a5\u6536\u4fe1\u606f\uff08\u533a\u5757\u94fe\u66f4\u65b0\uff09\uff0c\u5176\u6b21\u8c03\u7528\u6316\u77ff\u51fd\u6570\u5c1d\u8bd5\u751f\u6210\u533a\u5757\u3002\u5982\u679c\u533a\u5757\u94fe\u6709\u66f4\u65b0\uff08\u63a5\u6536\u5230\u65b0\u533a\u5757\u6216\u4ea7\u751f\u4e86\u65b0\u533a\u5757\uff09\uff0c\u5219\u5c06\u65b0\u6d88\u606f\u8fd4\u56de\u7ed9\u73af\u5883\u7ec4\u4ef6\uff0c\u5426\u5219\u8fd4\u56de\u7a7a <p>\u8003\u8651\u5230\u4eff\u771f\u5668\u7684\u62d3\u5c55\u6027\uff0cminer\u7ec4\u4ef6\u81ea\u8eab\u5b9a\u4e49\u7684\u51fd\u6570\u5b9e\u9645\u662f\u5f88\u5c11\u7684\uff0c\u4e3b\u8981\u7684\u51fd\u6570\u90fd\u5728consensus\u7ec4\u4ef6\u4e0eenvironment\u7ec4\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u8be5\u7ec4\u4ef6\u5b9e\u9645\u4e0a\u4e3a\u8054\u7cfb\u5404\u7ec4\u4ef6\u7684\u6865\u6881\u3002miner\u53ea\u80fd\u901a\u8fc7\u7f51\u7edc\u63a5\u53e3<code>self.NIC:NetworkInterface</code>\u4e0e\u7f51\u7edc\u8fdb\u884c\u4ea4\u4e92\uff0c\u7f51\u7edc\u63a5\u53e3\u8c03\u7528<code>receive</code>\u51fd\u6570\u5c06\u5176\u4ed6\u8282\u70b9\u53d1\u9001\u7684\u6d88\u606f\u4f20\u9012\u7ed9\u5f53\u524d\u8282\u70b9\uff0c\u5f53\u524d\u8282\u70b9\u901a\u8fc7<code>forward</code>\u51fd\u6570\u5c06\u8981\u8f6c\u53d1\u7684\u6d88\u606f\u53d1\u7ed9\u7f51\u7edc\u63a5\u53e3\u5c42\uff0c\u7f51\u7edc\u63a5\u53e3\u5c42\u901a\u8fc7\u7f51\u7edc\u5c42\u5c06\u6d88\u606f\u53d1\u9001\u7ed9\u5176\u4ed6\u8282\u70b9\u3002</p>"},{"location":"developer-guide/#\u533a\u5757\u94fe\u6570\u636e-Chain-Data","title":"\u533a\u5757\u94fe\u6570\u636e Chain Data","text":"<p>\u672c\u8282\u4ecb\u7ecdChainXim\u4e2d\u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b\u3002\u5728\u4eff\u771f\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6240\u6709\u533a\u5757\u6570\u636e\u901a\u8fc7data.BlockHead\u3001data.Block\u3001data.Chain\u63cf\u8ff0\u3002\u4e0b\u56fe\u4e3aChainXim\u4e2d\u533a\u5757\u94fe\u6570\u636e\u7ed3\u6784\u7684\u793a\u610f\u56fe\u3002\u6240\u6709Block\u4ee5\u591a\u53c9\u6811\u5f62\u5f0f\u7ec4\u7ec7\u8d77\u6765\uff0c\u6811\u4e0a\u7684\u6bcf\u4e00\u5bf9\u7236\u8282\u70b9\u4e0e\u5b50\u8282\u70b9\u901a\u8fc7Block\u4e2d\u7684parentblock\u4e0enext\u5c5e\u6027\u53cc\u5411\u94fe\u63a5\uff0c\u6811\u7684\u6839\u8282\u70b9\u4e0e\u672b\u7aef\u8282\u70b9\u5206\u522b\u8bb0\u5f55\u4e8eChain.head\u4ee5\u53caChain.last_block\u3002\u56fe\u4e2dChain\u5bf9\u8c61\u5305\u542b\u9ad8\u5ea6\u4e3a2\u7684\u533a\u5757\u94fe\uff0c\u9664\u521b\u4e16\u533a\u5757<code>Block 0</code>\u4ee5\u5916\uff0c\u5171\u6709\u4e09\u4e2a\u533a\u5757\uff0c\u5728\u533a\u5757\u9ad8\u5ea61\u5904\u51fa\u73b0\u5206\u53c9\uff0c<code>Block 0 - Block 1 - Block 3</code>\u6784\u6210\u4e3b\u94fe\uff0c<code>Block 3</code>\u662f\u4e3b\u94fe\u7684\u94fe\u5c3e\u3002</p> <p></p>"},{"location":"developer-guide/#\u6d88\u606f\u7c7b-Message","title":"\u6d88\u606f\u7c7b Message","text":"<p>Message\u662f\u77ff\u5de5\u5728\u6316\u77ff\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6240\u6709\u6d88\u606f\u7684\u57fa\u7c7b\uff0c\u76ee\u524d\u4e3b\u8981\u7684\u6d88\u606f\u4ec5\u6709\u533a\u5757Block\u3002Message\u7684\u5c5e\u6027\u76ee\u524d\u4ec5\u5305\u542b\u6d88\u606f\u957f\u5ea6size\uff0c\u5355\u4f4dMB\u3002</p>"},{"location":"developer-guide/#BlockHead","title":"BlockHead","text":"<p>BlockHead\u7528\u4e8e\u5b9a\u4e49\u533a\u5757\u5934\u4e2d\u7684\u6570\u636e\uff0cdata.BlockHead\u4e3a\u62bd\u8c61\u57fa\u7c7b\uff0c\u5176calculate_blockhash\u4e3a\u62bd\u8c61\u65b9\u6cd5\uff0c\u9700\u8981\u5728\u5171\u8bc6\u7c7b\u4e2d\u5b9a\u4e49\u65b0\u7684BlockHead\u5e76\u8986\u76d6calculate_blockhash\u3002BlockHead\u4ec5\u5305\u542b\u4e0b\u8868\u4e2d\u7684\u5c5e\u6027\uff1a</p> \u5c5e\u6027 \u7c7b\u578b \u8bf4\u660e prehash bytes \u524d\u4e00\u533a\u5757\u7684\u54c8\u5e0c timestamp int \u521b\u5efa\u533a\u5757\u65f6\u7684\u65f6\u95f4\u6233 content Any \u533a\u5757\u4e2d\u627f\u8f7d\u7684\u6570\u636e\uff0c\u5728\u5b9e\u9645\u7cfb\u7edf\u4e2d\u4e00\u822c\u4e3a\u4ea4\u6613\u4fe1\u606f\u6216Merkle Root miner int \u4ea7\u751f\u533a\u5757\u7684\u77ff\u5de5\u6216\u653b\u51fb\u8005\u7684ID <p>\u6ce8\uff1a\u7531\u4e8e\u672c\u4eff\u771f\u5668\u66f4\u52a0\u5173\u5fc3\u533a\u5757\u5728\u7f51\u7edc\u4e2d\u7684\u4f20\u64ad\u60c5\u51b5\uff0c\u56e0\u6b64\uff0c\u5bf9\u4e8e\u533a\u5757\u94fe\u4e2d\u5b58\u50a8\u7684\u6570\u636e\uff08\u4ea4\u6613\uff0c\u667a\u80fd\u5408\u7ea6\u7b49\uff09\uff0c\u4f7f\u7528content\u5c5e\u6027\u5bf9\u5176\u8fdb\u884c\u62bd\u8c61\u3002</p>"},{"location":"developer-guide/#Block","title":"Block","text":"<p>Block\u7528\u4e8e\u5b9a\u4e49\u533a\u5757\u4e2d\u7684\u6570\u636e\uff0c\u9664\u4e86\u533a\u5757\u5934blockhead\u4ee5\u5916\uff0c\u8fd8\u5305\u542b\u4e0b\u8868\u4e2d\u7684\u5c5e\u6027\uff1a</p> \u5c5e\u6027 \u7c7b\u578b \u8bf4\u660e name str \u533a\u5757\u7684friendly name\uff0c\u683c\u5f0f\u4e3a\u5b57\u6bcdB+\u4e00\u4e2a\u6807\u8bc6\u533a\u5757\u4ea7\u751f\u987a\u5e8f\u7684\u5e8f\u53f7 height int \u533a\u5757\u9ad8\u5ea6 blockhash bytes \u533a\u5757\u88ab\u6784\u5efa\u65f6\u81ea\u52a8\u8ba1\u7b97\u51fa\u7684\u533a\u5757\u54c8\u5e0c isAdversaryBlock bool \u662f\u5426\u662f\u653b\u51fb\u8005\u4ea7\u751f\u7684\u533a\u5757 isGenesis bool \u662f\u5426\u662f\u521b\u4e16\u533a\u5757 next list[Block] \u4e00\u4e2a\u5f15\u7528\u5b50\u5757\u7684\u5217\u8868 parentblock Block \u5bf9\u6bcd\u5757\u7684\u5f15\u7528 <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cblockhead\u5c5e\u6027\u4e3a\u53ea\u8bfb\u5c5e\u6027\uff0cBlock\u5bf9\u8c61\u88ab\u6784\u9020\u540e\u4fbf\u4e0d\u53ef\u4fee\u6539\u3002 \u9664\u6b64\u4ee5\u5916Block\u5177\u6709\u4e24\u4e2a\u8f85\u52a9\u65b9\u6cd5\uff1a</p> \u65b9\u6cd5 \u8f93\u5165\u53c2\u6570\u4e0e\u7c7b\u578b \u8fd4\u56de\u503c\u7c7b\u578b \u8bf4\u660e get_height - int \u8fd4\u56deBlock.height calculate_blockhash - bytes \u8c03\u7528blockhead.calculate_blockhash\uff0c\u4fdd\u5b58\u54c8\u5e0c\u503c\u4e8eblockhash\u5e76\u8fd4\u56deblockhash\u7684\u503c <p>\u6700\u540e\uff0c\u4e3a\u4e86\u4f7fBlock\u5bf9\u8c61\u80fd\u591f\u5728Network\u4e2d\u4f20\u8f93\uff0cBlock\u7c7b\u6d3e\u751f\u81eaMessage\u7c7b\u3002</p>"},{"location":"developer-guide/#Chain","title":"Chain","text":"<p>Chain\u4e3b\u8981\u7528\u4e8e\u4fdd\u5b58\u533a\u5757\u94fe\u7684\u6839\u8282\u70b9\u4e0e\u672b\u7aef\u8282\u70b9\uff0c\u5e76\u5b9a\u4e49\u64cd\u4f5c\u533a\u5757\u94fe\u6240\u9700\u7684\u4e00\u7cfb\u5217\u51fd\u6570\u3002Chain\u5305\u542b\u4e0b\u8868\u4e2d\u7684\u5c5e\u6027\uff1a</p> \u5c5e\u6027 \u8bf4\u660e head \u50a8\u5b58\u533a\u5757\u94fe\u7684\u521b\u4e16\u533a\u5757 last_block \u5bf9\u4e3b\u94fe\u672b\u7aef\u533a\u5757\u7684\u5f15\u7528\uff0c\u5bf9\u4e8ePoW\u7cfb\u7edf\u4e3b\u94fe\u4e3a\u591a\u53c9\u6811\u4e0a\u7684\u6700\u957f\u94fe miner_id \u7ef4\u62a4\u533a\u5757\u94fe\u7684\u77ff\u5de5\u6216\u653b\u51fb\u8005\u7684ID\uff0c\u5982\u4e3a\u5168\u5c40\u533a\u5757\u94fe\u5219\u4e3a\u7f3a\u7701\u503cNone <p>Chain\u7c7b\u5177\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u4e8e\u6dfb\u52a0\u65b0\u533a\u5757\u3001\u5408\u5e76\u94fe\u3001\u641c\u7d22\u533a\u5757\u3001\u53ef\u89c6\u5316\u533a\u5757\u94fe\u3001\u4fdd\u5b58\u533a\u5757\u94fe\u6570\u636e\u7b49\uff0c\u89c1\u4e0b\u8868\uff1a</p> \u65b9\u6cd5 \u8f93\u5165\u53c2\u6570\u4e0e\u7c7b\u578b \u8fd4\u56de\u503c\u7c7b\u578b \u8bf4\u660e search_block block: Block Block|None \u5728\u5b58\u50a8\u4e8e\u672c\u5730\u7684\u533a\u5757\u6811\u4e2d\u641c\u7d22\u76ee\u6807\u5757\uff0c\u5b58\u5728\u8fd4\u56de\u8be5\u533a\u5757\uff0c\u4e0d\u5b58\u5728\u8fd4\u56deNone search_block_by_hash blockhash: bytes Block|None \u6309\u7167\u54c8\u5e0c\u5728\u5b58\u50a8\u4e8e\u672c\u5730\u7684\u533a\u5757\u6811\u4e2d\u641c\u7d22\u76ee\u6807\u5757\uff0c\u5b58\u5728\u8fd4\u56de\u8be5\u533a\u5757\uff0c\u4e0d\u5b58\u5728\u8fd4\u56deNone get_last_block - Block \u8fd4\u56deChain.last_block set_last_block block: Block - \u68c0\u67e5block\u662f\u5426\u5728\u94fe\u4e2d\uff0c\u7136\u540e\u8bbe\u7f6e\u8be5block\u4e3alast_block add_blocks blocks: Block | list[block], insert_point: Block Block \u6df1\u62f7\u8d1d\u533a\u5757\u540e\u6dfb\u52a0\u5230\u94fe\u4e2d\uff0cblocks \u53ef\u4ee5\u662flist[Block]\u7c7b\u578b \u4e5f\u53ef\u4ee5\u662fBlock\u7c7b\u578b\uff0cinset_point \u662f\u63d2\u5165\u533a\u5757\u7684\u4f4d\u7f6e \u4ece\u5176\u540e\u5f00\u59cb\u6dfb\u52a0\u9ed8\u8ba4\u4e3alast_block ShowStructure1 - - \u4ee5head\u4e3a\u6839\u8282\u70b9\uff0c\u5728stdout\u6253\u5370\u6574\u4e2a\u591a\u53c9\u6811 ShowStructure miner_num:int - \u751f\u6210blockchain visualisation.svg\uff0c\u663e\u793a\u533a\u5757\u94fe\u4e2d\u6bcf\u4e2a\u533a\u5757\u4ea7\u751f\u7684\u8f6e\u6b21\u4ee5\u53ca\u7236\u5b50\u5173\u7cfb ShowStructureWithGraphviz - - \u5728blockchain_visualization\u76ee\u5f55\u4e0b\u501f\u52a9Graphviz\u751f\u6210\u533a\u5757\u94fe\u53ef\u89c6\u5316\u56fe get_block_interval_distribution - - \u751f\u6210\u51fa\u5757\u65f6\u95f4\u5206\u5e03\u56feblock interval distribution.svg printchain2txt chain_data_url:int - \u5c06\u94fe\u4e2d\u6240\u6709\u5757\u7684\u7ed3\u6784\u4e0e\u4fe1\u606f\u4fdd\u5b58\u5230chain_data_url\uff0c\u9ed8\u8ba4\u4fdd\u5b58\u5230'Chain Data/chain_data.txt' CalculateStatistics rounds:int dict \u751f\u6210\u533a\u5757\u94fe\u7edf\u8ba1\u4fe1\u606f\uff0c\u901a\u8fc7\u5b57\u5178\u8fd4\u56de\u7edf\u8ba1\u4fe1\u606f\uff0crounds\u4e3a\u4eff\u771f\u603b\u8f6e\u6b21\u6570"},{"location":"developer-guide/#\u5171\u8bc6-Consensus","title":"\u5171\u8bc6 Consensus","text":"<p>\u672c\u8282\u4ecb\u7ecdChainXim\u7684\u5171\u8bc6\u5c42\u67b6\u6784\uff0c\u4ee5\u5de5\u4f5c\u91cf\u8bc1\u660e\uff08Proof of Work, PoW\uff09\u4e3a\u4f8b\u89e3\u91ca\u5171\u8bc6\u534f\u8bae\u5728ChainXim\u4e2d\u7684\u5b9e\u73b0\u3002Consensus\u7c7b\u662f\u4e00\u4e2a\u63cf\u8ff0ChainXim\u5171\u8bc6\u5c42\u57fa\u672c\u8981\u7d20\u7684\u62bd\u8c61\u7c7b\uff0c\u5728ChainXim\u4e2d\u5b9e\u73b0\u5171\u8bc6\u534f\u8bae\u9700\u8981\u5728Consensus\u7c7b\u57fa\u7840\u4e0a\u6269\u5c55\u51fa\u65b0\u7684\u5171\u8bc6\u7c7b\u3002\u76ee\u524d\u5df2\u7ecf\u5b9e\u73b0\u7684\u5171\u8bc6\u7c7b\u662fPoW\uff0c\u4e0b\u56fe\u4e3a\u5c55\u73b0PoW\u4e0eConsensus\u5173\u7cfb\u7684\u7c7b\u56fe\u3002</p> <p></p> <p>\u6bcf\u4e00\u4e2aPoW\u5bf9\u8c61\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> \u5c5e\u6027 \u7c7b\u578b \u8bf4\u660e local_chain Chain \u672c\u5730\u94fe\uff0c\u662f\u67d0\u4e00\u77ff\u5de5\u89c6\u89d2\u4e0b\u7684\u533a\u5757\u94fe\uff0c\u5305\u542b\u4e3b\u94fe\u4ee5\u53ca\u6240\u6709\u8be5\u77ff\u5de5\u5df2\u77e5\u7684\u5206\u53c9 _receive_tape list \u63a5\u6536\u961f\u5217\uff0c\u533a\u5757\u5230\u8fbe\u77ff\u5de5\u65f6\u88ab\u6dfb\u52a0\u5230\u63a5\u6536\u961f\u5217\u4e2d\uff0c\u77ff\u5de5\u7684\u56de\u5408\u7ed3\u675f\u540e\u6e05\u7a7a\u961f\u5217 target bytes PoW\u4e2d\u54c8\u5e0c\u8ba1\u7b97\u95ee\u9898\u7684\u76ee\u6807\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53\u533a\u5757\u54c8\u5e0c\u503c\u5c0f\u4e8e\u8be5\u76ee\u6807\u503c\uff0c\u533a\u5757\u6709\u6548 q int \u5355\u4e2a\u77ff\u5de5\u6bcf\u8f6e\u6b21\u53ef\u8ba1\u7b97\u54c8\u5e0c\u6b21\u6570 <p>PoW\u7c7b\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6a21\u62df\u5de5\u4f5c\u91cf\u8bc1\u660e\u673a\u5236\u4e2d\u7684\u51fa\u5757\u3001\u9a8c\u8bc1\u884c\u4e3a\uff0c\u5e76\u901a\u8fc7\u6700\u957f\u94fe\u539f\u5219\u89e3\u51b3\u5206\u53c9\uff1a</p> \u65b9\u6cd5 \u8f93\u5165\u53c2\u6570\u4e0e\u7c7b\u578b \u8fd4\u56de\u503c\u7c7b\u578b \u8bf4\u660e mining_consensus miner_id:int,isadversary:bool,x: Any,round: int Block, bool |None, bool \u6bcf\u4e2a\u8f6e\u6b21\u6267\u884c\u4e00\u6b21\uff0c\u4fee\u6539q\u6b21nonce\u8ba1\u7b97\u533a\u5757\u54c8\u5e0c\uff0c\u5982\u679c\u54c8\u5e0c\u5c0f\u4e8e\u76ee\u6807\u503c\uff0c\u8fd4\u56deBlock\u5bf9\u8c61\u548cTrue\uff0c\u5426\u5219\u8fd4\u56deNone\u548cFalse local_state_update - Block, bool \u9010\u4e00\u9a8c\u8bc1_receive_tape\u4e2d\u7684\u533a\u5757\uff0c\u5c06\u533a\u5757\u5408\u5e76\u5230\u672c\u5730\u94fe\u4e2d\uff0c\u6700\u540e\u901a\u8fc7\u6700\u957f\u94fe\u51c6\u5219\u786e\u5b9a\u4e3b\u94fe\uff0c\u8fd4\u56de\u4e3b\u94fe\u7684\u94fe\u5c3e\u4ee5\u53ca\u4e00\u4e2a\u53cd\u6620\u4e3b\u94fe\u662f\u5426\u88ab\u66f4\u65b0\u7684\u6807\u5fd7\u5982\u679c\u65b0\u533a\u5757\u5408\u6cd5\u4f46\u56e0\u4e3a\u4e2d\u95f4\u533a\u5757\u7f3a\u5931\u65e0\u6cd5\u5e76\u5165\u672c\u5730\u94fe\uff0c\u5219\u653e\u5165\u7f13\u5b58\u4e2d valid_chain lastblock: Block bool \u9a8c\u8bc1\u672b\u7aef\u4e3alastblock\u7684\u94fe valid_block block: Block bool \u9a8c\u8bc1block\u662f\u5426\u6709\u6548\uff0c\u5373\u9a8c\u8bc1\u533a\u5757\u54c8\u5e0c\u662f\u5426\u5c0f\u4e8e\u76ee\u6807\u503c"},{"location":"developer-guide/#\u5171\u8bc6\u534f\u8bae\u4e0e\u533a\u5757","title":"\u5171\u8bc6\u534f\u8bae\u4e0e\u533a\u5757","text":"<p>\u4e0b\u56fe\u5c55\u793a\u4e86Chainxim\u4e2d\u4e0e\u5171\u8bc6\u76f8\u5173\u7684\u7ee7\u627f\u4e0e\u6d3e\u751f\u5173\u7cfb\u3002\u5982\u56fe\u6240\u793a\uff0cPoW.BlockHead\u4e0ePoW.Block\u7c7b\u662f\u5171\u8bc6\u7c7b\u7684\u5b50\u7c7b\uff0c\u6d3e\u751f\u81eadata.BlockHead\u4e0edata.Block\u3002Consensus\u7c7b\u7684\u5b50\u7c7bBlockHead\u4e0eBlock\u7c7b\u5206\u522b\u7ee7\u627f\u81eadata.BlockHead\u4e0edata.Block\uff0c\u5e76\u91cd\u65b0\u5b9a\u4e49\u4e86BlockHead\u4e0eBlock\u7684\u521d\u59cb\u5316\u63a5\u53e3\u3002</p> <p></p> <p>Consensus.BlockHead\u4e0eConsensus.Block\u901a\u8fc7\u5982\u4e0b\u63a5\u53e3\u521d\u59cb\u5316\u3002</p> <p><pre><code># consensus/consensus_abc.py\nclass Consensus(metaclass=ABCMeta):\n    class BlockHead(data.BlockHead):\n        def __init__(self, preblock:data.Block=None, timestamp=0, content=0, miner_id=-1):\n\n    class Block(data.Block):\n        def __init__(self, blockhead: data.BlockHead, preblock: data.Block = None, isadversary=False, blocksize_MB=2):\n</code></pre> \u548cdata.Blockhead\u4e0edata.Block\u76f8\u6bd4\uff0c\u8f93\u5165\u53c2\u6570\u53d1\u751f\u4e86\u4e00\u5b9a\u53d8\u5316\uff0c\u6bd4\u5982prehash\u6362\u6210preblock\uff0c\u53bb\u9664height\u3001blockhash\u7b49\uff0c\u8fd9\u53ef\u4ee5\u5c06data.Block\u4ee5\u53cadata.BlockHead\u7684\u5e95\u5c42\u7ec6\u8282\u9690\u85cf\u8d77\u6765\u3002 \u4ee5PoW\u4e3a\u4f8b\uff0c\u5728\u6784\u9020\u65b0\u7684Block\u5bf9\u8c61\u65f6\uff0c\u9700\u8981\u5148\u6d3e\u751f\u51fa\u5177\u4f53\u5171\u8bc6\u534f\u8bae\u7684\u533a\u5757\u5934PoW.BlockHead\uff0c\u7136\u540e\u7528\u533a\u5757\u5934blockhead\u3001\u524d\u4e00\u533a\u5757preblock\u3001\u653b\u51fb\u8005\u4fe1\u606fisadversary\u6784\u9020PoW.Block\uff08\u5982\u6709\u9700\u8981\uff0c\u53ef\u4ee5\u52a0\u4e0a\u4e00\u4e9b\u5176\u4ed6\u53c2\u6570\uff0c\u5982\u533a\u5757\u5927\u5c0fblocksize_MB\uff09\uff0c\u5176\u63a5\u53e3\u5982\u4e0b\u3002</p> <pre><code># consensus/pow.py\nclass PoW(Consensus):\n    class BlockHead(Consensus.BlockHead):\n        def __init__(self, preblock: Consensus.Block = None, timestamp=0, content=0, miner_id=-1,target = bytes(),nonce = 0):\n            super().__init__(preblock, timestamp, content, miner_id)\n            self.target = target  # \u96be\u5ea6\u76ee\u6807\n            self.nonce = nonce  # \u968f\u673a\u6570\n\n        def calculate_blockhash(self) -&gt; bytes:\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0cPoW.BlockHead\u521d\u59cb\u5316\u65f6\u9664\u4e86\u9700\u8981Consensus.BlockHead\u7684\u8f93\u5165\u53c2\u6570\uff0c\u8fd8\u589e\u52a0\u4e86target\u4ee5\u53canonce\uff1b\u4eceConsensus.BlockHead\u7ee7\u627f\u7684\u8f93\u5165\u53c2\u6570\u7684\u540c\u65f6\u4e5f\u7ee7\u627f\u4e86\u9ed8\u8ba4\u503c\uff0c\u65b0\u589e\u7684\u5165\u53c2\u4e5f\u9700\u8981\u6307\u5b9a\u9ed8\u8ba4\u503c\uff0c\u8fd9\u4e9b\u9ed8\u8ba4\u503c\u5728\u751f\u6210\u521b\u4e16\u533a\u5757\u65f6\u4f1a\u6709\u7528\u3002\u6b64\u5916\uff0ccalculate_blockhash\u65b9\u6cd5\u9700\u8981\u6839\u636e\u5404\u7c7b\u5171\u8bc6\u534f\u8bae\u4e2d\u7684\u533a\u5757\u5b9a\u4e49\u91cd\u5199\u3002</p>"},{"location":"developer-guide/#\u5171\u8bc6\u7c7b\u7684\u521d\u59cb\u5316","title":"\u5171\u8bc6\u7c7b\u7684\u521d\u59cb\u5316","text":"<p>Consensus\u521d\u59cb\u5316\u65f6\u9700\u8981\u77ff\u5de5ID\u4f5c\u4e3a\u53c2\u6570\uff0c\u800c\u4eceConsensus\u6d3e\u751f\u51fa\u7684\u5171\u8bc6\u7c7b\uff0c\u521d\u59cb\u5316\u65f6\u4e00\u822c\u9700\u8981\u989d\u5916\u7684\u5171\u8bc6\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u901a\u8fc7consensus_param\u627f\u8f7d\uff0cconsensus_param\u5728Environment\u5bf9\u8c61\u6784\u9020\u65f6\u6307\u5b9a\uff08\u53ef\u53c2\u8003\u6e90\u4ee3\u7801\uff09\uff0c\u5728Miner\u7c7b\u521d\u59cb\u5316\u65f6\u4f20\u9012\u7ed9\u5171\u8bc6\u5bf9\u8c61\u3002\u5728PoW\u4e2d\uff0cconsensus_param\u5305\u62ec\u4ee5\u4e0b\u4e09\u9879\uff1a</p> \u5c5e\u6027 \u7c7b\u578b \u8bf4\u660e target str PoW\u4e2d\u54c8\u5e0c\u8ba1\u7b97\u95ee\u9898\u7684\u5341\u516d\u8fdb\u5236\u76ee\u6807\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53\u533a\u5757\u54c8\u5e0c\u503c\u5c0f\u4e8e\u8be5\u76ee\u6807\u503c\uff0c\u533a\u5757\u6709\u6548\u3002 q_ave int \u5355\u4e2a\u77ff\u5de5\u6bcf\u8f6e\u6b21\u53ef\u8ba1\u7b97\u54c8\u5e0c\u6b21\u6570\u7684\u5e73\u5747\u503c q_distr str \u5355\u4e2a\u77ff\u5de5\u6bcf\u8f6e\u6b21\u53ef\u8ba1\u7b97\u54c8\u5e0c\u6b21\u6570\u7684\u5206\u5e03 <p>\u6ce8\uff1a\u53c2\u6570q\u6307\u6bcf\u4e2a\u8f6e\u6b21\u6bcf\u4e2a\u77ff\u5de5\u8ba1\u7b97\u54c8\u5e0c\u7684\u6700\u5927\u6b21\u6570\uff0c\u901a\u8fc7q_distr\u4e0eq_ave\u6307\u5b9a\u3002q_distr\u4e3a<code>equal</code>\u65f6\uff0c\u6240\u6709\u77ff\u5de5\u7684q\u5747\u7b49\u4e8eq_ave\uff1b\u5f53q_distr\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5316\u7684\u6570\u7ec4\u65f6\uff0c\u9009\u62e9q_distr\u4e2d\u4e0b\u6807\u4e3aminer_id\u7684\u5143\u7d20\u4f5c\u4e3aq\uff08\u5373\u6309\u7167\u8be5\u6570\u7ec4\u5206\u914d\u7b97\u529b\u5360\u6bd4\uff09\u3002</p> <p>\u5171\u8bc6\u7c7b\u521d\u59cb\u5316\u65f6\u9700\u8981\u521d\u59cb\u5316\u672c\u5730\u94feBlockchain\uff0c\u5e76\u4e3a\u672c\u5730\u94fe\u751f\u6210\u521b\u4e16\u533a\u5757\uff0c\u751f\u6210\u521b\u4e16\u533a\u5757\u65f6\u4f1a\u8c03\u7528Consensus.create_genesis_block\u65b9\u6cd5\uff0c\u5176\u63a5\u53e3\u5982\u4e0b\uff1a</p> <pre><code># consensus/consensus_abc.py\ndef create_genesis_block(self, chain:Chain, blockheadextra:dict = None, blockextra:dict = None):\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u5373\u4e3a\u901a\u8fc7Chain()\u4ea7\u751f\u7684\u7a7a\u94fe\uff0c\u540e\u4e24\u4e2a\u5b57\u5178\u578b\u53c2\u6570\u53ef\u4e3a\u521b\u4e16\u533a\u5757\u6307\u5b9a\u989d\u5916\u53c2\u6570\uff0c\u5728Environment\u6784\u9020\u65f6\u4f20\u5165\u7684genesis_blockheadextra\u4ee5\u53cagenesis_blockextra\u4f1a\u88ab\u4f20\u9012\u5230\u8fd9\u4e2a\u63a5\u53e3\u3002\u67d0\u4e9b\u7279\u6b8a\u7684\u5171\u8bc6\u534f\u8bae\u5982\u679c\u9700\u8981\u6307\u5b9a\u521b\u4e16\u533a\u5757\u7684\u53c2\u6570\uff0c\u5c31\u9700\u8981\u5728\u6784\u9020Environment\u5bf9\u8c61\u65f6\u4f20\u5165\u5b57\u5178\u7c7b\u578b\u7684genesis_blockheadextra\u4ee5\u53cagenesis_blockextra\u3002</p> <p>\u901a\u8fc7create_genesis_block\u751f\u6210\u521b\u4e16\u533a\u5757\u65f6\uff0c\u4f1a\u5148\u8c03\u7528self.BlockHead\u751f\u6210\u521b\u4e16\u533a\u5757\u7684\u533a\u5757\u5934\u3001\u901a\u8fc7blockheadextra\u66f4\u65b0\u533a\u5757\u5934\u3001\u901a\u8fc7self.Block\u751f\u6210\u521b\u4e16\u533a\u5757\u5e76\u8d4b\u503c\u7ed9self.head\uff0c\u6700\u540e\u901a\u8fc7blockextra\u66f4\u65b0\u533a\u5757\u3002</p>"},{"location":"developer-guide/#\u6d88\u606f\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f","title":"\u6d88\u606f\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f","text":"<p>\u5728\u5f53\u524d\u67b6\u6784\u4e2d\uff0cChainXim\u7406\u8bba\u4e0a\u53ef\u4ee5\u652f\u6301Message\u53ca\u5176\u6d3e\u751f\u5bf9\u8c61\u7531\u5171\u8bc6\u5bf9\u8c61(consensus)\u4ea7\u751f\u3001\u5728\u7f51\u7edc\u4e2d\u4f20\u8f93\u5e76\u88ab\u76ee\u6807\u77ff\u5de5\u7684\u5171\u8bc6\u5bf9\u8c61\u5904\u7406\u3002\u672c\u5c0f\u8282\u4ee5PoW\u4e3a\u4f8b\uff0c\u89e3\u91caChainXim\u4e2d\u5178\u578b\u7684\u6d88\u606f\u5bf9\u8c61\u2014\u2014\u533a\u5757\u5982\u4f55\u88ab\u4ea7\u751f\u3001\u4f20\u8f93\u3001\u63a5\u6536\u3001\u9a8c\u8bc1\u5e76\u66f4\u65b0\u5230\u76ee\u6807\u77ff\u5de5\u7684\u672c\u5730\u94fe\u4e2d\u3002</p> <p>\u4e0b\u56fe\u5c55\u793aChainXim\u4e2d\u4e0d\u540c\u6a21\u5757\u3001\u4e0d\u540c\u65b9\u6cd5\u95f4\u7684\u8c03\u7528\u5173\u7cfb\uff1a</p> <p></p> <p>\u5176\u4e2d\u6bd4\u8f83\u503c\u5f97\u5173\u6ce8\u7684\u662f\u7c97\u4f53\u7684\u516d\u4e2a\u65b9\u6cd5\uff0cconsensus_process\u8c03\u7528mining_consensus\u5b9e\u73b0\u51fa\u5757\uff0c\u65b0\u533a\u5757\u7ecf\u7531launch_consensus\u8c03\u7528forward\u8fdb\u5165\u77ff\u5de5\u7684\u8f6c\u53d1\u961f\u5217\uff0c\u6bcf\u8f6e\u6b21diffuse\u88ab\u8c03\u7528\u65f6\u4f1a\u8c03\u7528Miner.NIC.nic_forward\u4f7f\u533a\u5757\u8fdb\u5165\u6a21\u62df\u7f51\u7edc\u5f00\u59cb\u4eff\u771f\u3002\u5728\u77ff\u5de5\u63a5\u6536\u5230\u65b0\u533a\u5757\u65f6\uff0cdiffuse\u8c03\u7528\u8be5\u77ff\u5de5\u7684receive\u65b9\u6cd5\u5b9e\u73b0\u533a\u5757\u63a5\u6536\uff08\u63a5\u6536\u5230\u7684\u533a\u5757\u6682\u5b58\u4e8e\u63a5\u6536\u7f13\u51b2\u533a_receive_tape\uff09\uff0clocal_state_update\u5728\u6bcf\u4e2a\u8f6e\u6b21\u5f00\u59cb\u65f6\u9010\u4e2a\u9a8c\u8bc1_receive_tape\u4e2d\u7684\u533a\u5757\u5e76\u66f4\u65b0\u5230\u76ee\u6807\u77ff\u5de5\u7684\u672c\u5730\u94fe\u4e2d\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u6d88\u606f\u7684\u5177\u4f53\u8f6c\u53d1\u3001\u63a5\u6536\u8fc7\u7a0b\u5bf9\u4e8e\u4e0d\u540c\u7f51\u7edc\u7c7b\u578b\u4f1a\u7565\u6709\u4e0d\u540c\uff0c\u8be6\u89c1\u7f51\u7edc\u4e00\u8282\uff09</p>"},{"location":"developer-guide/#\u533a\u5757\u4ea7\u751f\u4e0e\u4f20\u64ad","title":"\u533a\u5757\u4ea7\u751f\u4e0e\u4f20\u64ad","text":"<p>PoW.consensus_process\u88ab\u8c03\u7528\u540e\u5c06\u8c03\u7528PoW.mining_consensus\uff0c\u8fdb\u884c\u6240\u8c13\u7684\u201c\u6316\u77ff\u201d\u64cd\u4f5c\u3002\u7531\u4e8e\u6bcf\u4e2a\u77ff\u5de5\u4e00\u4e2a\u8f6e\u6b21\u5185\u7684PoW\u5171\u8bc6\u5bf9\u8c61\u53ea\u6709q\u6b21\u8ba1\u7b97\u54c8\u5e0c\u7684\u673a\u4f1a\uff0c\u56e0\u6b64\u6bcf\u6b21\u8c03\u7528mining_consensus\u4ec5\u4ee5\u4e00\u5b9a\u6982\u7387\u751f\u6210\u533a\u5757\u5e76\u4ea7\u751fPoW.Block\u5bf9\u8c61\uff0c\u672a\u80fd\u4ea7\u751f\u65b0\u533a\u5757\u65f6\u8fd4\u56deNone\u3002\u5982\u679cmining_consensus\u8fd4\u56de\u4e86Block\u5bf9\u8c61\uff0cPoW.consensus_process\u5c06Block\u5bf9\u8c61\u6dfb\u52a0\u5230\u672c\u5730\u94fe\uff0c\u7136\u540e\u8fd4\u56de\u5305\u542b\u8be5Block\u5bf9\u8c61\u7684\u5217\u8868\u3002</p> <p>\u8be5\u5217\u8868\u5c06\u88ab\u4f20\u9012\u5230\u4f4d\u4e8eEnvironment.exec\u7684\u4e3b\u5faa\u73af\u4e2d\uff0c\u7136\u540e\u901a\u8fc7\u7f51\u7edc\u7c7b\u7684access_network\u8fdb\u5165\u7f51\u7edc\u6a21\u578b\u4f20\u64ad\u3002\u7531\u4e8eBlock\u7c7b\u662fMessage\u7684\u6d3e\u751f\u7c7b\uff0c\u5176\u5b9e\u4f8b\u53ef\u4ee5\u5728\u7f51\u7edc\u7c7b\u4e2d\u4f20\u64ad\u3002</p>"},{"location":"developer-guide/#\u533a\u5757\u63a5\u6536","title":"\u533a\u5757\u63a5\u6536","text":"<p>\u7f51\u7edc\u7c7b\u7684diffuse\u65b9\u6cd5\u6bcf\u4e2a\u8f6e\u6b21\u7ed3\u675f\u65f6\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\u4f1a\u63a8\u8fdb\u7f51\u7edc\u4e2d\u6570\u636e\u5305\u7684\u4f20\u64ad\u8fdb\u5ea6\u3002\u7f51\u7edc\u6a21\u578b\u4e2d\u7684Block\u5bf9\u8c61\u7ecf\u8fc7\u4e00\u5b9a\u8f6e\u6b21\u4e4b\u540e\u5230\u8fbe\u5176\u4ed6\u77ff\u5de5\uff0c\u6b64\u65f6Miner.receive\u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528\uff0c\u8fdb\u800c\u8c03\u7528receive_filter\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f1a\u6839\u636e\u6d88\u606f\u7c7b\u578b\u8fdb\u884c\u5206\u6d41\uff0c\u5bf9\u63a5\u6536\u5230\u7684Block\u5bf9\u8c61\u8c03\u7528receive_block\u6dfb\u52a0\u5230_receive_tape\u4e2d\u3002</p>"},{"location":"developer-guide/#\u66f4\u65b0\u672c\u5730\u94fe","title":"\u66f4\u65b0\u672c\u5730\u94fe","text":"<p>\u5728BackboneProtocal\u8c03\u7528launch_consensus\u4e4b\u524d\uff0clocal_state_update\u4f1a\u88ab\u8c03\u7528\u3002\u5bf9\u4e8ePoW\u5171\u8bc6\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5c06_receive_tape\u4e2d\u7f13\u5b58\u7684\u533a\u5757\u9010\u4e00\u9a8c\u8bc1\u540e\u5408\u5e76\u5230\u672c\u5730\u94fe\uff1b\u5982\u679c\u5e76\u5165\u7684\u94fe\u6bd4\u5f53\u524d\u4e3b\u94fe\u66f4\u957f\uff0c\u5c31\u5c06\u5176\u8bbe\u7f6e\u4e3a\u4e3b\u94fe\u3002\u9a8c\u8bc1\u8fc7\u7a0b\u5206\u4e3a\u4e24\u6b65\uff0c\u7b2c\u4e00\u6b65\u9a8c\u8bc1\u533a\u5757\u672c\u8eab\u7684\u5408\u6cd5\u6027\uff0c\u5373\u533a\u5757\u54c8\u5e0c\u662f\u5426\u5c0f\u4e8e\u76ee\u6807\u503c\uff0c\u7b2c\u4e8c\u90e8\u68c0\u67e5\u533a\u5757\u7684\u6bcd\u5757\u662f\u5426\u53ef\u4ee5\u4ece\u672c\u5730\u94fe\u4e2d\u68c0\u7d22\u5230\uff0c\u5982\u679c\u68c0\u7d22\u5230\u5219\u5c06\u5408\u6cd5\u65b0\u533a\u5757\u6dfb\u52a0\u5230\u672c\u5730\u94fe\uff0c\u5426\u5219\u653e\u5165_block_buffer\u7b49\u5f85\u5176\u6bcd\u5757\u88ab\u63a5\u6536\u5230\u3002\u5f53_block_buffer\u4e2d\u7684\u6bcd\u5757\u5728local_state_update\u4e2d\u88ab\u5904\u7406\uff0c\u5219\u8c03\u7528synthesis_fork\u4ece_block_buffer\u5c06\u8fd9\u4e2a\u6bcd\u5757\u4e4b\u540e\u7684\u5206\u652f\u5e76\u5165\u672c\u5730\u94fe\u3002</p>"},{"location":"developer-guide/#\u5982\u4f55\u5b9e\u73b0\u65b0\u7684\u5171\u8bc6\u534f\u8bae","title":"\u5982\u4f55\u5b9e\u73b0\u65b0\u7684\u5171\u8bc6\u534f\u8bae","text":"<pre><code>class MyConsensus(Consensus):\n</code></pre> <p>\u4e3a\u4e86\u5728ChainXim\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u5171\u8bc6\u534f\u8bae\uff0c\u9700\u8981\u4eceConsensus\u7c7b\u4e2d\u6d3e\u751f\u51fa\u5171\u8bc6\u7c7b\uff08\u672c\u5c0f\u8282\u4ee5MyConsensus\u4e3a\u4f8b\uff09\uff0c\u5e76\u4e14\u81f3\u5c11\u8986\u76d6\u4ee5\u4e0b\u5b50\u7c7b\u4e0e\u51fd\u6570\uff0c\u5b9e\u73b0\u5176\u57fa\u672c\u529f\u80fd\uff1a</p> <ul> <li>BlockHead: \u4eceConsensus.BlockHead\u6d3e\u751f\uff0c\u5b9a\u4e49\u533a\u5757\u5934\u4e2d\u4e0e\u5171\u8bc6\u534f\u8bae\u76f8\u5173\u7684\u6570\u636e\u9879\uff0c\u9700\u8981\u8986\u76d6calculate_blockhash\u65b9\u6cd5</li> <li>mining_consensus: \u6839\u636e\u5171\u8bc6\u534f\u8bae\u4ea7\u751f\u65b0\u533a\u5757</li> <li>local_state_update: \u6839\u636e\u63a5\u6536\u5230\u7684\u533a\u5757\u66f4\u65b0\u672c\u5730\u94fe</li> <li>valid_chain: \u9a8c\u8bc1\u6574\u6761\u533a\u5757\u94fe\u662f\u5426\u7b26\u5408\u5171\u8bc6\u534f\u8bae</li> <li>valid_block: \u9a8c\u8bc1\u5355\u4e2a\u533a\u5757\u662f\u5426\u7b26\u5408\u5171\u8bc6\u534f\u8bae</li> </ul> <p>MyConsensus.BlockHead\u53ef\u4ee5\u53c2\u8003PoW.BlockHead\u7684\u5199\u6cd5\uff0c\u91cd\u65b0\u5b9e\u73b0__init__\u4ee5\u53cacalculate_blockhash\u4f7fBlockHead\u652f\u6301\u65b0\u7684\u5171\u8bc6\u534f\u8bae\u3002Block\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4eceConsensus\u7ee7\u627f\u800c\u6765\u7684\u5b50\u7c7bBlock\uff0c\u4e5f\u53ef\u4ee5\u5728MyConsensus\u4e2d\u6d3e\u751f\u65b0\u7684Block\u5b50\u7c7b\u3002PoW\u7c7b\u91c7\u7528\u662f\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f46\u5982\u679cBlock\u4e2d\u6709\u9700\u8981\u4f20\u9012\u7684\u6570\u636e\u4f46\u662f\u4e0e\u54c8\u5e0c\u8ba1\u7b97\u4e0d\u76f4\u63a5\u76f8\u5173\uff0c\u53ef\u4ee5\u91c7\u7528\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u5c06\u8fd9\u90e8\u5206\u6570\u636e\u901a\u8fc7\u65b0\u7684Block\u5b50\u7c7b\u627f\u8f7d\u3002</p> <pre><code>    class Block(Consensus.Block):\n        def __init__(self, blockhead: chain.BlockHead, preblock: chain.Block = None, isadversary=False, blocksize_MB=2, other_params):\n            super().__init__(blockhead, preblock, isadversary, blocksize_MB)\n            ...\n</code></pre> <p>Block\u5bf9\u8c61\u7684\u6784\u9020\u8fc7\u7a0b\u53ef\u53c2\u8003\u201c\u5171\u8bc6\u534f\u8bae\u4e0e\u533a\u5757\u201d\u3002</p> <p>\u5bf9\u4e8e\u7c7bPoW\u7684\u5171\u8bc6\u673a\u5236\uff0c\u7531\u4e8e\u6bd4\u8f83\u7b80\u5355\uff0c\u56e0\u6b64\u57fa\u672c\u4e0a\u53ea\u9700\u8981\u8003\u8651\u533a\u5757\u5b9e\u73b0\u5373\u53ef\u3002\u4f46\u8bb8\u591a\u5171\u8bc6\u534f\u8bae\u8fdc\u6bd4\u5de5\u4f5c\u91cf\u8bc1\u660e\u66f4\u52a0\u590d\u6742\uff0c\u8fd9\u79cd\u590d\u6742\u6027\u4f53\u73b0\u5728\u5176\u5171\u8bc6\u8fc7\u7a0b\u9700\u8981\u4ea7\u751f\u533a\u5757\u4ee5\u5916\u7684\u5176\u4ed6\u6d88\u606f\u5e76\u5728\u7f51\u7edc\u4e2d\u4f20\u64ad\uff0c\u5e76\u4e14\u9664\u4e86\u672c\u5730\u94fe\u4ee5\u5916\u6bcf\u4e2a\u77ff\u5de5\u53ef\u80fd\u8fd8\u4f1a\u6709\u5176\u4ed6\u72b6\u6001\u91cf\u3002\u5982\u679c\u8981\u5b9e\u73b0\u8fd9\u6837\u7684\u5171\u8bc6\u534f\u8bae\uff0c\u9700\u8981\u6269\u5c55\u5171\u8bc6\u5c42\u4e0e\u7f51\u7edc\u5c42\u53ef\u5904\u7406\u7684\u5bf9\u8c61\u3002ChainXim\u4e2d\u53ef\u4ee5\u901a\u8fc7\u6d3e\u751fdata.Message\u7c7b\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6bd4\u5982\u589e\u52a0ExtraMessage\u4f5c\u4e3aMyConsensus\u7684\u5b50\u7c7b\uff1a</p> <pre><code>    class ExtraMessage(network.Message):\n        def __init__(self,size,...):\n</code></pre> <p>\u7136\u540e\u5728\u9700\u8981ExtraMessage\u7684\u5730\u65b9\u76f4\u63a5\u6784\u9020\u5373\u53ef\uff0c\u8fd9\u6837\u7684\u5bf9\u8c61\u53ef\u4ee5\u5728\u7f51\u7edc\u5c42\u6b63\u786e\u4f20\u64ad\u3002\u4e3a\u4e86\u4f7fExtraMessage\u88ab\u5171\u8bc6\u5bf9\u8c61\u6b63\u786e\u63a5\u6536\uff0c\u9700\u8981\u5728MyConsensus\u7c7b\u4e2d\u91cd\u5199receive\u65b9\u6cd5\u5e76\u65b0\u589ereceive_extra_message\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u793a\u4f8b\uff1a</p> <pre><code>    def receive(self,msg: Message):\n        if isinstance(msg,Block):\n            return self.receive_block(msg)\n        elif isinstance(msg,ExtraMessage):\n            return self.receive_extra_message(msg)\n    def receive_extra_message(self,extra_msg: ExtraMessage):\n        if extra_msg_not_received_yet:\n            self._receive_tape.append(extra_msg)\n            random.shuffle(self._receive_tape) # \u6253\u4e71\u63a5\u6536\u987a\u5e8f\n            return True\n        else:\n            return False\n</code></pre> <p>\u5982\u679c\u5171\u8bc6\u534f\u8bae\u7c7b\u4f3c\u5de5\u4f5c\u91cf\u8bc1\u660e\u673a\u5236\uff0c\u53ef\u4ee5\u4eff\u7167PoW.mining_consensus\uff0c\u7528MyConsensus.mining_consensus\u5b9e\u73b0\u5171\u8bc6\u673a\u5236\u4e2d\u7684\u51fa\u5757\u7b97\u6cd5\uff0c\u5176\u63a5\u53e3\u5982\u4e0b\uff1a</p> <pre><code>    def mining_consensus(self, Miner_ID, isadversary, x, round):\n</code></pre> <p>\u66f4\u5177\u4f53\u7684\u5199\u6cd5\u53ef\u4ee5\u53c2\u8003PoW.mining_consensus\u3002</p> <p>\u4f46\u5982\u679c\u662f\u66f4\u52a0\u590d\u6742\u7684\u5171\u8bc6\u534f\u8bae\uff0c\u9700\u8981\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u4ea7\u751fBlock\u4ee5\u5916\u7684\u6d88\u606f\u5bf9\u8c61\uff0c\u5219\u9700\u8981\u7528MyConsensus.consensus_process\u8986\u76d6Consensus.consensus_process\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u673a\uff0c\u793a\u4f8b\uff1a</p> <pre><code>    def consensus_process(self, Miner_ID, isadversary, x, round):\n        if self.state == STATE1:\n            newblock, mine_success = self.mining_consensus(Miner_ID, isadversary, x, round)\n            if mine_success is True:\n                self.local_chain.add_blocks(newblock)\n                self.local_chain.set_last_block(newblock)\n                self.state = NEXT_STATE\n                return [newblock], True # \u8fd4\u56de\u6316\u51fa\u7684\u533a\u5757\n            else:\n                return None, False\n        elif self.state == STATE2:\n            DO_SOMETHING_TO_PRODUCE_EXTRA_MESSAGE\n            self.state = NEXT_STATE\n            if len(list_of_extra_messages) &gt; 0:\n                return list_of_extra_messages, True\n            else:\n                return None, False\n</code></pre> <p>\u5176\u4e2dself.state\u662f\u63a7\u5236\u5171\u8bc6\u7c7b\u5b9e\u4f8b\u7684\u72b6\u6001\uff0c\u5728STATE2\u4e0bconsensus_process\u5982\u679c\u4ea7\u751f\u4e86\u65b0\u7684\u6d88\u606f\u5219\u8fd4\u56de\u7531ExtraMessage\u6784\u6210\u7684\u5217\u8868\u4ee5\u53caTrue\uff1b\u5982\u679c\u6ca1\u6709\u5219\u8fd4\u56deNone\u4ee5\u53caFalse\u3002self.state\u53ef\u4ee5\u5728__init__\u4e2d\u521d\u59cb\u5316\uff0c\u793a\u4f8b\uff1a</p> <pre><code>    def __init__(self, miner_id, consensus_param):\n        super().__init__(miner_id)\n        self.state = INITIAL_STATE\n        ...\n</code></pre> <p>MyConsensus.local_state_update\u9700\u8981\u6839\u636e_receive_tape\u4e2d\u7f13\u5b58\u7684Message\u5bf9\u8c61\u66f4\u65b0\u5171\u8bc6\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u6700\u5178\u578b\u7684\u5c31\u662f\u6839\u636e\u4f20\u5165\u7684\u533a\u5757\u66f4\u65b0\u672c\u5730\u94fe\uff0c\u5176\u903b\u8f91\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\uff1a</p> <pre><code>    def local_state_update(self):\n        for incoming_block in self._receive_tape:\n            if isinstance(incoming_block, Consensus.Block):# \u5904\u7406Block\n                if not self.valid_block(incoming_block):\n                    continue\n                prehash = incoming_block.blockhead.prehash\n                if insert_point := self.local_chain.search_block_by_hash(prehash):\n                    conj_block = self.local_chain.add_blocks(blocks=[incoming_block], insert_point=insert_point)\n                    fork_tip, _ = self.synthesize_fork(conj_block)\n                    depthself = self.local_chain.get_height()\n                    depth_incoming_block = fork_tip.get_height()\n                    if depthself &lt; depth_incoming_block:\n                        self.local_chain.set_last_block(fork_tip)\n                        new_update = True\n                        self.state = NEXT_STATE # \u63a5\u6536\u5230\u65b0\u533a\u5757\u65f6\u7684\u72b6\u6001\u8f6c\u79fb\n                else:\n                    self._block_buffer.setdefault(prehash, [])\n                    self._block_buffer[prehash].append(incoming_block)\n\n            elif isinstance(message, ExtraMessage): # \u5904\u7406ExtraMessage\n                DEAL_WITH_OTHER_INCOMING_MESSAGES\n                self.state = NEXT_STATE # \u63a5\u6536\u5230\u5176\u4ed6\u6d88\u606f\u65f6\u7684\u72b6\u6001\u8f6c\u79fb\n            elif ...:\n                ...\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u6839\u636e_receive_tape\u4e2d\u6d88\u606f\u7684\u7c7b\u578b\u5206\u522b\u5904\u7406\uff0c\u5982\u679c\u4f20\u5165\u7684\u662f\u533a\u5757\u5c31\u5c1d\u8bd5\u9a8c\u8bc1\u5e76\u5c06\u5176\u5408\u5e76\u5230\u672c\u5730\u94fe\u4e2d\u3002\u4e00\u822clocal_state_update\u9700\u8981\u8c03\u7528valid_chain\u65b9\u6cd5\u9a8c\u8bc1\u4f20\u5165\u533a\u5757\u6240\u5728\u7684\u94fe\uff0c\u56e0\u6b64\u9700\u8981\u5728MyConsensus\u4e2d\u5b9e\u73b0valid_chain\u4e0evalid_block\u65b9\u6cd5\u3002\u4e00\u822cvalid_chain\u65b9\u6cd5\u4f1a\u6838\u5bf9\u94fe\u4e0a\u533a\u5757\u7684prehash\uff0c\u786e\u8ba4\u94fe\u4e0a\u533a\u5757\u80fd\u5426\u80fd\u6b63\u786e\u6784\u6210\u54c8\u5e0c\u94fe\uff0c\u5e76\u8c03\u7528valid_block\u9a8c\u8bc1\u6bcf\u4e2a\u533a\u5757\u7684\u5408\u6cd5\u6027\u3002valid_chain\u7684\u5199\u6cd5\u53ef\u4ee5\u53c2\u8003PoW.valid_chain\u3002</p> <p>\u6700\u540e\uff0c\u5982\u679c\u9700\u8981\u4f7f\u5171\u8bc6\u7c7bMyConsensus\u53ef\u914d\u7f6e\uff0c\u8fd8\u9700\u8981\u4fee\u6539__init__\u65b9\u6cd5\u5e76\u5728system_config.ini\u4e2d\u589e\u52a0\u914d\u7f6e\u9879\u3002__init__\u53ef\u53c2\u8003\u4ee5\u4e0b\u8303\u4f8b\uff1a</p> <pre><code>    def __init__(self, miner_id, consensus_param):\n        super().__init__(miner_id)\n        self.state = INITIAL_STATE # \u72b6\u6001\u521d\u59cb\u5316\n        self.a = consensus_param['param_a']\n        self.b = int(consensus_param['param_b']) # \u7c7b\u578b\u8f6c\u6362\n</code></pre> <p>__init__\u4fee\u6539\u540e\uff0c\u5c31\u53ef\u4ee5\u5728system_config.ini\u4e2d\u7684ConsensusSettings\u90e8\u5206\u589e\u52a0\u914d\u7f6e\u9879param_a\u4e0eparam_b\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8econsensus.PoW\u4ee5\u5916\u7684\u5171\u8bc6\u7c7b\uff0c\u6240\u6709ConsensusSettings\u4e0b\u7684\u914d\u7f6e\u9879\u4f1a\u4ee5\u5b57\u5178\u5f62\u5f0f\u901a\u8fc7consensus_param\u539f\u6837\u4f20\u9012\u7ed9MyConsensus\u3002\u5982\u679c\u5728system_config.ini\u4e2d\u914d\u7f6e\u5982\u4e0b\uff1a</p> <pre><code>[ConsensusSettings]\nparam_a=value_a\nparam_b=100\n</code></pre> <p>\u90a3\u4e48\u4f20\u9012\u7ed9MyConsensus.__init__\u7684consensus_param\u4e3a<code>{'param_a':'value_a','param_b':'100'}</code>\u3002</p> <p>\u76ee\u524dChainXim\u5728\u521d\u59cb\u5316\u65f6\u6839\u636econsensus_type\u914d\u7f6e\u9879\u7684\u503c\u52a8\u6001\u5bfc\u5165\u5171\u8bc6\u7c7b\uff0c\u5982\u679c\u9700\u8981\u5728\u4eff\u771f\u4e2d\u4f7f\u7528MyConsensus\u7c7b\uff0c\u9700\u8981\u5728system_config.ini\u4e2d\u914d\u7f6e\u5982\u4e0b\uff1a <pre><code>consensus_type=consensus.MyConsensus\n</code></pre> \u5e76\u5728consensus/__init__.py\u4e2d\u6dfb\u52a0\u4e00\u884c\uff08\u5047\u8bbeMyConsensus\u7c7b\u5b9a\u4e49\u4e8econsensus/myconsensus.py\uff09\uff1a <pre><code>from .myconsensus import MyConsensus\n</code></pre></p>"},{"location":"developer-guide/#\u7f51\u7edc\u63a5\u53e3-Network-Interface","title":"\u7f51\u7edc\u63a5\u53e3 Network Interface","text":"<p>\u5728\u4ecb\u7ecd\u7f51\u7edc\u6a21\u5757\u4e4b\u524d\uff0c\u9996\u5148\u4ecb\u7ecd\u7f51\u7edc\u63a5\u53e3\uff0c\u5b9a\u4e49\u4e8e<code>./miner/network_interface</code>\uff0c\u7528\u4e8e\u6a21\u62df\u7f51\u5361\uff08NIC\uff09\u7684\u884c\u4e3a\uff0c\u4f5c\u4e3a\u77ff\u5de5\u548c\u7f51\u7edc\u4e4b\u95f4\u4ea4\u4e92\u7684\u901a\u9053\u3002\u5728\u77ff\u5de5\u521d\u59cb\u5316\u65f6\u5e76\u52a0\u5165\u7f51\u7edc\u65f6\uff0c\u4f1a\u6839\u636e\u7f51\u7edc\u7c7b\u578b\u5728\u77ff\u5de5\u4e2d\u521d\u59cb\u5316\u4e00\u4e2aNIC\u5b9e\u4f8b\u3002</p> <p><pre><code>def join_network(self, network):\n    \"\"\"\u521d\u59cb\u5316\u7f51\u7edc\u63a5\u53e3\"\"\"\n    if (isinstance(network, TopologyNetwork) or \n        isinstance(network, AdHocNetwork)):\n        self.NIC = NICWithTp(self)\n    else:\n        self.NIC = NICWithoutTp(self)\n    if isinstance(network, AdHocNetwork):\n        self.NIC.withSegments = True\n    self.NIC.nic_join_network(network)\n</code></pre> \u77ff\u5de5\u5c06\u5171\u8bc6\u8fc7\u7a0b\u4ea7\u751f\u7684\u6d88\u606f\uff08\u76ee\u524d\u4ec5\u6709\u533a\u5757\uff09\u901a\u8fc7\u8be5NIC\u5b9e\u4f8b\u53d1\u9001\u5230\u7f51\u7edc\u4e2d\uff1b\u800c\u7f51\u7edc\u4e5f\u901a\u8fc7\u8be5NIC\u5b9e\u4f8b\uff0c\u5c06\u6b63\u5728\u4f20\u64ad\u7684\u533a\u5757\u53d1\u9001\u7ed9\u76ee\u6807\u77ff\u5de5\u3002 \u6839\u636e\u7f51\u7edc\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u53ef\u4ee5\u5c06\u7f51\u7edc\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e0d\u5e26\u62d3\u6251\u4fe1\u606f\u7684\u62bd\u8c61\u7f51\u7edc\uff08SynchronousNetwork\u3001StochPropNetwork\u3001DeterPropNetwork\uff09\u548c\u5e26\u62d3\u6251\u4fe1\u606f\u7684\u62df\u771f\u7f51\u7edc\uff08TopologyNetwork\u3001AdHocNetwork\uff09\u3002\u5bf9\u5e94\u5c06Network Interface\u5206\u4e3a\u4e24\u7c7b\uff1a<code>NICWithoutTp</code>\u548c<code>NICWithTp</code>\u3002\u8fd9\u4e24\u7c7b\u7f51\u7edc\u63a5\u53e3\u90fd\u7ee7\u627f\u81ea\u62bd\u8c61\u57fa\u7c7b<code>NetworkInterface</code>\u3002\u5728\u5177\u4f53\u4ecb\u7ecd\u7f51\u7edc\u63a5\u53e3\u524d\uff0c\u5148\u4ecb\u7ecd\u4e00\u4e9b<code>./miner/_consts.py</code>\u4e2d\u9884\u5148\u5b9a\u4e49\u7684\u4e00\u4e9b\u5e38\u91cf\u3002</p>"},{"location":"developer-guide/#\u7f51\u7edc\u63a5\u53e3\u76f8\u5173\u5e38\u91cf-_constspy","title":"\u7f51\u7edc\u63a5\u53e3\u76f8\u5173\u5e38\u91cf _consts.py","text":"<p>\u7f51\u7edc\u63a5\u53e3\u5728\u5b9e\u73b0\u65f6\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u5e38\u91cf\uff0c\u8fd9\u4e9b\u5e38\u91cf\u9884\u5b9a\u4e49\u5728\u6587\u4ef6<code>./miner/_consts.py</code>\u4e2d\uff0c\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a</p>"},{"location":"developer-guide/#1-\u8f6c\u53d1\u7b56\u7565","title":"1. \u8f6c\u53d1\u7b56\u7565","text":"<p>TopologyNetwork\u3001AdHocNetwork\u4e2d\uff0c\u77ff\u5de5\u9700\u8981\u5bf9\u4ea7\u751f\u7684\u6d88\u606f\u6307\u5b9a\u8f6c\u53d1\u7b56\u7565\u3002\u76ee\u524d\u5b9a\u4e49\u4e86\u4e09\u79cd\uff1a</p> \u5e38\u91cf \u5177\u4f53\u503c \u89e3\u91ca FLOODING \"flooding\" \u6cdb\u6d2a\u8f6c\u53d1\uff0c\u5373\u5411\u6240\u6709\u90bb\u5c45\u8282\u70b9\u8f6c\u53d1 SELFISH \"selfish\" \u81ea\u79c1\u8f6c\u53d1\uff0c\u5373\u4e0d\u8fdb\u884c\u8f6c\u53d1\u64cd\u4f5c SPEC_TARGETS \"spec_tagets\" \u6307\u5b9a\u8f6c\u53d1\u76ee\u6807"},{"location":"developer-guide/#2-\u5f85\u8f6c\u53d1\u6d88\u606f\u6765\u6e90","title":"2. \u5f85\u8f6c\u53d1\u6d88\u606f\u6765\u6e90","text":"<p>\u6d88\u606f\u7684\u6765\u6e90\u5373\u8be5\u6d88\u606f\u662f\u81ea\u5df1\u4ea7\u751f\u7684\u8fd8\u662f\u4ece\u5916\u90e8\u7f51\u7edc\u4e2d\u63a5\u6536\u5230\u7684\u3002\u8be5\u5e38\u91cf\u7684\u8bbe\u7f6e\u4e3b\u8981\u662f\u56e0\u4e3a\u5728\u4e0d\u540c\u7f51\u7edc\u4e2d\u5bf9\u4e0d\u540c\u6765\u6e90\u7684\u6d88\u606f\u6709\u4e0d\u540c\u7684\u5904\u7406\uff1a\u65e0\u62d3\u6251\u7684\u62bd\u8c61\u7f51\u7edc\uff08SynchronousNetwork\u3001StochPropNetwork\u3001DeterPropNetwork\uff09\u4e2d\u4ec5\u4f1a\u8f6c\u53d1\u81ea\u5df1\u4ea7\u751f\u7684\u6d88\u606f\uff1b\u800c\u5e26\u62d3\u6251\u7684\u62df\u771f\u7f51\u7edc\uff08TopologyNetwork\u3001AdHocNetwork\uff09\u4e24\u79cd\u6765\u6e90\u7684\u6d88\u606f\u90fd\u4f1a\u8f6c\u53d1\u3002</p> \u5e38\u91cf \u5177\u4f53\u503c \u89e3\u91ca SELF \"self_generated_msg\" \u8be5\u6d88\u606f\u662f\u81ea\u5df1\u4ea7\u751f\u7684 OUTER \"msg_from_outer\" \u8be5\u6d88\u606f\u662f\u4ece\u5916\u90e8\u7f51\u7edc\u4e2d\u63a5\u6536\u5230\u7684"},{"location":"developer-guide/#3-\u4fe1\u9053\u72b6\u6001","title":"3. \u4fe1\u9053\u72b6\u6001","text":"<p>\u5728TopologyNetwork\u3001AdHocNetwork\u4e2d\u7528\u4e8e\u6807\u8bb0\u4fe1\u9053\u72b6\u6001\u3002</p> \u5e38\u91cf \u5177\u4f53\u503c \u89e3\u91ca _IDLE \"idle\" \u4fe1\u9053\u7a7a\u95f2 _BUSY \"busy\" \u4fe1\u9053\u4e2d\u6709\u6d88\u606f\u6b63\u5728\u4f20\u9012"},{"location":"developer-guide/#\u7f51\u7edc\u63a5\u53e3\u62bd\u8c61\u57fa\u7c7b-NetworkInterface","title":"\u7f51\u7edc\u63a5\u53e3\u62bd\u8c61\u57fa\u7c7b NetworkInterface","text":"<p>\u7f51\u7edc\u63a5\u53e3\u62bd\u8c61\u57fa\u7c7b\uff0c\u5b9a\u4e49\u4e86\u5e94\u5f53\u5b9e\u73b0\u7684\u62bd\u8c61\u63a5\u53e3\u3002\u4f4d\u4e8e<code>.\\network\\nic_abc.py</code>\u4e2d\u3002\u9996\u5148\u5b9a\u4e49\u4e86\u6240\u6709\u7f51\u7edc\u63a5\u53e3\u5171\u540c\u62e5\u6709\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4ee5\u53ca\u5404\u7f51\u7edc\u63a5\u53e3\u9700\u8981\u5b9e\u73b0\u7684\u62bd\u8c61\u65b9\u6cd5\u3002</p> \u6210\u5458\u53d8\u91cf \u7c7b\u578b \u89e3\u91ca miner Miner \u6301\u6709\u8be5\u7f51\u7edc\u63a5\u53e3\u7684\u77ff\u5de5 miner_id int \u6301\u6709\u8be5\u7f51\u7edc\u63a5\u53e3\u7684\u77ff\u5de5ID _network Network \u73af\u5883\u4e2d\u7684\u7f51\u7edc\u5b9e\u4f8b _receive_buffer list[Packet] \u7f13\u5b58\u672c\u8f6e\u4e2d\u4ece\u7f51\u7edc\u4e2d\u63a5\u6536\u5230\u7684\u6570\u636e\u5305 _forward_buffer dict[str, list[Block]] \u7f13\u5b58\u5c06\u8981\u53d1\u9001\u5230\u7f51\u7edc\u4e2d\u7684\u6d88\u606f\u961f\u5217\uff08\u76ee\u524d\u4ec5\u6709Block\uff09\uff1bkey\u8868\u793a\u8be5\u6d88\u606f\u7684\u6765\u6e90\uff0cOUTER\u548cSELF \u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570 \u89e3\u91ca append_forward_buffer msg:Message, type:str, strategy: str, spec_target:list \u5c06\u8981\u8f6c\u53d1\u7684\u6d88\u606fmsg\u6dfb\u52a0\u5230_forward_buffer\u4e2d\uff0c\u5e76\u6307\u5b9a\u6d88\u606f\u7c7b\u578b type\uff08OUTER/SELF\uff09\uff0c\u8f6c\u53d1\u7b56\u7565strategy\uff08\u9ed8\u8ba4FLOODING\uff09\uff0c\u6307\u5b9a\u76ee\u6807spec_target\u4ec5\u5728SPEC_TARGETS\u7b56\u7565\u6709\u6548\u3002 nic_join_network network:Network \u62bd\u8c61\u65b9\u6cd5\u3002\u5728\u77ff\u5de5\u521d\u59cb\u5316\u5e76\u52a0\u5165\u7f51\u7edc\u65f6\uff0c\u521d\u59cb\u5316\u7f51\u7edc\u63a5\u53e3 nic_receive packet: Packet \u62bd\u8c61\u65b9\u6cd5\u3002\u63a5\u6536\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u5305\uff0c\u5e76\u4f20\u9012\u7ed9\u77ff\u5de5\u3002 nic_forward list[Packet] \u62bd\u8c61\u65b9\u6cd5\u3002\u5c06_forward_buffer\u4e2d\u7684\u6d88\u606f\u6309\u7167\u89c4\u5219\u53d1\u9001\u5230\u7f51\u7edc\u4e2d\u3002 <p>\u4ee5\u4e0b\u65b9\u6cd5\u53ea\u6709TopologyNetwork\u3001AdHocNetwork\u4e24\u4e2a\u7f51\u7edc\u9700\u8981\u5b9e\u73b0\uff1a</p> \u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570 \u89e3\u91ca remove_neighbor remove_id:int \u62bd\u8c61\u65b9\u6cd5\u3002\u79fb\u9664\u6307\u5b9a\u7684\u90bb\u5c45\u3002 add_neighbor add_id:int \u62bd\u8c61\u65b9\u6cd5\u3002\u6dfb\u52a0\u6307\u5b9a\u7684\u90bb\u5c45\u3002 getdata inv:INVMsg \u62bd\u8c61\u65b9\u6cd5\u3002\u56de\u5e94inv\u6d88\u606f\uff0c\u7d22\u8981\u7f3a\u5931\u7684\u533a\u5757\u3002 get_reply msg_name, target:int, err:str, round \u62bd\u8c61\u65b9\u6cd5\u3002\u6d88\u606f\u6210\u529f\u53d1\u9001\u5230\u76ee\u6807\u77ff\u5de5\uff0c\u6216\u53d1\u9001\u5931\u8d25\u65f6\uff0c\u539f\u77ff\u5de5\u83b7\u5f97\u6d88\u606f\u53d1\u9001\u7ed3\u679c\u3002"},{"location":"developer-guide/#NICWithoutTp","title":"NICWithoutTp","text":"<p>\u77ff\u5de5\u548c\u7f51\u7edc\u4e4b\u95f4\u901a\u8fc7\u7f51\u7edc\u63a5\u53e3\u8fdb\u884c\u4ea4\u4e92\u7684\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b\uff1a 1. \u77ff\u5de5\u5728\u6709\u6d88\u606f\u9700\u8981\u4f20\u64ad\u65f6\uff08\u901a\u8fc7\u81ea\u8eab\u5171\u8bc6\u4ea7\u751f\u6216\u4ece\u5916\u90e8\u7f51\u7edc\u63a5\u6536\uff09\uff0c\u901a\u8fc7forward\u51fd\u6570\u4e2d\u5c06\u5f85\u8f6c\u53d1\u6d88\u606f\u5199\u5165NIC\u7684_forward_buffer\u5bf9\u5e94\u7684\u6d88\u606f\u961f\u5217\u4e2d\uff1b 2. \u5728\u6bcf\u4e00\u8f6e\u7ed3\u675f\u65f6\uff0c\u7f51\u7edc\u5728diffuse\u65f6\u8c03\u7528\u6bcf\u4e2a\u77ff\u5de5NIC\u4e2d\u7684nic_forward\u51fd\u6570\uff0c\u5c06_forward_buffer\u4e2d\u7684\u6d88\u606f\u63a5\u5165\u7f51\u7edc\uff0c\u5e76\u6309\u7167\u7f51\u7edc\u89c4\u5219\u8fdb\u884c\u4f20\u64ad\uff1b 3. \u7f51\u7edc\u5c06\u6d88\u606f\u4f20\u9012\u7ed9\u76ee\u6807\u77ff\u5de5\u65f6\uff0c\u4f1a\u8c03\u7528\u76ee\u6807\u77ff\u5de5NIC\u7684nic_receive\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8d1f\u8d23\u901a\u8fc7\u77ff\u5de5receive\u63a5\u53e3\u5c06\u6d88\u606f\u4f20\u9012\u7ed9\u77ff\u5de5\uff0c\u4f9b\u5171\u8bc6\u5c42\u5904\u7406\u3002</p> <p>\u5bf9\u4e8e\u4e0d\u5305\u542b\u62d3\u6251\u4fe1\u606f\u7684\u7f51\u7edc\u63a5\u53e3NICWithoutTp\uff0c\u5728\u4e0a\u8ff0\u8fc7\u7a0b2\u4e2d\uff0c\u4ec5\u8f6c\u53d1\u5904\u7406_forward_buffer\u4e2d\u7531\u81ea\u8eab\u4ea7\u751f\u7684\u6d88\u606f\uff0c\u5373SELF\u6d88\u606f\u961f\u5217\u4e2d\u7684\u5185\u5bb9\u3002\u4e3b\u8981\u7684\u6210\u5458\u65b9\u6cd5\u5982\u4e0b\uff1a</p> \u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570 \u89e3\u91ca nic_receive packet: Packet \u63a5\u6536\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u5305\uff0c\u5e76\u4f20\u9012\u7ed9\u77ff\u5de5\u3002 nic_forward list[Packet] _forward_buffer\u4e2dSELF\u6d88\u606f\u961f\u5217\u7684\u5185\u5bb9\u901a\u8fc7access_netork\u53d1\u9001\u5230\u7f51\u7edc\u4e2d\u3002"},{"location":"developer-guide/#NICWithTp","title":"NICWithTp","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570 \u89e3\u91ca nic_receive packet: Packet \u63a5\u6536\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u5305\uff0c\u5e76\u4f20\u9012\u7ed9\u77ff\u5de5\u3002 nic_forward list[Packet] _forward_buffer\u4e2d\u7684\u6d88\u606f\u6309\u7167\u89c4\u5219\u53d1\u9001\u5230\u7f51\u7edc\u4e2d\uff0c\u5177\u4f53\u8fc7\u7a0b\u5728\u540e\u6587\u4ecb\u7ecd\u3002 remove_neighbor remove_id:int \u79fb\u9664\u6307\u5b9a\u7684\u90bb\u5c45\u3002 add_neighbor add_id:int \u6dfb\u52a0\u6307\u5b9a\u7684\u90bb\u5c45\u3002 getdata inv:INVMsg \u56de\u5e94inv\u6d88\u606f\uff0c\u7d22\u8981\u7f3a\u5931\u7684\u533a\u5757\u3002 get_reply msg_name, target:int, err:str, round \u6d88\u606f\u6210\u529f\u53d1\u9001\u5230\u76ee\u6807\u77ff\u5de5\uff0c\u6216\u53d1\u9001\u5931\u8d25\u65f6\uff0c\u539f\u77ff\u5de5\u83b7\u5f97\u6d88\u606f\u53d1\u9001\u7ed3\u679c\u3002"},{"location":"developer-guide/#\u7f51\u7edc-Network","title":"\u7f51\u7edc Network","text":"<p>\u7f51\u7edc\u5c42\u7684\u4e3b\u8981\u529f\u80fd\u662f\u63a5\u6536\u73af\u5883\u4e2d\u4ea7\u751f\u7684\u65b0\u533a\u5757\uff0c\u5e76\u901a\u8fc7\u4e00\u5b9a\u7684\u4f20\u64ad\u89c4\u5219\u4f20\u8f93\u7ed9\u5176\u4ed6\u77ff\u5de5\uff0c\u4f5c\u4e3a\u77ff\u5de5\u4e4b\u95f4\u8fde\u63a5\u7684\u901a\u9053\u3002\u7f51\u7edc\u5c42\u7531\u62bd\u8c61\u57fa\u7c7bNetwork\u6d3e\u751f\u51fa\u4e0d\u540c\u7c7b\u578b\u7684\u7f51\u7edc\u3002\u76ee\u524d\u5b9e\u73b0\u4e86\u62bd\u8c61\u6982\u5ff5\u7684\u540c\u6b65\u7f51\u7edc\uff08SynchronousNetwork\uff09\u3001\u968f\u673a\u6027\u4f20\u64ad\u7f51\u7edc\uff08StochPropNetwork\uff09\uff0c\u786e\u5b9a\u6027\u4f20\u64ad\u7f51\u7edc\uff08DeterPropNetwork\uff09\u548c\u76f8\u5bf9\u771f\u5b9e\u7684\u62d3\u6251P2P\u7f51\u7edc\uff08TopologyNetwork\uff09\u3002</p>"},{"location":"developer-guide/#\u62bd\u8c61\u57fa\u7c7b-Network","title":"\u62bd\u8c61\u57fa\u7c7b Network","text":"<p>Network\u57fa\u7c7b\u89c4\u5b9a\u4e86\u4e09\u4e2a\u63a5\u53e3\uff0c\u5916\u90e8\u6a21\u5757\u53ea\u80fd\u901a\u8fc7\u8fd9\u4e09\u4e2a\u63a5\u53e3\u4e0e\u7f51\u7edc\u6a21\u5757\u4ea4\u4e92\uff1b\u540c\u65f6\u4e5f\u89c4\u5b9a\u4e86\u8f93\u5165\u53c2\u6570\uff0c\u6d3e\u751f\u7c7b\u4e0d\u53ef\u4ee5\u66f4\u6539</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u8bbe\u7f6e\u7f51\u7edc\u53c2\u6570\u3002\u5728\u73af\u5883\u7c7b\u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\u7f51\u7edc\u53c2\u6570\u3002main\u7531\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u7f51\u7edc\u53c2\u6570\u4fe1\u606f\u5230\u73af\u5883\u3002 access_network new_msg:list[Message], minerid:int,round:int \u63a5\u6536\u6240\u6709\u65b0\u4ea7\u751f\u7684\u6d88\u606f\u5bf9\u8c61\u8fdb\u5165\u7f51\u7edc\uff0c\u7b49\u5f85\u4f20\u64ad\u3002\u540c\u65f6\u5c06\u5404\u6d88\u606f\u5bf9\u8c61\u548c\u4f20\u64ad\u76f8\u5173\u4fe1\u606f\u5c01\u88c5\u6210 Packet\u3002 diffuse round:int \u6700\u4e3b\u8981\u7684\u51fd\u6570\u3002\u5728exec\u6bcf\u8f6e\u7ed3\u675f\u65f6\u8c03\u7528\uff0c\u5177\u4f53\u5b9e\u73b0\u7f51\u7edc\u7684\u4f20\u64ad\u89c4\u5219 <p>\u5728\u4ecb\u7ecd\u5177\u4f53\u76844\u79cd\u7f51\u7edc\u524d\uff0c\u5148\u4ecb\u7ecd\u6d88\u606f\u6570\u636e\u5305Packet\u3002</p>"},{"location":"developer-guide/#\u6d88\u606f\u6570\u636e\u5305-Packet","title":"\u6d88\u606f\u6570\u636e\u5305 Packet","text":"<p>\u6d88\u606f\u5bf9\u8c61\u901a\u8fc7access_network\u8fdb\u5165\u7f51\u7edc\u540e\u88ab\u5c01\u88c5\u4e3aPacket\uff0c\u9664\u4e86\u8fdb\u5165\u7f51\u7edc\u7684\u6d88\u606f\u5bf9\u8c61\u5916\u8fd8\u5305\u542b\u4f20\u64ad\u76f8\u5173\u4fe1\u606f\u3002 \u7f51\u7edc\u4e2d\u6d88\u606f\u5bf9\u8c61\u4ee5Packet\u7684\u5f62\u5f0f\u4f20\u64ad\uff0c\u5f85\u4f20\u64ad\u7684Packet\u5b58\u50a8\u5728\u7f51\u7edc\u7684network_tape\u5c5e\u6027\u4e2d\u3002 Packet\u5728\u4e0d\u540c\u7684\u7f51\u7edc\u7c7b\u4e2d\u6709\u4e0d\u540c\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u5982\uff1a - SynchronousNetwork\u4e2d\uff0c\u4ec5\u5305\u542b\u6d88\u606f\u5bf9\u8c61\u548c\u4ea7\u751f\u8be5\u6d88\u606f\u7684\u77ff\u5de5id\uff1b - StochPropNetwork\u4e2d\uff0c\u8fd8\u5305\u542b\u5bf9\u5e94\u7684\u5f53\u524d\u63a5\u6536\u6982\u7387\uff1b - DeterPropNetwork\u4e2d\uff0c\u8bb0\u5f55\u4e86\u4f20\u64ad\u5411\u91cf\uff1b - TopologyNetwork\u4e2d\uff0c\u8bb0\u5f55\u4e86\u6d88\u606f\u7684\u6765\u6e90\u3001\u76ee\u6807\u7b49\u3002</p> <p>\u4ee5TopologyNetwork\u4e2d\u7684PacketPVNet\u4e3a\u4f8b\uff1a</p> <pre><code># network/propvec.py\nclass PacketPVNet(Packet):\n    '''propagation vector\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u5305\uff0c\u5305\u542b\u8def\u7531\u76f8\u5173\u4fe1\u606f'''\n    def __init__(self, payload: Message, source_id: int, round: int, prop_vector:list, outnetobj):\n        super().__init__(source_id, payload)\n        self.payload = payload\n        self.source = source_id\n        self.round = round\n        self.outnetobj = outnetobj  # \u5916\u90e8\u7f51\u7edc\u7c7b\u5b9e\u4f8b\n        # \u4f20\u64ad\u8fc7\u7a0b\u76f8\u5173\n        self.received_miners:list[int] = [source_id]\n        self.trans_process_dict = {\n            f'miner {source_id}': round\n        }\n        # \u6bcf\u8f6e\u90fdpop\u7b2c\u4e00\u4e2a\uff0c\u8bb0\u5f55\u5269\u4f59\u7684\u4f20\u64ad\u5411\u91cf\n        self.remain_prop_vector = copy.deepcopy(prop_vector)\n</code></pre> <p>\u63a5\u4e0b\u6765\u4ecb\u7ecd\u5404\u79cd\u7f51\u7edc\u5982\u4f55\u5b9e\u73b0\u4e09\u79cd\u63a5\u53e3\u3002</p>"},{"location":"developer-guide/#\u540c\u6b65\u7f51\u7edc-SynchronousNetwork","title":"\u540c\u6b65\u7f51\u7edc SynchronousNetwork","text":"<p>\u9664\u4ea7\u751f\u6d88\u606f\u7684\u77ff\u5de5\u5916\uff0c\u6240\u6709\u77ff\u5de5\u90fd\u5728\u4e0b\u4e00\u8f6e\u6b21\u5f00\u59cb\u65f6\u63a5\u6536\u5230\u65b0\u4ea7\u751f\u7684\u6d88\u606f</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u540c\u6b65\u7f51\u7edc\u65e0\u9700\u53c2\u6570 access_network new_msg:list[Message], minerid:int,round:int \u5c06\u6d88\u606f\u5bf9\u8c61\u3001\u77ff\u5de5id\u3001\u5f53\u524d\u8f6e\u6b21\u5c01\u88c5\u6210PacketSyncNet\uff0c\u52a0\u5165network_tape\u3002 diffuse - \u5728\u4e0b\u4e00\u8f6e\u6b21\u5f00\u59cb\u65f6\uff0c\u6240\u6709\u77ff\u5de5\u90fd\u6536\u5230network_tape\u4e2d\u7684\u6570\u636e\u5305"},{"location":"developer-guide/#\u968f\u673a\u6027\u4f20\u64ad\u7f51\u7edcStochPropNetwork","title":"\u968f\u673a\u6027\u4f20\u64ad\u7f51\u7edcStochPropNetwork","text":"<p>\u65b0\u6d88\u606f\u5728\u8fdb\u5165\u7f51\u7edc\u540e\uff0c\u6bcf\u8f6e\u6b21\u4ee5\u4e0d\u65ad\u589e\u52a0\u7684\u6982\u7387\u88ab\u5404\u77ff\u5de5\u63a5\u6536\uff08\u65f6\u5ef6\uff09\uff0c\u4e14\u81f3\u591a\u5728\u63a5\u6536\u6982\u7387\u8fbe\u52301\u540e\u88ab\u6240\u6709\u77ff\u5de5\u63a5\u6536\uff08\u6709\u754c\uff09\u3002</p> <p>\u7f51\u7edc\u53c2\u6570\uff1a</p> \u5c5e\u6027 \u8bf4\u660e rcvprob_start\uff08float\uff09 \u521d\u59cb\u63a5\u6536\u6982\u7387\u3002\u5373\u8be5\u6d88\u606f\u8fdb\u5165\u7f51\u7edc\u65f6\uff0c\u5728\u4e0b\u4e00\u8f6e\u88ab\u67d0\u4e2a\u77ff\u5de5\u63a5\u6536\u7684\u6982\u7387 rcvprob_inc\uff08float\uff09 \u6d88\u606f\u8fdb\u5165\u7f51\u7edc\u540e\uff0c\u6bcf\u8f6e\u589e\u52a0\u7684\u63a5\u6536\u6982\u7387 <p>\u4f8b\u5982\uff0crcvprob_start=rcvprob_inc=0.2\u7684\u60c5\u51b5\u4e0b\uff0c\u65b0\u6d88\u606f\u5728\u8fdb\u5165\u7f51\u7edc\u540e\uff0c\u6240\u6709\u5176\u4ed6\u77ff\u5de5\u5fc5\u5b9a\u57285\u8f6e\u5185\u63a5\u6536\u5230\u6d88\u606f\u3002</p> <p>\u63a5\u53e3\u51fd\u6570\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u8bbe\u7f6ercvprob_start\uff0crcvprob_inc access_network new_msg:list[Message], minerid:int,round:int \u6d88\u606f\u5bf9\u8c61\u3001\u77ff\u5de5id\u3001\u5f53\u524d\u8f6e\u6b21\u5c01\u88c5\u6210PacketBDNet\u52a0\u5165network_tape\u3002\u5e76\u521d\u59cb\u5316\u8be5\u6570\u636e\u5305\u7684\u63a5\u6536\u6982\u7387\uff0c\u540c\u65f6\u8bb0\u5f55\u4f20\u64ad\u8fc7\u7a0b diffuse round:int network tape\u4e2d\u7684\u5404\u4e2aPacket\u4ee5\u4e0d\u65ad\u589e\u52a0\u6982\u7387\u88ab\u5404\u77ff\u5de5\u63a5\u6536\uff0c\u5f53\u524d\u63a5\u6536\u6982\u7387\u66f4\u65b0\u5230PacketBDNet\u3002\u5728\u88ab\u6240\u6709\u77ff\u5de5\u90fd\u63a5\u6536\u5230\u65f6\uff0c\u5c06\u5176\u5728network_tape\u4e2d\u5220\u9664\uff0c\u5e76\u628a\u4f20\u64ad\u8fc7\u7a0b\u4fdd\u5b58\u5728network log.txt\u4e2d\u3002\u6ce8\uff1a\u5f53\u53d1\u9001\u7ed9\u653b\u51fb\u8005\u65f6\uff0c\u5176\u4ed6\u653b\u51fb\u8005\u4e5f\u7acb\u5373\u6536\u5230 <p>\u91cd\u8981\u51fd\u6570</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e record_block_propagation_time - \u8bb0\u5f55\u6d88\u606f\u4f20\u64ad\u65f6\u95f4 save_trans_process - \u4fdd\u5b58\u4f20\u64ad\u8fc7\u7a0b"},{"location":"developer-guide/#\u786e\u5b9a\u6027\u4f20\u64ad\u7f51\u7edc-DeterPropNetwork","title":"\u786e\u5b9a\u6027\u4f20\u64ad\u7f51\u7edc DeterPropNetwork","text":"<p>\u7ed9\u5b9a\u4f20\u64ad\u5411\u91cf\uff0c\u7f51\u7edc\u4f9d\u7167\u4f20\u64ad\u5411\u91cf\uff0c\u6bcf\u8f6e\u6b21\u5f00\u59cb\u65f6\u5c06\u6d88\u606f\u5bf9\u8c61\u53d1\u9001\u7ed9\u56fa\u5b9a\u6bd4\u4f8b\u7684\u77ff\u5de5\u3002</p> <p>\u7f51\u7edc\u53c2\u6570\uff1a</p> \u5c5e\u6027 \u8bf4\u660e prop_vector\uff08list\uff09 \u4f20\u64ad\u5411\u91cf\u3002\u4f8b\u5982prop_vector=[0.1, 0.2, 0.4, 0.6, 0.8, 1.0]\u8868\u793a\u4e0b\u4e00\u8f6e\u5f00\u59cb\u524d\u63a5\u6536\u5230\u8be5\u6d88\u606f\u7684\u77ff\u5de5\u6bd4\u4f8b\u4e3a0.1\uff0c\u518d\u4e00\u8f6e\u8fc7\u540e\u6bd4\u4f8b\u4e3a0.2\uff0c\u76f4\u5230\u4e94\u8f6e\u8fc7\u540e\u5168\u90e8\u77ff\u5de5\u90fd\u63a5\u6536\u5230\u8be5\u6d88\u606f\u3002 <p>\u63a5\u53e3\u51fd\u6570\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u8bbe\u7f6eprop_vector access_network new_msg:list[Message], minerid:int,round:int \u6240\u6709\u65b0\u6d88\u606f\u3001\u77ff\u5de5id\u3001\u5f53\u524d\u8f6e\u6b21\u5c01\u88c5\u6210\u6570\u636e\u5305\uff08PacketPVNet\uff09\u52a0\u5165network_tape\u3002\u5e76\u521d\u59cb\u5316\u8be5\u6570\u636e\u5305\u7684\u4f20\u64ad\u5411\u91cf\uff0c\u540c\u65f6\u8bb0\u5f55\u4f20\u64ad\u8fc7\u7a0b diffuse round:int \u4f9d\u7167\u4f20\u64ad\u5411\u91cf,\u5728\u6bcf\u4e00\u8f6e\u4e2d\u5c06\u6570\u636e\u5305\u4f20\u64ad\u7ed9\u56fa\u5b9a\u6bd4\u4f8b\u7684\u77ff\u5de5\u6ce8\uff1a\u5f53\u53d1\u9001\u7ed9\u653b\u51fb\u8005\u65f6\uff0c\u5176\u4ed6\u653b\u51fb\u8005\u4e5f\u7acb\u5373\u6536\u5230\uff0c\u6b64\u65f6\u53ef\u80fd\u51fa\u73b0\u6bd4\u4f8b\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002 <p>\u91cd\u8981\u51fd\u6570</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e record_block_propagation_time - \u8bb0\u5f55\u6d88\u606f\u4f20\u64ad\u65f6\u95f4 save_trans_process - \u4fdd\u5b58\u4f20\u64ad\u8fc7\u7a0b"},{"location":"developer-guide/#\u62d3\u6251P2P\u7f51\u7edc-TopologyNetwork","title":"\u62d3\u6251P2P\u7f51\u7edc TopologyNetwork","text":"<p>\u901a\u8fc7csv\u6587\u4ef6\u6216\u968f\u673a\u65b9\u5f0f\u751f\u6210\u7f51\u7edc\u62d3\u6251\u548c\u5404\u77ff\u5de5\u95f4\u7684\u5e26\u5bbd\u3002\u6d88\u606f\u901a\u8fc7\u77ff\u5de5\u7684\u7f51\u7edc\u63a5\u53e3\u8fdb\u5165\u7f51\u7edc\u540e\uff0c\u5728\u6307\u5b9a\u7684\u6765\u6e90\u548c\u76ee\u6807\u4e4b\u95f4\u5efa\u7acb\u94fe\u8def(Link)\u8fdb\u884c\u4f20\u64ad\uff0c\u6bcf\u6761Link\u7684\u4f20\u8f93\u65f6\u95f4\uff08\u8f6e\u6b21\uff09\u7531\u94fe\u8def\u5e26\u5bbd\u4e0e\u533a\u5757\u5927\u5c0f\u51b3\u5b9a\u3002\u540c\u65f6\u94fe\u8def\u53ef\u80fd\u4ee5\u9884\u8bbe\u7684outage_prob\u6982\u7387\u4e2d\u65ad\uff0c\u6b64\u65f6\u53d1\u9001\u65b9\u4f1a\u91cd\u65b0\u53d1\u9001\u6d88\u606f\u3002</p> <p>\u7f51\u7edc\u53c2\u6570\uff1a</p> \u5c5e\u6027 \u8bf4\u660e init_mode (str) \u7f51\u7edc\u521d\u59cb\u5316\u65b9\u6cd5, 'adj'\u90bb\u63a5\u77e9\u9635, 'coo'\u7a00\u758f\u7684\u90bb\u63a5\u77e9\u9635, 'rand'\u968f\u673a\u751f\u6210\u3002'adj'\u548c'coo'\u7684\u7f51\u7edc\u62d3\u6251\u901a\u8fc7csv\u6587\u4ef6\u7ed9\u5b9a\u3002'rand'\u9700\u8981\u6307\u5b9a\u5e26\u5bbd\u3001\u5ea6\u7b49\u53c2\u6570 outage_prob(float) \u6bcf\u6761\u94fe\u8def\u7684\u4e2d\u65ad\u6982\u7387 dynamic(bool) \u7f51\u7edc\u62d3\u6251\u662f\u5426\u52a8\u6001\u53d8\u5316 avg_tp_change_interval(int) dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u7684\u5e73\u5747\u8f6e\u6b21 edge_remove_prob(float) dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u5df2\u5b58\u5728\u7684\u6bcf\u6761\u8fb9\u79fb\u9664\u7684\u6982\u7387 edge_add_prob(float) dynamic=true\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u672a\u5b58\u5728\u7684\u6761\u8fb9\u65b0\u5efa\u7acb\u8fde\u63a5\u7684\u6982\u7387 max_allowed_partitions(int) dynamic=true\u65f6,\u8bbe\u7f6e\u62d3\u6251\u53d8\u5316\u65f6\uff0c\u6700\u5927\u53ef\u5b58\u5728\u7684\u5206\u533a\u6570\u91cf ave_degree (int) \u7f51\u7edc\u751f\u6210\u65b9\u5f0f\u4e3a'rand'\u65f6\uff0c\u8bbe\u7f6e\u62d3\u6251\u5e73\u5747\u5ea6 bandwidth_adv\uff08float\uff09 \u653b\u51fb\u8005\u4e4b\u95f4\u7684\u5e26\u5bbd\uff0c\u5355\u4f4dMB/round save_routing_graph (bool) \u662f\u5426\u4fdd\u5b58\u5404\u6d88\u606f\u7684\u8def\u7531\u4f20\u64ad\u56fe\u3002\u5efa\u8bae\u7f51\u7edc\u89c4\u6a21\u8f83\u5927\u65f6\u5173\u95ed <p>\u63a5\u53e3\u51fd\u6570\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u8bbe\u7f6e\u5982\u4e0a\u7f51\u7edc\u53c2\u6570 access_network new_msg:list[Message], minerid:int,round:int \u5c06\u65b0\u6d88\u606f\u3001\u77ff\u5de5id\u548c\u5f53\u524d\u8f6e\u6b21\u5c01\u88c5\u6210Packet\uff0c\u52a0\u5165network_tape diffuse round:int diffuse\u5206\u4e3areceive_process\u548cforward_process\u4e24\u90e8\u5206 <ul> <li><code>receive_process</code> \u5c06\u4f20\u64ad\u5b8c\u6210\u7684msg\u53d1\u7ed9\u63a5\u6536\u65b9;</li> </ul> <pre><code>def receive_process(self,round):\n    \"\"\"\u63a5\u6536\u8fc7\u7a0b\"\"\"\n    if len(self._active_links)==0:\n        return\n    dead_links = []\n    for i, link in enumerate(self._active_links):\n        # \u66f4\u65b0\u94fe\u8defdelay\n        if link.delay &gt; 0:\n            link.delay -= 1\n        # \u5224\u65ad\u94fe\u8def\u662f\u5426\u4e2d\u65ad\n        if self.link_outage(round, link):\n            dead_links.append(i)\n            continue\n        if link.delay &gt; 0:\n            continue\n        # \u94fe\u8def\u4f20\u64ad\u5b8c\u6210\uff0ctarget\u63a5\u6536\u6570\u636e\u5305\n        link.target_miner().NIC.nic_receive(link.packet)\n        link.source_miner().NIC.get_reply(\n            link.get_block_msg_name(),link.target_id(), None, round)\n        dead_links.append(i)\n    # \u6e05\u7406\u4f20\u64ad\u7ed3\u675f\u7684link\n    if len(dead_links) == 0:\n        return\n    self._active_links = [link for i, link in enumerate(self._active_links) \n                        if i not in dead_links]\n    dead_links.clear()\n</code></pre> <ul> <li><code>forward_process</code> \u4ece\u77ff\u5de5NIC\u4e2d\u53d6\u5f97\u5c06\u8981\u4f20\u64ad\u7684msg\u8fdb\u5165\u7f51\u7edc\uff1b</li> </ul> <pre><code>def forward_process(self, round):\n    \"\"\"\u8f6c\u53d1\u8fc7\u7a0b\"\"\"\n    for m in self._miners:\n        m.NIC.nic_forward(round)\n</code></pre> <p>\u5176\u4ed6\u91cd\u8981\u51fd\u6570\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e cal_delay msg:Message, sourceid:int, targetid:int \u8ba1\u7b97\u4e24\u77ff\u5de5\u95f4\u7684\u65f6\u5ef6\uff0c\u5305\u62ec\u4f20\u8f93\u65f6\u5ef6\u548c\u5904\u7406\u65f6\u5ef6\u4e24\u90e8\u5206\u3002\u540c\u65f6\u5411\u4e0a\u53d6\u6574\uff0c\u4e14\u6700\u4f4e\u4e3a1\u8f6e\u3002\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a<code>delay=trans_delay+process_delay\uff0c trans_delay=(blocksize*8)/bandwidth</code> generate_network - \u6839\u636e\u7f51\u7edc\u53c2\u6570\u751f\u6210\u7f51\u7edc\u3002 write_routing_to_json - \u6bcf\u5f53\u4e00\u4e2ablock\u4f20\u64ad\u7ed3\u675f,\u5c06\u5176\u8def\u7531\u7ed3\u679c\u8bb0\u5f55\u5728json\u6587\u4ef6\u4e2d\uff0c\u5176\u4e2d\u5305\u542borigin_miner\u548crouting_histroy\u4e24\u4fe1\u606f gen_routing_gragh_from_json - \u8bfb\u53d6routing_histroy.json\u6587\u4ef6,\u5e76\u5c06\u5176\u8f6c\u5316\u4e3arouting_gragh.svg\u56fe\u50cf\uff0c\u4fdd\u5b58\u5728Network Routing\u6587\u4ef6\u5939\u4e2d\u3002 record_block_propagation_time \u8bb0\u5f55\u6d88\u606f\u4f20\u64ad\u65f6\u95f4\u3002"},{"location":"developer-guide/#\u65e0\u7ebf\u81ea\u7ec4\u7ec7\u7f51\u7edc-AdHocNetwork","title":"\u65e0\u7ebf\u81ea\u7ec4\u7ec7\u7f51\u7edc AdHocNetwork","text":"<p>\u5728\u7ed9\u5b9a\u6b63\u65b9\u5f62\u533a\u57df\u4e2d\u968f\u673a\u751f\u6210\u8282\u70b9\u4f4d\u7f6e\uff0c\u8bbe\u7f6e\u8282\u70b9\u95f4\u901a\u4fe1\u8303\u56f4\uff0c\u901a\u4fe1\u8303\u56f4\u5185\u7684\u8282\u70b9\u4f1a\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5\uff0c\u53ef\u4ee5\u4e92\u76f8\u4f20\u9012\u6d88\u606f\u3002\u6bcf\u4e00\u8f6e\u6b21\u8282\u70b9\u8fdb\u884c\u9ad8\u65af\u968f\u673a\u6e38\u8d70\uff0c\u5373\u5728x\u548cy\u5750\u6807\u52a0\u4e0a\u4e00\u4e2a\u96f6\u5747\u503c\u3001\u7ed9\u5b9a\u65b9\u5dee\u7684\u9ad8\u65af\u968f\u673a\u53d8\u91cf\uff0c\u5e76\u6839\u636e\u8282\u70b9\u901a\u4fe1\u8303\u56f4\uff0c\u65ad\u5f00\u65e7\u8fde\u63a5\u6216\u5efa\u7acb\u65b0\u7684\u8fde\u63a5\u3002 \u6bcf\u4e2a\u6d88\u606f\u5728\u4f20\u8f93\u524d\u4f1a\u88ab\u5206\u6bb5(Segment)\uff0c\u6bcf\u4e00\u6bb5\u7684\u4f20\u8f93\u65f6\u95f4\u90fd\u662f\u4e00\u8f6e\uff0c\u63a5\u6536\u65b9NIC\u53ea\u6709\u63a5\u6536\u5230\u5168\u90e8\u5206\u6bb5\u540e\uff0c\u624d\u4f1a\u5c06\u5b8c\u6574\u7684\u6d88\u606f\u4f20\u9012\u7ed9\u5171\u8bc6\u5c42\u3002</p> <p>\u7f51\u7edc\u53c2\u6570\uff1a</p> \u5c5e\u6027 \u8bf4\u660e init_mode (str) \u7f51\u7edc\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u968f\u673a\u751f\u6210 outage_prob(float) \u6bcf\u6761\u94fe\u8def\u7684\u4e2d\u65ad\u6982\u7387 segment_size(float) \u6d88\u606f\u5206\u6bb5\u5927\u5c0f region_width(int) \u6b63\u65b9\u5f62\u533a\u57df\u7684\u5bbd\u5ea6\uff0c\u8282\u70b9\u5728\u8be5\u533a\u57df\u4e2d\u8fdb\u884c\u9ad8\u65af\u968f\u673a\u6e38\u8d70 comm_range(int) \u8282\u70b9\u901a\u4fe1\u8ddd\u79bb\uff0c\u5728\u901a\u4fe1\u8ddd\u79bb\u5185\u7684\u4e24\u8282\u70b9\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 move_variance(float) \u8282\u70b9\u8fdb\u884c\u9ad8\u65af\u968f\u673a\u6e38\u8d70\u65f6\uff0c\u6307\u5b9axy\u5750\u6807\u79fb\u52a8\u8ddd\u79bb\u7684\u65b9\u5dee outage_prob(float) \u94fe\u8def\u4e2d\u65ad\u6982\u7387 <p>\u63a5\u53e3\u51fd\u6570\uff1a</p> \u51fd\u6570 \u53c2\u6570 \u8bf4\u660e set_net_param *args, **kargs \u8bbe\u7f6e\u5982\u4e0a\u7f51\u7edc\u53c2\u6570 access_network new_msg:list[Message], minerid:int,round:int \u5c06\u65b0\u6d88\u606f\u3001\u77ff\u5de5id\u548c\u5f53\u524d\u8f6e\u6b21\u5c01\u88c5\u6210Packet\uff0c\u52a0\u5165network_tape diffuse round:int diffuse\u5206\u4e3areceive_process\u548cforward_process"},{"location":"developer-guide/#\u653b\u51fb\u5c42-Attack","title":"\u653b\u51fb\u5c42 Attack","text":"<p>\u653b\u51fb\u8005\u901a\u8fc7\u611f\u77e5\u73af\u5883\uff0c\u5224\u65ad\u5f53\u524d\u5f62\u52bf\u5e76\u4f5c\u51fa\u653b\u51fb\u884c\u4e3a\u5224\u51b3\uff0c\u6267\u884c\u5f53\u524d\u8f83\u4f18\u7684\u653b\u51fb\u51b3\u7b56\u3002\u76ee\u524d\uff0c\u653b\u51fb\u8005\u90e8\u5206\u8fd8\u672a\u5b9e\u73b0\u52a8\u6001\u51b3\u7b56\uff0c\u9700\u8981\u5728\u4eff\u771f\u5668\u8fd0\u884c\u524d\u4fee\u6539system_config.ini\u4e2d\u7684\u53c2\u6570\u4ee5\u8bbe\u7f6e\u4e0d\u540c\u7684\u653b\u51fb\u7b56\u7565\u3002\uff08\u5185\u5bb9\u7b49\u65e5\u8680\u653b\u51fb\u5168\u90e8\u5b8c\u5584\u4e4b\u540e\u518d\u7ee7\u7eed\u66f4\u65b0\uff09</p>"},{"location":"developer-guide/#\u653b\u51fb\u5c42\u4e0e\u6574\u4f53\u7684\u4ea4\u4e92\u903b\u8f91","title":"\u653b\u51fb\u5c42\u4e0e\u6574\u4f53\u7684\u4ea4\u4e92\u903b\u8f91","text":"<p>\u4e0b\u56fe\u4e3a\u67d0\u4e00\u56de\u5408\u653b\u51fb\u6a21\u5757\u7684\u8fd0\u884c\u793a\u4f8b\uff0c\u653b\u51fb\u6a21\u5757\u5b9e\u9645\u8fdb\u884c\u7684\u90e8\u5206\u4e3a\u4e0b\u56fe\u865a\u7ebf\u6846\u5185\u6240\u793a\u3002t\u4e2a\u653b\u51fb\u8005\u6563\u5e03\u5728\u77ff\u5de5\u4e4b\u95f4\uff08\u7f16\u53f7\u53ef\u5728system_config.ini\u4e2d\u6307\u5b9a\uff09\u3002\u6bcf\u4e2a\u8f6e\u6b21\u4e2d\uff0c\u653b\u51fb\u6a21\u5757\u53ea\u4f1a\u88ab\u89e6\u53d1\u4e00\u6b21\uff0c\u6bcf\u6b21\u89e6\u53d1\u90fd\u4f1a\u8fdb\u884c\u4e00\u6b21\u5b8c\u6574\u7684\u653b\u51fb\u884c\u4e3a\uff08\u4f8b\u5982\uff0c\u4ee5\u6240\u6709\u77ff\u5de5\u6bcf\u8f6e\u6b21\u8ba1\u7b97\u54c8\u5e0c\u6570q\u5747\u76f8\u540c\u7684PoW\u4e3a\u4f8b\uff0c\u653b\u51fb\u8005\u6bcf\u6b21\u653b\u51fb\u884c\u4e3a\u53ef\u4ee5\u6267\u884ctq\u6b21\u54c8\u5e0c\u8ba1\u7b97\uff09\u5f53\u524d\u7248\u672c\u4e2d\uff0c\u6bcf\u8f6e\u6b21\u653b\u51fb\u8005\u4f1a\u5728\u968f\u673a\u4f4d\u7f6e\u88ab\u89e6\u53d1\uff0c\u4e3b\u8981\u9632\u6b62\u653b\u51fb\u8005\u5728\u56fa\u5b9a\u4f4d\u7f6e\u89e6\u53d1\u5f71\u54cd\u516c\u5e73\u6027\u3002* \u653b\u51fb\u6a21\u5757\u4e3b\u8981\u4e0e\u7f51\u7edc\u548c\u73af\u5883\u8fdb\u884c\u4ea4\u4e92\uff0c\u4e0e\u73af\u5883\u4ea4\u4e92\u7684\u4e3b\u8981\u5185\u5bb9\u4e3a\u611f\u77e5\u5f53\u524d\u201c\u5c40\u52bf\u201d\u4e0e\u5411\u5168\u5c40\u94fe\u4e0a\u4f20\u533a\u5757\u4e24\u4e2a\u90e8\u5206\uff1b\u4e0e\u7f51\u7edc\u4ea4\u4e92\u7684\u5185\u5bb9\u4e3b\u8981\u662f\u5c06\u533a\u5757\u53d1\u9001\u81f3\u7f51\u7edc\u3002</p> <p></p>"},{"location":"developer-guide/#\u5df2\u5b9e\u73b0\u7684\u653b\u51fb\u65b9\u5f0fAttack-Type","title":"\u5df2\u5b9e\u73b0\u7684\u653b\u51fb\u65b9\u5f0f(Attack Type)","text":"<ul> <li>\u7b97\u529b\u653b\u51fb(Honest Mining)</li> <li>\u81ea\u79c1\u6316\u77ff(Selfish Mining)</li> <li>\u53cc\u82b1\u653b\u51fb(Double Spending)</li> <li>\u65e5\u8680\u653b\u51fb(Eclipse Attack)</li> </ul>"},{"location":"developer-guide/#\u653b\u51fb\u5c42\u4ee3\u7801\u7ed3\u6784Package-Tree","title":"\u653b\u51fb\u5c42\u4ee3\u7801\u7ed3\u6784(Package Tree)","text":"<pre><code>\u251c\u2500 attack\n\u2502  \u251c\u2500 adversary.py\n\u2502  \u251c\u2500 attack_type\n\u2502  \u2502  \u251c\u2500 atomization_behavior.py\n\u2502  \u2502  \u251c\u2500 attack_type.py\n\u2502  \u2502  \u251c\u2500 double_spending.py\n\u2502  \u2502  \u251c\u2500 eclipse.py\n\u2502  \u2502  \u251c\u2500 honest_mining.py\n\u2502  \u2502  \u251c\u2500 selfish_mining.py\n\u2502  \u2502  \u2514\u2500 _atomization_behavior.py\n\u2502  \u2514\u2500 _adversary.py\n</code></pre>"},{"location":"developer-guide/#_adversarypy--adversarypy","title":"_adversary.py &amp; adversary.py","text":"<p>_adversary.py\u63d0\u4f9bAdversary\u62bd\u8c61\u7236\u7c7b\uff0c\u7528\u4e8eadversary.py\u63d0\u4f9b\u7684Adversary\u7ee7\u627f\u3002\u73af\u5883import\u6587\u4ef6adversary.py\u4e2d\u7684Adversary\u7c7b\uff0c\u5e76\u521b\u5efa\u5bf9\u8c61\uff0c\u968f\u540e\u6839\u636e\u73af\u5883\u4f20\u53c2\u521d\u59cb\u5316\u6240\u6709Adversary\u8bbe\u7f6e\u3002\u8be5Adversary\u5bf9\u8c61\u4f5c\u4e3a\u653b\u51fb\u8005\u5168\u4f53\u4ee3\u8868\u7684\u62bd\u8c61\uff0c\u6267\u884c\u653b\u51fb\u3002</p>"},{"location":"developer-guide/#-_adversarypy--adversarypy\u4e2d\u7684\u6210\u5458\u53d8\u91cf","title":"&gt;&gt;&gt; _adversary.py &amp; adversary.py\u4e2d\u7684\u6210\u5458\u53d8\u91cf","text":""},{"location":"developer-guide/#\u5185\u90e8\u6210\u5458\u53d8\u91cf","title":"\u5185\u90e8\u6210\u5458\u53d8\u91cf","text":"\u6210\u5458\u53d8\u91cf \u7c7b\u578b \u89e3\u91ca __Miner_ID int \u503c\u4e3a-1\uff0c\u4e0d\u53d8\u3002\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\uff0c\u7c7b\u4f3c\u666e\u901a\u77ff\u5de5Adversary\u4e5f\u9700\u8981\u521d\u59cb\u5316\u5171\u8bc6consensus\uff0c\u56e0\u6b64\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u88ab\u91cd\u590d\u7684ID\u3002 __adver_num int \u8bb0\u5f55\u653b\u51fb\u8005\u7684\u6570\u91cf\u3002 __attack_type class: AttackType \u6839\u636e\u8bbe\u7f6e\u521b\u5efa\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\uff0c\u82e5\u672a\u8bbe\u7f6e\u5219\u9ed8\u8ba4\u662fHonestMining\u3002 __eclipse bool \u8bb0\u5f55\u662f\u5426\u6267\u884c\u65e5\u8680\u653b\u51fb\u3002 __eclipse_attack class: AttackType \u82e5\u6267\u884c\u65e5\u8680\u653b\u51fb\uff0c\u5219\u521b\u5efa\u65e5\u8680\u653b\u51fbEclipse\u5bf9\u8c61\uff0c\u5426\u5219\u4e3aNone\u3002\u521b\u5efa\u65e5\u8680\u653b\u51fb\u65f6\uff0c\u5185\u90e8\u521d\u59cb\u5316\u4f1a\u8bb0\u5f55\u4e0a\u8ff0\u7684\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\uff0c\u4ee5\u7279\u5b9a\u653b\u51fb\u7c7b\u578b\u5b9e\u884c\u65e5\u8680\u653b\u51fb\u3002 __adver_ids list[int] \u8bb0\u5f55\u4e86\u653b\u51fb\u8005ID\u7684list\u3002 __miner_list list[class: Miner] \u8bb0\u5f55\u4e86\u5168\u4f53\u77ff\u5de5\u7684list\u3002 __network_type class: Network \u8bb0\u5f55\u4e86\u5f53\u524d\u7f51\u7edc\u7c7b\u578b\u5bf9\u8c61\uff0c\u73af\u5883\u521b\u5efa\uff0c\u5e76\u4f20\u7ed9Adversary\u3002 __global_chain class: Chain \u8bb0\u5f55\u4e86\u5f53\u524d\u5168\u5c40\u94fe\u5bf9\u8c61\uff0c\u73af\u5883\u521b\u5efa\uff0c\u5e76\u4f20\u7ed9Adversary\u3002 __adver_consensus_param dict \u4ee5dict\u7684\u5f62\u5f0f\u8bb0\u5f55\u4e86\u653b\u51fb\u8005\u6267\u884c\u7684\u5171\u8bc6\u5bf9\u8c61\u9700\u8981\u7684\u53c2\u6570\u3002 __consensus_type class: Consensus \u6839\u636e\u8bbe\u7f6e\u521b\u5efa\u5171\u8bc6\u7c7b\u578b\u5bf9\u8c61\u3002 __attack_arg dict \u8bb0\u5f55\u4e86\u653b\u51fb\u53c2\u6570\u3002\uff08\u76ee\u524d\u653b\u51fb\u4e2d\u4ec5\u6709DoubleSpending\u9700\u8981\u8be5\u53c2\u6570\u3002"},{"location":"developer-guide/#-_adversarypy--adversarypy\u4e2d\u7684\u6210\u5458\u65b9\u6cd5","title":"&gt;&gt;&gt; _adversary.py &amp; adversary.py\u4e2d\u7684\u6210\u5458\u65b9\u6cd5","text":""},{"location":"developer-guide/#\u5185\u90e8\u65b9\u6cd5","title":"\u5185\u90e8\u65b9\u6cd5","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570\uff08\u7c7b\u578b\uff09 \u8fd4\u56de\u503c: \u7c7b\u578b \u89e3\u91ca __adver_setter() **args: any None \u73af\u5883\u521b\u5efaAdversary\u5bf9\u8c61\u65f6\uff0c\u521d\u59cb\u5316\u9636\u6bb5\u81ea\u52a8\u6267\u884c\u7684\u6210\u5458\u65b9\u6cd5\uff0c\u6839\u636e\u4f20\u53c2\u8bbe\u7f6e\u6240\u6709\u7684\u6210\u5458\u53d8\u91cf\u3002 __adver_gener() None __adver_list: list[class: Miner] \u6839\u636e\u8bbe\u7f6e\uff0c\u5728\u5168\u4f53\u77ff\u5de5\u4e2d\u751f\u6210\u968f\u673a\u6216\u6307\u5b9a\u7684\u653b\u51fb\u8005\u3002 __consensus_q_init() None None \u91cd\u65b0\u8ba1\u7b97\u653b\u51fb\u8005\u7fa4\u4f53\u62bd\u8c61\u5bf9\u8c61Adversary\u7684\u7b97\u529bq\uff08\u4e3a\u6240\u6709\u653b\u51fb\u8005\u7684\u7b97\u529b\u7d2f\u52a0\uff09\u3002 __attack_type_init() None None \u521d\u59cb\u5316\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\uff0c\u7531\u4e0a\u8ff0\u7684\u6210\u5458\u53d8\u91cf\u786e\u5b9a\u3002"},{"location":"developer-guide/#\u5916\u90e8\u65b9\u6cd5","title":"\u5916\u90e8\u65b9\u6cd5","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570: \u7c7b\u578b \u8fd4\u56de\u503c: \u7c7b\u578b \u89e3\u91ca get_adver_ids() None __adver_ids: list[int] \u8fd4\u56de\u8bb0\u5f55\u653b\u51fb\u8005ID\u7684list\u3002 get_adver_num() None __adver_num: int \u8fd4\u56de\u653b\u51fb\u8005\u6570\u91cf\u3002 get_attack_type_name() None attack_type.__class.name: str \u8fd4\u56de\u653b\u51fb\u7c7b\u578b\u7684\u540d\u5b57\u3002 get_attack_type() None __attack_type: AttackType \u8fd4\u56de\u653b\u51fb\u7c7b\u578b\u7684\u540d\u5b57\u3002 get_eclipse() None __eclipse: bool \u521d\u59cb\u5316\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\uff0c\u7531\u4e0a\u8ff0\u7684\u6210\u5458\u53d8\u91cf\u786e\u5b9a\u3002 get_adver_q() None __consensus_type.q: int \u521d\u59cb\u5316\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\uff0c\u7531\u4e0a\u8ff0\u7684\u6210\u5458\u53d8\u91cf\u786e\u5b9a\u3002 excute_per_round(round) round: int None Adversary\u7684\u4e3b\u8981\u65b9\u6cd5\uff0c\u6267\u884c\u653b\u51fb\uff0c\u4f1a\u8c03\u7528\u5bf9\u5e94\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6210\u5458\u65b9\u6cd5\u3002 get_info() None None or __attack_type.info_getter() \u8c03\u7528\u5bf9\u5e94\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6210\u5458\u65b9\u6cd5\uff0c\u83b7\u5f97\u5f53\u524d\u7684\u4fe1\u606f\u3002\u4e00\u822c\u5305\u542b\u6210\u529f\u7387\uff08\u6216\u4e3b\u94fe\u8d28\u91cf\uff09\u4ee5\u53ca\u5bf9\u5e94\u7406\u8bba\u503c\u3002"},{"location":"developer-guide/#_atomization_behaviorpy--atomization_behaviorpy","title":"_atomization_behavior.py &amp; atomization_behavior.py","text":"<p>_atomization_behavior.py\u4e3a\u7236\u7c7b\uff0catomization_behavior.py\u7ee7\u627f\uff0c\u5728\u540e\u8005\u4e2d\u5b9e\u73b0\u4e86\u5177\u4f53\u7684\u539f\u5b50\u5316\u884c\u4e3a(Atomization Behavior\uff0c\u4e0b\u7b80\u79f0AB)\u3002\u89c4\u5b9a\u7236\u7c7b\uff0c\u662f\u56e0\u4e3aAB\u4e2d\u6709\u5fc5\u987b\u5b9e\u73b0\u7684\u884c\u4e3a\uff0c\u901a\u8fc7\u7236\u7c7b\u7ed9\u51fa\u4e00\u4e2a\u884c\u4e3a\u6807\u51c6\uff0c\u5176\u6784\u6210\u653b\u51fb\u7684\u57fa\u7840\u3002\u6b64\u5916\u8fd8\u60f3\u6dfb\u52a0\u529f\u80fd\u76f4\u63a5\u5728\u7ee7\u627f\u7c7b\u4e2d\u6dfb\u52a0\u5373\u53ef\u3002\u56e0\u4e3a\u8be5\u7ee7\u627f\u7c7b\u4e3a\u65b9\u6cd5\u7c7b\uff0c\u6ca1\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4ee5\u4e0b\u8be6\u7ec6\u4ecb\u7ecdAB\u7684\u65b9\u6cd5\uff08\u975e\u8868\u683c\u5f62\u5f0f\uff09\u3002</p>"},{"location":"developer-guide/#\u539f\u5b50\u5316\u884c\u4e3aAtomization-Behavior","title":"\u539f\u5b50\u5316\u884c\u4e3a(Atomization Behavior)","text":""},{"location":"developer-guide/#-1-renew","title":"&gt;&gt;&gt; 1. renew()","text":"<p>renew\u7684\u4f5c\u7528\u4e3a\u66f4\u65b0\u653b\u51fb\u8005\u7684\u6240\u6709\u533a\u5757\u94fe\u72b6\u6001\uff1a\u57fa\u51c6\u94fe\u3001\u653b\u51fb\u94fe\u3001\u77ff\u5de5\u72b6\u6001\uff08\u5305\u62ec\u8f93\u5165\u548c\u5176\u81ea\u8eab\u94fe\uff09\u7b49\u3002\u5f53\u524d\u7248\u672c\u7684renew\u4ec5\u6709round\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\uff0cround\u53ef\u4ee5\u89c6\u4e3a\u4e00\u79cd\u73af\u5883\u72b6\u6001\u3002\u653b\u51fb\u8005\u7684_receive_tape\u4e2d\u5305\u542b\u4e86\u4ee5\u653b\u51fb\u8005\u4e3a\u89c6\u89d2\uff0c\u6bcf\u56de\u5408\u80fd\u591f\u63a5\u53d7\u5230\u7684\u6700\u65b0\u533a\u5757\u3002    </p> <p>renew\u4e2d\u653b\u51fb\u8005\u904d\u5386\u5176\u63a7\u5236\u7684\u6bcf\u4e00\u4e2a\u77ff\u5de5\u3002\u6240\u6709\u77ff\u5de5\u90fd\u5982\u8bda\u5b9e\u77ff\u5de5\u4e00\u6837\u6267\u884clocal_state_update\uff08\u8be6\u89c1\u5171\u8bc6\u90e8\u5206\uff09\u3002\u6839\u636elocal_state_update\u5177\u4f53\u7ed3\u679c\u5bf9\u5b57\u5178\u8fdb\u884c\u66f4\u65b0\u3002</p> <p>\u82e5\u5b58\u5728\u66f4\u65b0\uff0c\u5219\u5c06\u65b0\u4ea7\u751f\u7684\u533a\u5757\u66f4\u65b0\u5230\u57fa\u51c6\u94fe\u548c\u5168\u5c40\u94fe\u4e0a\u3002\u524d\u8005\u4f5c\u4e3a\u653b\u51fb\u8005\u653b\u51fb\u7684\u53c2\u8003\u57fa\u51c6\uff08\u653b\u51fb\u8005\u89c6\u89d2\u4e0b\u6700\u65b0\u7684\u94fe\uff09\uff0c\u540e\u8005\u4f5c\u4e3a\u533a\u5757\u94fe\u7ef4\u62a4\u8005\u6709\u4e49\u52a1\u5c06\u6700\u65b0\u7684\u533a\u5757\u8bb0\u5f55\u5728\u5168\u5c40\u4e2d\u3002</p> <p>\u603b\u7ed3\uff1arenew\u81f3\u5c11\u9700\u8981\u4ee5\u4e0b\u4e09\u90e8\u5206\u529f\u80fd\uff1a</p> <ul> <li> <p>\u5bf9\u6bcf\u4e2a\u653b\u51fb\u8005\u77ff\u5de5\u8fdb\u884clocal_state_update\u3002</p> </li> <li> <p>\u6839\u636e\u66f4\u65b0\u7ed3\u679c\u66f4\u65b0\u57fa\u51c6\u94fe\u548c\u5168\u5c40\u94fe\u3002</p> </li> <li> <p>\u6839\u636e\u9700\u8981\u5c06\u6bcf\u8f6e\u7684\u66f4\u65b0\u7ed3\u679c\u8fdb\u884c\u8bb0\u5f55\u3002</p> </li> </ul> <p>\u82e5\u5f00\u53d1\u8005\u60f3\u8981\u5f00\u53d1\u65b0\u7684\u653b\u51fb\u6a21\u5f0f\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8c03\u6574\u4e09\u90e8\u5206\u7684\u5177\u4f53\u5185\u5bb9\uff0c\u6216\u589e\u52a0\u5176\u4ed6\u529f\u80fd\uff0c\u4f46\u8fd9\u4e09\u90e8\u5206\u529f\u80fd\u662f\u4e0d\u80fd\u5c11\u7684\u3002</p>"},{"location":"developer-guide/#-2-mine","title":"&gt;&gt;&gt; 2. mine()","text":"<p>mine\u8c03\u7528\u5f53\u524d\u7684\u5171\u8bc6\u65b9\u6cd5\uff0c\u5e76\u6267\u884c\u5171\u8bc6\u65b9\u6cd5\u5bf9\u5e94\u7684\u6316\u77ff\u529f\u80fd\uff08\u5373\u8bda\u5b9e\u6316\u77ff\uff09\u3002\u5f53\u524d\u7248\u672c\u7684mine\u4f1a\u5728\u653b\u51fb\u8005\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u4f5c\u4e3a\u5f53\u524d\u56de\u5408\u4f5c\u4e3a\u6316\u77ff\u7684\u201c\u4ee3\u8868\u201d\u3002\u6b64\u5916\uff0c\u6e90\u4ee3\u7801\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u901a\u8fc7ID\u6307\u5b9a\u77ff\u5de5\u6316\u77ff\u7684\u529f\u80fd\u3002</p> <p>\u82e5\u4ea7\u751f\u533a\u5757\uff0c\u5219\u5bf9\u653b\u51fb\u94fe\uff08adver_chain\uff09\u548c\u5168\u5c40\u94fe\u8fdb\u884c\u66f4\u65b0</p> <p>\u5e76\u904d\u5386\u6240\u6709\u653b\u51fb\u8005\uff0c\u5c06\u533a\u5757\u66f4\u65b0\u81f3\u653b\u51fb\u8005\u7684_receive_tape\u4e2d\u3002\u76ee\u7684\u6709\u4e8c\uff0c\u4e00\u662f\u4ee4\u653b\u51fb\u8005\u76f4\u63a5\u80fd\u5171\u4eab\u533a\u5757\uff08\u4e0b\u4e00\u56de\u5408\u6536\u5230\uff09\uff0c\u4e8c\u662f\u5728\u4e0b\u4e00\u56de\u5408\u53ef\u4ee5\u5c06\u8be5\u533a\u5757\u66f4\u65b0\u5230\u57fa\u51c6\u94fe\u4e2d\u3002</p> <p>mine\u6a21\u5757\u7684\u5185\u5bb9\u4e00\u822c\u4e0d\u4f1a\u6709\u5927\u7684\u6539\u52a8\uff0c\u56e0\u4e3a\u5176\u4e3b\u8981\u529f\u80fd\u5c31\u662f\u8c03\u7528\u5171\u8bc6\u7684\u6316\u77ff\u529f\u80fd\uff0c\u5e76\u6839\u636e\u7ed3\u679c\u66f4\u65b0\u5bf9\u5e94\u7684\u533a\u5757\u94fe\u3002</p>"},{"location":"developer-guide/#-3-upload","title":"&gt;&gt;&gt; 3. upload()","text":"<p>\u5411\u7f51\u7edc\u4e0a\u4f20Adversary\u7684\u533a\u5757\u3002</p>"},{"location":"developer-guide/#-4-adopt","title":"&gt;&gt;&gt; 4. adopt()","text":"<p>adopt\u7528\u4e8e\u5c06\u57fa\u51c6\u94fe\uff08honset_chain\uff09\u7684\u7ed3\u679c\u66f4\u65b0\u5230\u653b\u51fb\u94fe\uff08adver_chain\uff09\u4e0a\u3002\u653b\u51fb\u94fe\u53ef\u4ee5\u770b\u4f5c\u653b\u51fb\u96c6\u56e2\u5171\u540c\u7ef4\u62a4\u7684\u4e00\u6761\u94fe\uff0c\u800c\u4e0d\u662f\u5404\u6076\u610f\u77ff\u5de5\u81ea\u8eab\u7684\u94fe\uff0c\u56e0\u6b64\u8fd8\u8981\u66f4\u65b0\u6bcf\u4e2a\u6076\u610f\u77ff\u5de5\u7684\u672c\u5730\u94fe\u3002</p>"},{"location":"developer-guide/#-5-clear","title":"&gt;&gt;&gt; 5. clear()","text":"<p>\u6e05\u9664\u653b\u51fb\u8005\u4e2d\u6240\u6709\u77ff\u5de5\u7684\u8f93\u5165\u548c\u901a\u4fe1\u5185\u5bb9\u3002\u8bbe\u8ba1clear\u7684\u76ee\u7684\u610f\u5728\u6d88\u9664\u672c\u56de\u5408\u7684\u8f93\u5165\u5185\u5bb9\u5bf9\u4e0b\u4e00\u56de\u5408\u7684\u5f71\u54cd\uff0c\u56e0\u6b64clear\u5e94\u7f6e\u4e8e\u4e00\u7cfb\u5217\u884c\u4e3a\u4e4b\u540e\u3002</p>"},{"location":"developer-guide/#-6-wait","title":"&gt;&gt;&gt; 6. wait()","text":"<p>wait\u662f\u8ba9\u653b\u51fb\u6a21\u5757\u7b49\u5f85\u81f3\u4e0b\u4e00\u56de\u5408\u518d\u7ee7\u7eed\u8fd0\u884c\u3002\u56e0\u6b64\u5e76\u6ca1\u6709\u5bf9wait\u90e8\u5206\u8bbe\u8ba1\u5177\u4f53\u884c\u4e3a\uff0c\u5f53\u653b\u51fb\u5b9e\u4f8b\u6267\u884c\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u65f6\u4e5f\u4e0d\u4f1a\u505a\u51fa\u5b9e\u9645\u884c\u52a8\u3002</p>"},{"location":"developer-guide/#attack_typepy--honest_miningpy-selfish_miningpy-double_spending","title":"attack_type.py &amp; honest_mining.py, selfish_mining.py, double_spending","text":""},{"location":"developer-guide/#-attack_typepy\u4e2d\u7684\u6210\u5458\u53d8\u91cf","title":"&gt;&gt;&gt; attack_type.py\u4e2d\u7684\u6210\u5458\u53d8\u91cf","text":""},{"location":"developer-guide/#\u5916\u90e8\u53d8\u91cf","title":"\u5916\u90e8\u53d8\u91cf","text":"<p>\u672a\u8bf4\u660e\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5176\u542b\u4e49\u4e0e\u524d\u8ff0\u4e00\u81f4\u3002</p> \u6210\u5458\u53d8\u91cf \u7c7b\u578b \u8bf4\u660e behavior class: AtomizationBehavior \u8bb0\u5f55AtomizationBehavior\u7c7b\u578b\u7684\u65b9\u6cd5\u7c7b\u5bf9\u8c61\u3002 global_chain class: Chain -------- honest_chain class: Chain \u4ee5Adversary\u89c6\u89d2\u66f4\u65b0\u7684\u8bda\u5b9e\u94fe\u3002Adversary\u9664\u4e86\u5728\u5176\u4e0a\u66f4\u65b0\u8bda\u5b9e\u8282\u70b9\u7684\u533a\u5757\u5916\uff0c\u4e00\u822c\u4e0d\u4f1a\u8fdb\u884c\u989d\u5916\u64cd\u4f5c\uff0c\u4e5f\u662fAdversary\u653e\u5f03\u8fdb\u653b\u540e\uff0c\u63a5\u7eb3\u5e76\u66f4\u65b0adver_chain\u7684\u53c2\u8003\u3002 adver_chain class: Chain Adversary\u672c\u5730\u7684\u94fe\uff0c\u4e00\u822c\u4e0ehonest_chain\u4e0d\u4fdd\u6301\u4e00\u81f4\u3002 miner_list list[class: Miner] -------- adver_list list[class: Miner] -------- network_type class: Network -------- adver_consensus class: Consensus -------- attack_arg dict --------"},{"location":"developer-guide/#-attack_typepy\u4e2d\u7684\u6210\u5458\u65b9\u6cd5","title":"&gt;&gt;&gt; attack_type.py\u4e2d\u7684\u6210\u5458\u65b9\u6cd5","text":""},{"location":"developer-guide/#\u5185\u90e8\u65b9\u6cd5_1","title":"\u5185\u90e8\u65b9\u6cd5","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570: \u7c7b\u578b \u8fd4\u56de\u53c2\u6570: \u7c7b\u578b \u8bf4\u660e __set_behavior_init() None None \u521b\u5efaAtomizationBehavior\u7c7b\u578b\u7684\u65b9\u6cd5\u7c7b\u5bf9\u8c61\u3002"},{"location":"developer-guide/#\u5916\u90e8\u65b9\u6cd5_1","title":"\u5916\u90e8\u65b9\u6cd5","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570: \u7c7b\u578b \u8fd4\u56de\u53c2\u6570: \u7c7b\u578b \u8bf4\u660e set_init() global_chain: Chain, adver_list:list[Miner], miner_list:list[Miner], network_type: Network, adver_consensus: Consensus, attack_arg:dict None \u5bf9\u653b\u51fb\u7c7b\u578b\u5bf9\u8c61\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\u8d4b\u503c\u3002"},{"location":"developer-guide/#\u62bd\u8c61\u65b9\u6cd5","title":"\u62bd\u8c61\u65b9\u6cd5","text":"\u6210\u5458\u65b9\u6cd5 \u8f93\u5165\u53c2\u6570: \u7c7b\u578b \u8fd4\u56de\u53c2\u6570: \u7c7b\u578b \u8bf4\u660e renew_stage(round) round: int newest_block: Block, mine_input: any \u6267\u884c\u66f4\u65b0\u9636\u6bb5\u3002 attack_stage(round,mine_input) round: int None \u6267\u884c\u653b\u51fb\u9636\u6bb5\u3002 clear_record_stage(round) round: int None \u6267\u884c\u6e05\u9664\u548c\u8bb0\u5f55\u9636\u6bb5\u3002 excute_this_attack_per_round(round) round: int None \u6267\u884c\u5f53\u524d\u653b\u51fb\u3002 info_getter() None None \u8fd4\u56de\u5f53\u524d\u653b\u51fb\u4fe1\u606f\u3002"},{"location":"developer-guide/#\u4ee5HonestMining\u4e3a\u4f8b\u8bf4\u660e","title":"\u4ee5HonestMining\u4e3a\u4f8b\u8bf4\u660e","text":"<p>\u653b\u51fb\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff1arenew\u9636\u6bb5\uff0cattack\u9636\u6bb5\uff0c\u548cclear and record\u9636\u6bb5\u3002</p>"},{"location":"developer-guide/#-renew\u9636\u6bb5","title":"&gt;&gt;&gt; renew\u9636\u6bb5\uff1a","text":"<p><pre><code>def renew_stage(self,round):\n        ## 1. renew stage\n    newest_block, mine_input = self.behavior.renew(miner_list = self.adver_list, \\\n                                 honest_chain = self.honest_chain,round = round)\n    return newest_block, mine_input\n</code></pre> \u4ece\u4e0a\u9762\u5c55\u793a\u7684renew\u9636\u6bb5\u6e90\u4ee3\u7801\u53ef\u4ee5\u6ce8\u610f\u5230\uff0crenew\u9636\u6bb5\u9700\u8981\u8fd4\u56de\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662fnewest_block\u4e00\u4e2a\u662fmine_input\u3002\u800crenew\u9636\u6bb5\u4e5f\u4ee5renew()\u65b9\u6cd5\u4e3a\u4e3b\u3002</p>"},{"location":"developer-guide/#-attack\u9636\u6bb5","title":"&gt;&gt;&gt; attack\u9636\u6bb5\uff1a","text":"<p><pre><code>def attack_stage(self,round,mine_input):\n        ## 2. attack stage\n    current_miner = random.choice(self.adver_list)       \n    self.behavior.adopt(adver_chain = self.adver_chain, honest_chain = self.honest_chain)\n    attack_mine = self.behavior.mine(miner_list = self.adver_list, current_miner = current_miner \\\n                              , miner_input = mine_input,\\\n                              adver_chain = self.adver_chain, \\\n                                global_chain = self.global_chain, consensus = self.adver_consensus)\n    if attack_mine:\n        self.behavior.upload(network_type = self.network_type, adver_chain = self.adver_chain, \\\n              current_miner = current_miner, round = round)\n    else:\n        self.behavior.wait()\n</code></pre> attack\u9636\u6bb5Adversary\u8981\u6839\u636e\u6761\u4ef6\u6267\u884cadopt(), mine(), upload(), wait()\u3002\u6839\u636e\u5177\u4f53\u7684\u653b\u51fb\u7b56\u7565\u5224\u65ad\u5982\u4f55\u7ec4\u5408\u8fd9\u4e9b\u65b9\u6cd5\u3002HonestMining\u7b56\u7565\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u8981\u6316\u51fa\u533a\u5757\u5c31\u53d1\u5e03\uff0c\u5426\u5219\u5c31\u7b49\u5f85\u3002\u6ce8\u610f\u5230\u5373\u4f7f\u662f\u6700\u7b80\u5355\u7684HonestMining\u4e5f\u672a\u5fc5\u6bcf\u8f6e\u90fd\u4f1a\u4e0e\u7f51\u7edc\u4ea4\u4e92\u3002 \u5177\u4f53\u5230Selfish Mining\u548cDouble Spending\uff0c\u56e0\u4e3a\u7b56\u7565\u6bd4\u8f83\u590d\u6742\uff0c\u6e90\u4ee3\u7801\u4e5f\u6bd4\u8f83\u590d\u6742\uff0c\u82e5\u9700\u8981\u53ef\u4ee5\u76f4\u63a5\u67e5\u770b\u6e90\u4ee3\u7801\u3002</p>"},{"location":"developer-guide/#-clear-and-record\u9636\u6bb5","title":"&gt;&gt;&gt; clear and record\u9636\u6bb5\uff1a","text":"<p><pre><code>def clear_record_stage(self,round):\n    ## 3. clear and record stage\n    self.behavior.clear(miner_list = self.adver_list)# \u6e05\u7a7a\n    self.__log['round'] = round\n    self.__log['honest_chain'] = self.honest_chain.lastblock.name + ' Height:' + str(self.honest_chain.lastblock.height)\n    self.__log['adver_chain'] = self.adver_chain.lastblock.name + ' Height:' + str(self.adver_chain.lastblock.height)\n    self.resultlog2txt()\n</code></pre> \u8fd9\u4e2a\u9636\u6bb5\u6bd4\u8f83\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u8c03\u7528clear()\u65b9\u6cd5\uff0c\u6e05\u7a7a\u77ff\u5de5\u5185\u90e8\u7684\u5197\u4f59\u6570\u636e\uff0c\u5e76\u8bb0\u5f55\u4e00\u4e9b\u9700\u8981\u7684\u4fe1\u606f\u5230\u65e5\u5fd7dict\u4e2d\u3002</p>"},{"location":"developer-guide/#eclipsepy","title":"eclipse.py","text":"<p>eclipse\u4e0eHonestMining\u7b49\u653b\u51fb\u4e0d\u540c\uff0c\u5176\u9700\u8981\u4f9d\u6258\u524d\u9762\u8fd9\u4e09\u79cd\u653b\u51fb\uff0c\u624d\u80fd\u4ea7\u751f\u6548\u679c\u3002</p>"},{"location":"developer-guide/#\u8bc4\u4f30-Evaluation","title":"\u8bc4\u4f30 Evaluation","text":"<p><code>Environment.exec</code>\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5c06\u6267\u884c<code>Environment.view_and_write</code>\uff0c\u5bf9\u4eff\u771f\u7ed3\u679c\u8fdb\u884c\u8bc4\u4f30\u4e0e\u8f93\u51fa\u3002</p> <ul> <li> <p>view_and_write\u9996\u5148\u8c03\u7528view\uff0c\u83b7\u53d6\u7edf\u8ba1\u6570\u636e\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u5230\u547d\u4ee4\u884c</p> </li> <li> <p>view\u4f1a\u8c03\u7528global_chain\u4e2d\u7684<code>CalculateStatistics</code>\u51fd\u6570\uff0c\u5bf9\u5168\u5c40\u533a\u5757\u94fe\u6811\u72b6\u7ed3\u6784\u8fdb\u884c\u6570\u636e\u7edf\u8ba1\uff0c\u5e76\u5c06\u7ed3\u679c\u66f4\u65b0\u5230\u5b57\u5178\u53d8\u91cfstat\u4e2d\u3002</p> </li> <li> <p>\u4e4b\u540e\uff0c\u5c06\u4ece\u5171\u540c\u524d\u7f00\uff08common prefix\uff09\u3001\u94fe\u8d28\u91cf\uff08chain quality\uff09\u3001\u94fe\u589e\u957f\uff08chain growth\uff09\u4e09\u4e2a\u7ef4\u5ea6\u5bf9\u5168\u5c40\u533a\u5757\u94fe\u8fdb\u884c\u6570\u636e\u7edf\u8ba1\u3002\u8fd9\u4e09\u90e8\u5206\u7531external.py\u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u5b9e\u73b0\u3002</p> </li> <li> <p>\u5176\u6b21\uff0c\u8c03\u7528network\u4e2d\u7684<code>cal_block_propagation_times</code>\u51fd\u6570\uff0c\u83b7\u53d6\u7f51\u7edc\u76f8\u5173\u7684\u7edf\u8ba1\u53c2\u6570\u3002</p> </li> <li> <p>\u6700\u540e\uff0c<code>view_and_write</code>\u5c06\u8bc4\u4f30\u7ed3\u679c\u8f93\u51fa\u5230\u6587\u4ef6\u4e2d\u3002</p> </li> </ul> <p>\u4ee5\u4e0b\u4e3astat\u4e2d\u7edf\u8ba1\u53c2\u6570\u7684\u89e3\u91ca\uff0c\u5b83\u4eec\u548c\u4eff\u771f\u5668\u6700\u540e\u7684\u8f93\u51fa\u7ed3\u679c\u76f8\u5bf9\u5e94(\u8be6\u89c1\u7528\u6237\u624b\u518c)\uff1a</p> \u5b57\u5178\u6761\u76ee \u89e3\u91ca/\u8ba1\u7b97\u65b9\u5f0f num_of_generated_blocks \u751f\u6210\u7684\u533a\u5757\u603b\u6570 num_of_valid_blocks \u4e3b\u94fe\u4e2d\u7684\u533a\u5757\u603b\u6570\uff08\u4e3b\u94fe\u957f\u5ea6\uff09 num_of_stale_blocks \u5b64\u5757\u6570\uff08\u4e0d\u5728\u4e3b\u94fe\u4e2d\u7684\u533a\u5757\uff09 stale_rate \u5b64\u5757\u7387=\u5b64\u5757\u6570/\u533a\u5757\u603b\u6570 num_of_forks \uff08\u4e3b\u94fe\u4e0a\u7684\uff09\u5206\u53c9\u6570 fork_rate \u5206\u53c9\u7387=\u4e3b\u94fe\u4e0a\u6709\u5206\u53c9\u7684\u9ad8\u5ea6\u6570/\u4e3b\u94fe\u9ad8\u5ea6 average_block_time_main \u4e3b\u94fe\u5e73\u5747\u51fa\u5757\u65f6\u95f4=\u603b\u8f6e\u6570/\u4e3b\u94fe\u957f\u5ea6 block_throughput_main \u4e3b\u94fe\u533a\u5757\u541e\u5410\u91cf=\u4e3b\u94fe\u957f\u5ea6/\u603b\u8f6e\u6570 throughput_main_MB =\u4e3b\u94fe\u533a\u5757\u541e\u5410\u91cf*\u533a\u5757\u5927\u5c0f average_block_time_total \u603b\u5e73\u5747\u51fa\u5757\u65f6\u95f4=\u603b\u8f6e\u6570/\u751f\u6210\u7684\u533a\u5757\u603b\u6570 block_throughput_total \u603b\u533a\u5757\u541e\u5410\u91cf=\u751f\u6210\u7684\u533a\u5757\u603b\u6570/\u603b\u8f6e\u6570 throughput_total_MB =\u603b\u533a\u5757\u541e\u5410\u91cf*\u533a\u5757\u5927\u5c0f total_round \u8fd0\u884c\u603b\u8f6e\u6570 common_prefix_pdf \u7edf\u8ba1\u5171\u540c\u524d\u7f00\u5f97\u5230\u7684pdf\uff08\u7edf\u8ba1\u6bcf\u8f6e\u7ed3\u675f\u65f6\uff0c\u6240\u6709\u8bda\u5b9e\u8282\u70b9\u7684\u94fe\u7684\u5171\u540c\u524d\u7f00\u4e0e\u6700\u957f\u94fe\u957f\u5ea6\u7684\u5dee\u503c\u5f97\u5230\u7684\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\uff09 consistency_rate \u4e00\u81f4\u6027\u6307\u6807=common_prefix_pdf[0] average_chain_growth_in_honest_miners'_chain \u8bda\u5b9e\u77ff\u5de5\u94fe\u957f\u7684\u5e73\u5747\u589e\u52a0\u503c chain_quality_property \u94fe\u8d28\u91cf\u5b57\u5178\uff0c\u8bb0\u5f55\u8bda\u5b9e\u8282\u70b9\u548c\u6076\u610f\u8282\u70b9\u7684\u51fa\u5757\u6570\u76ee ratio_of_blocks_contributed_by_malicious_players \u6076\u610f\u8282\u70b9\u51fa\u5757\u5360\u6bd4 upper_bound t/(n-t) \u6076\u610f\u8282\u70b9\u51fa\u5757\u5360\u6bd4\u7684\u4e0a\u754c(n\u4e3a\u77ff\u5de5\u603b\u6570\uff0ct\u4e3a\u6076\u610f\u77ff\u5de5\u6570\u76ee) block_propagation_times \u533a\u5757\u4f20\u64ad\u65f6\u95f4\uff08\u5206\u5e03\uff09 <p>\u5173\u4e8e\u5171\u540c\u524d\u7f00\u3001\u94fe\u8d28\u91cf\u548c\u94fe\u589e\u957f\u4e09\u4e2a\u6307\u6807\u7684\u89e3\u91ca\u5982\u4e0b\uff1a</p> \u6027\u8d28 \u89e3\u91ca Common Prefix \u5f53\u6076\u610f\u8282\u70b9\u7b97\u529b\u4e0d\u8d85\u8fc7\u4e00\u5b9a\u6bd4\u4f8b\u65f6\uff0c\u8bda\u5b9e\u77ff\u5de5\u7ef4\u62a4\u7684\u533a\u5757\u94fe\u603b\u662f\u6709\u5f88\u957f\u7684\u5171\u540c\u524d\u7f00\uff08\u628a\u4efb\u610f\u4e24\u4e2a\u8bda\u5b9e\u77ff\u5de5\u7684\u94fe\u622a\u6389\u4e00\u6bb5\uff0c\u5269\u4f59\u90e8\u5206\uff08\u524d\u7f00\uff09\u603b\u662f\u76f8\u540c\u7684\uff09 Chain Quality \u622a\u53d6\u8bda\u5b9e\u77ff\u5de5\u94fe\u4e2d\u4efb\u610f\u8db3\u591f\u957f\u7684\u4e00\u6bb5\uff0c\u5176\u4e2d\u6076\u610f\u77ff\u5de5\u4ea7\u751f\u7684\u533a\u5757\u5360\u6bd4\u4e0d\u4f1a\u8d85\u8fc7t/(n-t)(n\u4e3a\u77ff\u5de5\u603b\u6570\uff0ct\u4e3a\u6076\u610f\u77ff\u5de5\u6570\u76ee) Chain Growth \u8bda\u5b9e\u77ff\u5de5\u7684\u94fe\u603b\u662f\u81f3\u5c11\u4ee5\u4e00\u5b9a\u901f\u7387\u589e\u957f <p>\u5bf9\u5e94external.py\u4e2d\u7684\u51fd\u6570\u5b9e\u73b0\u5982\u4e0b\uff1a</p> \u51fd\u6570 \u8f93\u5165\u53c2\u6570 \u8f93\u51fa\u53c2\u6570 \u8bf4\u660e common_prefix prefix1:Block\uff0cprefix2:Chain \u5171\u540c\u524d\u7f00prefix1 \u8ba1\u7b97\u4e24\u6761\u533a\u5757\u94fe\u7684\u5171\u540c\u524d\u7f00 chain_quality blockchain:Chain \u5b57\u5178cq_dict;\u6307\u6807chain_quality_property \u7edf\u8ba1\u6076\u610f\u8282\u70b9\u51fa\u5757\u5360\u6bd4 chain_growth blockchain:Chain \u533a\u5757\u94fe\u9ad8\u5ea6 \u83b7\u53d6\u533a\u5757\u94fe\u957f\u5ea6\u589e\u957f\uff08\u5373\u533a\u5757\u94fe\u9ad8\u5ea6\uff09 <p>\u6ce8\u610f\uff0ccommon_prefix\u548cchain_growth\u5747\u4ec5\u5b9e\u73b0\u4e86\u5bf9\u5e94\u6027\u8d28\u7684\u90e8\u5206\u529f\u80fd\uff1acommon_prefix\u53ea\u662f\u8ba1\u7b97\u4e24\u6761\u533a\u5757\u94fe\u7684\u5171\u540c\u524d\u7f00\uff0c\u800c\u4e00\u81f4\u6027\u6307\u6807\u6839\u636e\u6bcf\u6b21\u4eff\u771f\u7684\u65e5\u5fd7\u7edf\u8ba1\u51fa\u6765\u800cchain_growth\u4ec5\u8fd4\u56de\u533a\u5757\u94fe\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u94fe\u589e\u957f\u901f\u7387\u5219\u5728CalculateStatistics\u51fd\u6570\u4e2d\u5b8c\u6210\u3002</p> <p>\u6709\u5173\u4ee5\u4e0a\u4e09\u4e2a\u6307\u6807\u66f4\u52a0\u8be6\u7ec6\u7684\u542b\u4e49\uff0c\u53ef\u4ee5\u9605\u8bfb\uff1a</p> <ul> <li>J. A. Garay, A. Kiayias and N. Leonardos, \"The bitcoin backbone protocol: Analysis and applications\", Eurocrypt, 2015. https://eprint.iacr.org/2014/765.pdf</li> </ul>"}]}